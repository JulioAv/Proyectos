

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Aug 28 18:15:11 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  008F                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0105                     	;# 
   219  0107                     	;# 
   220  0108                     	;# 
   221  0109                     	;# 
   222  010C                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0187                     	;# 
   229  0188                     	;# 
   230  0189                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0088                     	;# 
   273  0089                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  008F                     	;# 
   278  0090                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009A                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  009F                     	;# 
   296  0105                     	;# 
   297  0107                     	;# 
   298  0108                     	;# 
   299  0109                     	;# 
   300  010C                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  010F                     	;# 
   305  0185                     	;# 
   306  0187                     	;# 
   307  0188                     	;# 
   308  0189                     	;# 
   309  018C                     	;# 
   310  018D                     	;# 
   311  0000                     	;# 
   312  0001                     	;# 
   313  0002                     	;# 
   314  0003                     	;# 
   315  0004                     	;# 
   316  0005                     	;# 
   317  0006                     	;# 
   318  0007                     	;# 
   319  0008                     	;# 
   320  0009                     	;# 
   321  000A                     	;# 
   322  000B                     	;# 
   323  000C                     	;# 
   324  000D                     	;# 
   325  000E                     	;# 
   326  000E                     	;# 
   327  000F                     	;# 
   328  0010                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0014                     	;# 
   333  0015                     	;# 
   334  0015                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001B                     	;# 
   342  001C                     	;# 
   343  001D                     	;# 
   344  001E                     	;# 
   345  001F                     	;# 
   346  0081                     	;# 
   347  0085                     	;# 
   348  0086                     	;# 
   349  0087                     	;# 
   350  0088                     	;# 
   351  0089                     	;# 
   352  008C                     	;# 
   353  008D                     	;# 
   354  008E                     	;# 
   355  008F                     	;# 
   356  0090                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0093                     	;# 
   361  0093                     	;# 
   362  0094                     	;# 
   363  0095                     	;# 
   364  0096                     	;# 
   365  0097                     	;# 
   366  0098                     	;# 
   367  0099                     	;# 
   368  009A                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  009F                     	;# 
   374  0105                     	;# 
   375  0107                     	;# 
   376  0108                     	;# 
   377  0109                     	;# 
   378  010C                     	;# 
   379  010C                     	;# 
   380  010D                     	;# 
   381  010E                     	;# 
   382  010F                     	;# 
   383  0185                     	;# 
   384  0187                     	;# 
   385  0188                     	;# 
   386  0189                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389                           
   390                           	psect	strings
   391  0800                     __pstrings:
   392  0800                     stringtab:
   393  0800                     __stringtab:
   394                           
   395                           ;	String table - string pointers are 1 byte each
   396  0800  1BFF               	btfsc	btemp+1,7
   397  0801  280A               	ljmp	stringcode
   398  0802  1383               	bcf	3,7
   399  0803  187F               	btfsc	btemp+1,0
   400  0804  1783               	bsf	3,7
   401  0805  0800               	movf	0,w
   402  0806  0A84               	incf	4,f
   403  0807  1903               	skipnz
   404  0808  0AFF               	incf	btemp+1,f
   405  0809  0008               	return
   406  080A                     stringcode:
   407  080A                     stringdir:
   408  080A  3008               	movlw	high stringdir
   409  080B  008A               	movwf	10
   410  080C  0804               	movf	4,w
   411  080D  0A84               	incf	4,f
   412  080E  0782               	addwf	2,f
   413  080F                     __stringbase:
   414  080F  3400               	retlw	0
   415  0810                     __end_of__stringtab:
   416  0810                     _dpowers:
   417  0810  3401               	retlw	1
   418  0811  3400               	retlw	0
   419  0812  340A               	retlw	10
   420  0813  3400               	retlw	0
   421  0814  3464               	retlw	100
   422  0815  3400               	retlw	0
   423  0816  34E8               	retlw	232
   424  0817  3403               	retlw	3
   425  0818  3410               	retlw	16
   426  0819  3427               	retlw	39
   427  081A                     __end_of_dpowers:
   428  0013                     _SSPBUF	set	19
   429  0014                     _SSPCON	set	20
   430  0019                     _TXREG	set	25
   431  0018                     _RCSTAbits	set	24
   432  0063                     _SSPIF	set	99
   433  005E                     _PEIE	set	94
   434  005F                     _GIE	set	95
   435  0091                     _SSPCON2bits	set	145
   436  0087                     _TRISCbits	set	135
   437  0094                     _SSPSTAT	set	148
   438  0093                     _SSPADD	set	147
   439  0091                     _SSPCON2	set	145
   440  008F                     _OSCCONbits	set	143
   441  0088                     _TRISD	set	136
   442  0087                     _TRISC	set	135
   443  0086                     _TRISB	set	134
   444  0085                     _TRISA	set	133
   445  0099                     _SPBRG	set	153
   446  0098                     _TXSTAbits	set	152
   447  0463                     _SSPIE	set	1123
   448  043C                     _TRISC4	set	1084
   449  043B                     _TRISC3	set	1083
   450  04C5                     _TXEN	set	1221
   451  0189                     _ANSELH	set	393
   452  0188                     _ANSEL	set	392
   453  0187                     _BAUDCTLbits	set	391
   454  081A                     STR_2:
   455  081A  3443               	retlw	67	;'C'
   456  081B  346F               	retlw	111	;'o'
   457  081C  346E               	retlw	110	;'n'
   458  081D  346E               	retlw	110	;'n'
   459  081E  3465               	retlw	101	;'e'
   460  081F  3463               	retlw	99	;'c'
   461  0820  3474               	retlw	116	;'t'
   462  0821  3469               	retlw	105	;'i'
   463  0822  346F               	retlw	111	;'o'
   464  0823  346E               	retlw	110	;'n'
   465  0824  3420               	retlw	32	;' '
   466  0825  3465               	retlw	101	;'e'
   467  0826  3472               	retlw	114	;'r'
   468  0827  3472               	retlw	114	;'r'
   469  0828  346F               	retlw	111	;'o'
   470  0829  3472               	retlw	114	;'r'
   471  082A  3421               	retlw	33	;'!'
   472  082B  3400               	retlw	0
   473  082C                     STR_4:
   474  082C  3454               	retlw	84	;'T'
   475  082D  3465               	retlw	101	;'e'
   476  082E  346D               	retlw	109	;'m'
   477  082F  3470               	retlw	112	;'p'
   478  0830  343A               	retlw	58	;':'
   479  0831  3420               	retlw	32	;' '
   480  0832  3425               	retlw	37	;'%'
   481  0833  3464               	retlw	100	;'d'
   482  0834  342E               	retlw	46	;'.'
   483  0835  3425               	retlw	37	;'%'
   484  0836  3464               	retlw	100	;'d'
   485  0837  34C2               	retlw	-62
   486  0838  34B0               	retlw	-80
   487  0839  3443               	retlw	67	;'C'
   488  083A  3420               	retlw	32	;' '
   489  083B  3400               	retlw	0
   490  083C                     STR_3:
   491  083C  3454               	retlw	84	;'T'
   492  083D  3465               	retlw	101	;'e'
   493  083E  346D               	retlw	109	;'m'
   494  083F  3470               	retlw	112	;'p'
   495  0840  343A               	retlw	58	;':'
   496  0841  342D               	retlw	45	;'-'
   497  0842  3425               	retlw	37	;'%'
   498  0843  3464               	retlw	100	;'d'
   499  0844  342E               	retlw	46	;'.'
   500  0845  3425               	retlw	37	;'%'
   501  0846  3464               	retlw	100	;'d'
   502  0847  34C2               	retlw	-62
   503  0848  34B0               	retlw	-80
   504  0849  3443               	retlw	67	;'C'
   505  084A  3420               	retlw	32	;' '
   506  084B  3400               	retlw	0
   507  084C                     STR_5:
   508  084C  3450               	retlw	80	;'P'
   509  084D  3472               	retlw	114	;'r'
   510  084E  3465               	retlw	101	;'e'
   511  084F  3473               	retlw	115	;'s'
   512  0850  343A               	retlw	58	;':'
   513  0851  3420               	retlw	32	;' '
   514  0852  3425               	retlw	37	;'%'
   515  0853  3464               	retlw	100	;'d'
   516  0854  342E               	retlw	46	;'.'
   517  0855  3425               	retlw	37	;'%'
   518  0856  3464               	retlw	100	;'d'
   519  0857  3468               	retlw	104	;'h'
   520  0858  3450               	retlw	80	;'P'
   521  0859  3461               	retlw	97	;'a'
   522  085A  3400               	retlw	0
   523  085B                     STR_1:
   524  085B  346D               	retlw	109	;'m'
   525  085C  3465               	retlw	101	;'e'
   526  085D  3464               	retlw	100	;'d'
   527  085E  3469               	retlw	105	;'i'
   528  085F  3463               	retlw	99	;'c'
   529  0860  3469               	retlw	105	;'i'
   530  0861  346F               	retlw	111	;'o'
   531  0862  346E               	retlw	110	;'n'
   532  0863  343A               	retlw	58	;':'
   533  0864  3420               	retlw	32	;' '
   534  0865  3400               	retlw	0
   535                           
   536                           	psect	cinit
   537  07EB                     start_initialization:	
   538                           ; #config settings
   539                           
   540  07EB                     __initialization:
   541                           
   542                           ; Clear objects allocated to BANK0
   543  07EB  1383               	bcf	3,7	;select IRP bank0
   544  07EC  305E               	movlw	low __pbssBANK0
   545  07ED  0084               	movwf	4
   546  07EE  3070               	movlw	low (__pbssBANK0+18)
   547  07EF  160A  118A  26BC  120A  118A  	fcall	clear_ram0
   548                           
   549                           ; Clear objects allocated to BANK1
   550  07F4  30A0               	movlw	low __pbssBANK1
   551  07F5  0084               	movwf	4
   552  07F6  30C0               	movlw	low (__pbssBANK1+32)
   553  07F7  160A  118A  26BC  120A  118A  	fcall	clear_ram0
   554  07FC                     end_of_initialization:	
   555                           ;End of C runtime variable initialization code
   556                           
   557  07FC                     __end_of__initialization:
   558  07FC  0183               	clrf	3
   559  07FD  120A  158A  2EBD   	ljmp	_main	;jump to C main() function
   560                           
   561                           	psect	bssBANK0
   562  005E                     __pbssBANK0:
   563  005E                     _adc_T:
   564  005E                     	ds	4
   565  0062                     _uni:
   566  0062                     	ds	1
   567  0063                     _dec:
   568  0063                     	ds	1
   569  0064                     _cen:
   570  0064                     	ds	1
   571  0065                     _pre2:
   572  0065                     	ds	1
   573  0066                     _pre1:
   574  0066                     	ds	1
   575  0067                     _pressure:
   576  0067                     	ds	4
   577  006B                     _temperature:
   578  006B                     	ds	4
   579  006F                     _buffer:
   580  006F                     	ds	1
   581                           
   582                           	psect	bssBANK1
   583  00A0                     __pbssBANK1:
   584  00A0                     _t_fine:
   585  00A0                     	ds	4
   586  00A4                     _adc_P:
   587  00A4                     	ds	4
   588  00A8                     _BMP280_calib:
   589  00A8                     	ds	24
   590                           
   591                           	psect	clrtext
   592  16BC                     clear_ram0:	
   593                           ;	Called with FSR containing the base address, and
   594                           ;	W with the last address+1
   595                           
   596  16BC  0064               	clrwdt	;clear the watchdog before getting into this loop
   597  16BD                     clrloop0:
   598  16BD  0180               	clrf	0	;clear RAM location pointed to by FSR
   599  16BE  0A84               	incf	4,f	;increment pointer
   600  16BF  0604               	xorwf	4,w	;XOR with final address
   601  16C0  1903               	btfsc	3,2	;have we reached the end yet?
   602  16C1  3400               	retlw	0	;all done for this memory range, return
   603  16C2  0604               	xorwf	4,w	;XOR again to restore value
   604  16C3  2EBD               	goto	clrloop0	;do the next byte
   605                           
   606                           	psect	cstackCOMMON
   607  0070                     __pcstackCOMMON:
   608  0070                     ?_USART_CONFIG:
   609  0070                     ?_UART_write:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_setup:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_main:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_I2C_Master_Wait:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ??_I2C_Master_Wait:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_I2C_Master_Start:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ??_I2C_Master_Start:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_I2C_Master_Stop:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ??_I2C_Master_Stop:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_I2C_Master_Write:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_BMP280_Read8:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?_BMP280_Update:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?_BMP280_readTemperature:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ?_BMP280_readPressure:	
   649                           ; 2 bytes @ 0x0
   650                           
   651  0070                     ?_abs:	
   652                           ; 2 bytes @ 0x0
   653                           
   654  0070                     ?_I2C_Master_Read:	
   655                           ; 2 bytes @ 0x0
   656                           
   657  0070                     ?___lwdiv:	
   658                           ; 2 bytes @ 0x0
   659                           
   660  0070                     ?___lldiv:	
   661                           ; 2 bytes @ 0x0
   662                           
   663  0070                     ?___aldiv:	
   664                           ; 4 bytes @ 0x0
   665                           
   666  0070                     ?___almod:	
   667                           ; 4 bytes @ 0x0
   668                           
   669  0070                     ?___llmod:	
   670                           ; 4 bytes @ 0x0
   671                           
   672  0070                     USART_CONFIG@tr:	
   673                           ; 4 bytes @ 0x0
   674                           
   675  0070                     UART_write@word:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     I2C_Master_Write@d:	
   679                           ; 2 bytes @ 0x0
   680                           
   681  0070                     I2C_Master_Read@a:	
   682                           ; 2 bytes @ 0x0
   683                           
   684  0070                     ___lwdiv@divisor:	
   685                           ; 2 bytes @ 0x0
   686                           
   687  0070                     abs@a:	
   688                           ; 2 bytes @ 0x0
   689                           
   690  0070                     ___lldiv@divisor:	
   691                           ; 2 bytes @ 0x0
   692                           
   693  0070                     ___aldiv@divisor:	
   694                           ; 4 bytes @ 0x0
   695                           
   696  0070                     ___almod@divisor:	
   697                           ; 4 bytes @ 0x0
   698                           
   699  0070                     ___llmod@divisor:	
   700                           ; 4 bytes @ 0x0
   701                           
   702                           
   703                           ; 4 bytes @ 0x0
   704  0070                     	ds	1
   705  0071                     USART_CONFIG@rc:
   706                           
   707                           ; 1 bytes @ 0x1
   708  0071                     	ds	1
   709  0072                     ??_abs:
   710  0072                     ??_USART_CONFIG:	
   711                           ; 1 bytes @ 0x2
   712                           
   713  0072                     ??_UART_write:	
   714                           ; 1 bytes @ 0x2
   715                           
   716  0072                     ??_I2C_Master_Write:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0072                     ??_I2C_Master_Read:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0072                     ?_BMP280_Write:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0072                     BMP280_Write@_data:	
   726                           ; 1 bytes @ 0x2
   727                           
   728  0072                     ___lwdiv@dividend:	
   729                           ; 1 bytes @ 0x2
   730                           
   731                           
   732                           ; 2 bytes @ 0x2
   733  0072                     	ds	1
   734  0073                     ??_BMP280_Write:
   735                           
   736                           ; 1 bytes @ 0x3
   737  0073                     	ds	1
   738  0074                     ??___lwdiv:
   739  0074                     ?___awdiv:	
   740                           ; 1 bytes @ 0x4
   741                           
   742  0074                     ?___awmod:	
   743                           ; 2 bytes @ 0x4
   744                           
   745  0074                     USART_CONFIG@frec:	
   746                           ; 2 bytes @ 0x4
   747                           
   748  0074                     I2C_Master_Read@temp:	
   749                           ; 1 bytes @ 0x4
   750                           
   751  0074                     ___awdiv@divisor:	
   752                           ; 2 bytes @ 0x4
   753                           
   754  0074                     ___awmod@divisor:	
   755                           ; 2 bytes @ 0x4
   756                           
   757  0074                     ___lldiv@dividend:	
   758                           ; 2 bytes @ 0x4
   759                           
   760  0074                     ___aldiv@dividend:	
   761                           ; 4 bytes @ 0x4
   762                           
   763  0074                     ___almod@dividend:	
   764                           ; 4 bytes @ 0x4
   765                           
   766  0074                     ___llmod@dividend:	
   767                           ; 4 bytes @ 0x4
   768                           
   769                           
   770                           ; 4 bytes @ 0x4
   771  0074                     	ds	1
   772  0075                     BMP280_Write@reg_addr:
   773  0075                     ___lwdiv@quotient:	
   774                           ; 1 bytes @ 0x5
   775                           
   776                           
   777                           ; 2 bytes @ 0x5
   778  0075                     	ds	1
   779  0076                     ??_BMP280_Read8:
   780  0076                     ?_BMP280_Configure:	
   781                           ; 1 bytes @ 0x6
   782                           
   783  0076                     ??_BMP280_Update:	
   784                           ; 1 bytes @ 0x6
   785                           
   786  0076                     ?_BMP280_Read16:	
   787                           ; 1 bytes @ 0x6
   788                           
   789  0076                     BMP280_Configure@T_sampling:	
   790                           ; 2 bytes @ 0x6
   791                           
   792  0076                     ___awdiv@dividend:	
   793                           ; 1 bytes @ 0x6
   794                           
   795  0076                     ___awmod@dividend:	
   796                           ; 2 bytes @ 0x6
   797                           
   798                           
   799                           ; 2 bytes @ 0x6
   800  0076                     	ds	1
   801  0077                     BMP280_Configure@P_sampling:
   802  0077                     ___lwdiv@counter:	
   803                           ; 1 bytes @ 0x7
   804                           
   805                           
   806                           ; 1 bytes @ 0x7
   807  0077                     	ds	1
   808  0078                     ??_BMP280_Read16:
   809  0078                     ??___lldiv:	
   810                           ; 1 bytes @ 0x8
   811                           
   812  0078                     ??___aldiv:	
   813                           ; 1 bytes @ 0x8
   814                           
   815  0078                     ??___almod:	
   816                           ; 1 bytes @ 0x8
   817                           
   818  0078                     ??___awdiv:	
   819                           ; 1 bytes @ 0x8
   820                           
   821  0078                     ??___awmod:	
   822                           ; 1 bytes @ 0x8
   823                           
   824  0078                     ??___llmod:	
   825                           ; 1 bytes @ 0x8
   826                           
   827  0078                     ?___lwmod:	
   828                           ; 1 bytes @ 0x8
   829                           
   830  0078                     BMP280_Read8@reg_addr:	
   831                           ; 2 bytes @ 0x8
   832                           
   833  0078                     BMP280_Configure@filter:	
   834                           ; 1 bytes @ 0x8
   835                           
   836  0078                     ___lwmod@divisor:	
   837                           ; 1 bytes @ 0x8
   838                           
   839                           
   840                           ; 2 bytes @ 0x8
   841  0078                     	ds	1
   842  0079                     ??___lmul:
   843  0079                     BMP280_Read8@ret:	
   844                           ; 1 bytes @ 0x9
   845                           
   846  0079                     BMP280_Configure@standby:	
   847                           ; 1 bytes @ 0x9
   848                           
   849  0079                     ___almod@counter:	
   850                           ; 1 bytes @ 0x9
   851                           
   852  0079                     ___awdiv@counter:	
   853                           ; 1 bytes @ 0x9
   854                           
   855  0079                     ___awmod@counter:	
   856                           ; 1 bytes @ 0x9
   857                           
   858  0079                     ___llmod@counter:	
   859                           ; 1 bytes @ 0x9
   860                           
   861  0079                     ___lldiv@quotient:	
   862                           ; 1 bytes @ 0x9
   863                           
   864                           
   865                           ; 4 bytes @ 0x9
   866  0079                     	ds	1
   867  007A                     ??_BMP280_Configure:
   868  007A                     BMP280_Read16@reg_addr:	
   869                           ; 1 bytes @ 0xA
   870                           
   871  007A                     ___almod@sign:	
   872                           ; 1 bytes @ 0xA
   873                           
   874  007A                     ___awdiv@sign:	
   875                           ; 1 bytes @ 0xA
   876                           
   877  007A                     ___awmod@sign:	
   878                           ; 1 bytes @ 0xA
   879                           
   880  007A                     ___lwmod@dividend:	
   881                           ; 1 bytes @ 0xA
   882                           
   883  007A                     BMP280_Update@ret:	
   884                           ; 2 bytes @ 0xA
   885                           
   886  007A                     ___lmul@product:	
   887                           ; 4 bytes @ 0xA
   888                           
   889                           
   890                           ; 4 bytes @ 0xA
   891  007A                     	ds	1
   892  007B                     BMP280_Read16@ret:
   893  007B                     ___awdiv@quotient:	
   894                           ; 2 bytes @ 0xB
   895                           
   896                           
   897                           ; 2 bytes @ 0xB
   898  007B                     	ds	1
   899  007C                     ??___lwmod:
   900                           
   901                           ; 1 bytes @ 0xC
   902  007C                     	ds	1
   903  007D                     BMP280_begin@mode:
   904  007D                     ___lldiv@counter:	
   905                           ; 1 bytes @ 0xD
   906                           
   907  007D                     ___lwmod@counter:	
   908                           ; 1 bytes @ 0xD
   909                           
   910                           
   911                           ; 1 bytes @ 0xD
   912  007D                     	ds	1
   913  007E                     ??_setup:
   914                           
   915                           	psect	cstackBANK0
   916  0020                     __pcstackBANK0:	
   917                           ; 1 bytes @ 0xE
   918                           
   919  0020                     ?_I2C_Master_Init:
   920  0020                     BMP280_Configure@mode:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0020                     ___aldiv@counter:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0020                     I2C_Master_Init@c:	
   927                           ; 1 bytes @ 0x0
   928                           
   929                           
   930                           ; 4 bytes @ 0x0
   931  0020                     	ds	1
   932  0021                     BMP280_Configure@_ctrl_meas:
   933  0021                     ___aldiv@sign:	
   934                           ; 1 bytes @ 0x1
   935                           
   936                           
   937                           ; 1 bytes @ 0x1
   938  0021                     	ds	1
   939  0022                     BMP280_Configure@_config:
   940  0022                     ___aldiv@quotient:	
   941                           ; 1 bytes @ 0x2
   942                           
   943                           
   944                           ; 4 bytes @ 0x2
   945  0022                     	ds	1
   946  0023                     ?_BMP280_begin:
   947  0023                     BMP280_begin@T_sampling:	
   948                           ; 2 bytes @ 0x3
   949                           
   950                           
   951                           ; 1 bytes @ 0x3
   952  0023                     	ds	1
   953  0024                     ??_I2C_Master_Init:
   954  0024                     BMP280_begin@P_sampling:	
   955                           ; 1 bytes @ 0x4
   956                           
   957                           
   958                           ; 1 bytes @ 0x4
   959  0024                     	ds	1
   960  0025                     BMP280_begin@filter:
   961                           
   962                           ; 1 bytes @ 0x5
   963  0025                     	ds	1
   964  0026                     ?_sprintf:
   965  0026                     ?___lmul:	
   966                           ; 2 bytes @ 0x6
   967                           
   968  0026                     BMP280_begin@standby:	
   969                           ; 4 bytes @ 0x6
   970                           
   971  0026                     sprintf@f:	
   972                           ; 1 bytes @ 0x6
   973                           
   974  0026                     ___lmul@multiplier:	
   975                           ; 1 bytes @ 0x6
   976                           
   977                           
   978                           ; 4 bytes @ 0x6
   979  0026                     	ds	1
   980  0027                     ??_BMP280_begin:
   981                           
   982                           ; 1 bytes @ 0x7
   983  0027                     	ds	3
   984  002A                     ___lmul@multiplicand:
   985                           
   986                           ; 4 bytes @ 0xA
   987  002A                     	ds	4
   988  002E                     ??_BMP280_readTemperature:
   989  002E                     ??_BMP280_readPressure:	
   990                           ; 1 bytes @ 0xE
   991                           
   992                           
   993                           ; 1 bytes @ 0xE
   994  002E                     	ds	1
   995  002F                     ??_sprintf:
   996                           
   997                           ; 1 bytes @ 0xF
   998  002F                     	ds	3
   999  0032                     sprintf@ap:
  1000                           
  1001                           ; 1 bytes @ 0x12
  1002  0032                     	ds	1
  1003  0033                     sprintf@flag:
  1004                           
  1005                           ; 1 bytes @ 0x13
  1006  0033                     	ds	1
  1007  0034                     sprintf@prec:
  1008                           
  1009                           ; 1 bytes @ 0x14
  1010  0034                     	ds	1
  1011  0035                     sprintf@val:
  1012                           
  1013                           ; 2 bytes @ 0x15
  1014  0035                     	ds	2
  1015  0037                     sprintf@sp:
  1016                           
  1017                           ; 1 bytes @ 0x17
  1018  0037                     	ds	1
  1019  0038                     sprintf@c:
  1020                           
  1021                           ; 1 bytes @ 0x18
  1022  0038                     	ds	6
  1023  003E                     BMP280_readTemperature@var1:
  1024  003E                     _BMP280_readPressure$1103:	
  1025                           ; 4 bytes @ 0x1E
  1026                           
  1027                           
  1028                           ; 4 bytes @ 0x1E
  1029  003E                     	ds	4
  1030  0042                     BMP280_readTemperature@var2:
  1031  0042                     _BMP280_readPressure$1104:	
  1032                           ; 4 bytes @ 0x22
  1033                           
  1034                           
  1035                           ; 4 bytes @ 0x22
  1036  0042                     	ds	4
  1037  0046                     _BMP280_readTemperature$1101:
  1038  0046                     _BMP280_readPressure$1105:	
  1039                           ; 4 bytes @ 0x26
  1040                           
  1041                           
  1042                           ; 4 bytes @ 0x26
  1043  0046                     	ds	4
  1044  004A                     BMP280_readTemperature@temp:
  1045  004A                     BMP280_readPressure@pres:	
  1046                           ; 1 bytes @ 0x2A
  1047                           
  1048                           
  1049                           ; 1 bytes @ 0x2A
  1050  004A                     	ds	1
  1051  004B                     _BMP280_readTemperature$1100:
  1052  004B                     _BMP280_readPressure$1102:	
  1053                           ; 4 bytes @ 0x2B
  1054                           
  1055                           
  1056                           ; 4 bytes @ 0x2B
  1057  004B                     	ds	4
  1058  004F                     BMP280_readPressure@var2:
  1059                           
  1060                           ; 4 bytes @ 0x2F
  1061  004F                     	ds	4
  1062  0053                     BMP280_readPressure@p:
  1063                           
  1064                           ; 4 bytes @ 0x33
  1065  0053                     	ds	4
  1066  0057                     BMP280_readPressure@var1:
  1067                           
  1068                           ; 4 bytes @ 0x37
  1069  0057                     	ds	4
  1070  005B                     ??_main:
  1071                           
  1072                           ; 1 bytes @ 0x3B
  1073  005B                     	ds	3
  1074                           
  1075                           	psect	maintext
  1076  0EBD                     __pmaintext:	
  1077 ;;
  1078 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1079 ;;
  1080 ;; *************** function _main *****************
  1081 ;; Defined at:
  1082 ;;		line 100 in file "bmp.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : B00/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1096 ;;      Params:         0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0
  1098 ;;      Temps:          0       3       0       0       0
  1099 ;;      Totals:         0       3       0       0       0
  1100 ;;Total ram usage:        3 bytes
  1101 ;; Hardware stack levels required when called:    5
  1102 ;; This function calls:
  1103 ;;		_BMP280_begin
  1104 ;;		_BMP280_readPressure
  1105 ;;		_BMP280_readTemperature
  1106 ;;		_UART_write
  1107 ;;		___aldiv
  1108 ;;		___almod
  1109 ;;		___awdiv
  1110 ;;		___awmod
  1111 ;;		___lldiv
  1112 ;;		___llmod
  1113 ;;		_abs
  1114 ;;		_setup
  1115 ;;		_sprintf
  1116 ;; This function is called by:
  1117 ;;		Startup code after reset
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           
  1122                           ;psect for function _main
  1123  0EBD                     _main:
  1124  0EBD                     l2097:	
  1125                           ;incstack = 0
  1126                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1127                           
  1128                           
  1129                           ;bmp.c: 101:     setup();
  1130  0EBD  160A  118A  26E4  120A  158A  	fcall	_setup
  1131  0EC2                     l2099:
  1132                           
  1133                           ;bmp.c: 102:     UART_write("medicion: ");
  1134  0EC2  304C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1135  0EC3  00F0               	movwf	UART_write@word
  1136  0EC4  3080               	movlw	128
  1137  0EC5  00F1               	movwf	UART_write@word+1
  1138  0EC6  160A  118A  270B  120A  158A  	fcall	_UART_write
  1139  0ECB                     l2101:
  1140                           
  1141                           ;bmp.c: 103:     if(BMP280_begin(0x03, 0x01, 0x01, 0x00, 0x00) == 0)
  1142  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  1143  0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  1144  0ECD  01A3               	clrf	BMP280_begin@T_sampling
  1145  0ECE  0AA3               	incf	BMP280_begin@T_sampling,f
  1146  0ECF  01A4               	clrf	BMP280_begin@P_sampling
  1147  0ED0  0AA4               	incf	BMP280_begin@P_sampling,f
  1148  0ED1  01A5               	clrf	BMP280_begin@filter
  1149  0ED2  01A6               	clrf	BMP280_begin@standby
  1150  0ED3  3003               	movlw	3
  1151  0ED4  120A  158A  24EF  120A  158A  	fcall	_BMP280_begin
  1152  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0EDB  0823               	movf	?_BMP280_begin,w
  1155  0EDC  0424               	iorwf	?_BMP280_begin+1,w
  1156  0EDD  1D03               	btfss	3,2
  1157  0EDE  2EE0               	goto	u2461
  1158  0EDF  2EE1               	goto	u2460
  1159  0EE0                     u2461:
  1160  0EE0  2EEB               	goto	l2105
  1161  0EE1                     u2460:
  1162  0EE1                     l2103:
  1163                           
  1164                           ;bmp.c: 104:   {;bmp.c: 105:      UART_write("Connection error!");
  1165  0EE1  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1166  0EE2  00F0               	movwf	UART_write@word
  1167  0EE3  3080               	movlw	128
  1168  0EE4  00F1               	movwf	UART_write@word+1
  1169  0EE5  160A  118A  270B  120A  158A  	fcall	_UART_write
  1170  0EEA                     l90:	
  1171                           ;bmp.c: 106:      while(1);
  1172                           
  1173  0EEA                     l91:
  1174  0EEA  2EEA               	goto	l90
  1175  0EEB                     l2105:
  1176                           
  1177                           ;bmp.c: 110:   {;bmp.c: 113:     BMP280_readTemperature(&temperature);
  1178  0EEB  306B               	movlw	(low (_temperature| 0))& (0+255)
  1179  0EEC  120A  118A  2091  120A  158A  	fcall	_BMP280_readTemperature
  1180                           
  1181                           ;bmp.c: 114:     BMP280_readPressure(&pressure);
  1182  0EF1  3067               	movlw	(low (_pressure| 0))& (0+255)
  1183  0EF2  120A  118A  22C3  120A  158A  	fcall	_BMP280_readPressure
  1184  0EF7                     l2107:
  1185                           
  1186                           ;bmp.c: 118:     if(temperature < 0){
  1187  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  1188  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  1189  0EF9  1FEE               	btfss	_temperature+3,7
  1190  0EFA  2EFC               	goto	u2471
  1191  0EFB  2EFD               	goto	u2470
  1192  0EFC                     u2471:
  1193  0EFC  2F49               	goto	l2111
  1194  0EFD                     u2470:
  1195  0EFD                     l2109:
  1196                           
  1197                           ;bmp.c: 119:       sprintf(buffer, "Temp:-%d.%dÂ°C ", (abs(temperature)/100), (abs(tempe
      +                          rature)%100));
  1198  0EFD  302D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1199  0EFE  00DB               	movwf	??_main
  1200  0EFF  085B               	movf	??_main,w
  1201  0F00  00A6               	movwf	sprintf@f
  1202  0F01  3064               	movlw	100
  1203  0F02  00F4               	movwf	___awdiv@divisor
  1204  0F03  3000               	movlw	0
  1205  0F04  00F5               	movwf	___awdiv@divisor+1
  1206  0F05  086C               	movf	_temperature+1,w
  1207  0F06  00F1               	movwf	abs@a+1
  1208  0F07  086B               	movf	_temperature,w
  1209  0F08  00F0               	movwf	abs@a
  1210  0F09  120A  158A  206D  120A  158A  	fcall	_abs
  1211  0F0E  0871               	movf	?_abs+1,w
  1212  0F0F  00F7               	movwf	___awdiv@dividend+1
  1213  0F10  0870               	movf	?_abs,w
  1214  0F11  00F6               	movwf	___awdiv@dividend
  1215  0F12  120A  158A  2334  120A  158A  	fcall	___awdiv
  1216  0F17  0875               	movf	?___awdiv+1,w
  1217  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0F1A  00A8               	movwf	?_sprintf+2
  1220  0F1B  0874               	movf	?___awdiv,w
  1221  0F1C  00A7               	movwf	?_sprintf+1
  1222  0F1D  3064               	movlw	100
  1223  0F1E  00F4               	movwf	___awmod@divisor
  1224  0F1F  3000               	movlw	0
  1225  0F20  00F5               	movwf	___awmod@divisor+1
  1226  0F21  086C               	movf	_temperature+1,w
  1227  0F22  00F1               	movwf	abs@a+1
  1228  0F23  086B               	movf	_temperature,w
  1229  0F24  00F0               	movwf	abs@a
  1230  0F25  120A  158A  206D  120A  158A  	fcall	_abs
  1231  0F2A  0871               	movf	?_abs+1,w
  1232  0F2B  00F7               	movwf	___awmod@dividend+1
  1233  0F2C  0870               	movf	?_abs,w
  1234  0F2D  00F6               	movwf	___awmod@dividend
  1235  0F2E  120A  158A  2275  120A  158A  	fcall	___awmod
  1236  0F33  0875               	movf	?___awmod+1,w
  1237  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  1238  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  1239  0F36  00AA               	movwf	?_sprintf+4
  1240  0F37  0874               	movf	?___awmod,w
  1241  0F38  00A9               	movwf	?_sprintf+3
  1242  0F39  306F               	movlw	(low (_buffer| 0))& (0+255)
  1243  0F3A  120A  158A  25D5  120A  158A  	fcall	_sprintf
  1244                           
  1245                           ;bmp.c: 120:       UART_write(buffer);
  1246  0F3F  306F               	movlw	(low (_buffer| 0))& (0+255)
  1247  0F40  00F0               	movwf	UART_write@word
  1248  0F41  3000               	movlw	0
  1249  0F42  00F1               	movwf	UART_write@word+1
  1250  0F43  160A  118A  270B  120A  158A  	fcall	_UART_write
  1251                           
  1252                           ;bmp.c: 121:     }
  1253  0F48  2FED               	goto	l2113
  1254  0F49                     l2111:
  1255                           
  1256                           ;bmp.c: 123:       sprintf(buffer, "Temp: %d.%dÂ°C ", (temperature/100), (temperature%10
      +                          0));
  1257  0F49  301D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1258  0F4A  00DB               	movwf	??_main
  1259  0F4B  085B               	movf	??_main,w
  1260  0F4C  00A6               	movwf	sprintf@f
  1261  0F4D  3000               	movlw	0
  1262  0F4E  00F3               	movwf	___aldiv@divisor+3
  1263  0F4F  3000               	movlw	0
  1264  0F50  00F2               	movwf	___aldiv@divisor+2
  1265  0F51  3000               	movlw	0
  1266  0F52  00F1               	movwf	___aldiv@divisor+1
  1267  0F53  3064               	movlw	100
  1268  0F54  00F0               	movwf	___aldiv@divisor
  1269  0F55  086E               	movf	_temperature+3,w
  1270  0F56  00F7               	movwf	___aldiv@dividend+3
  1271  0F57  086D               	movf	_temperature+2,w
  1272  0F58  00F6               	movwf	___aldiv@dividend+2
  1273  0F59  086C               	movf	_temperature+1,w
  1274  0F5A  00F5               	movwf	___aldiv@dividend+1
  1275  0F5B  086B               	movf	_temperature,w
  1276  0F5C  00F4               	movwf	___aldiv@dividend
  1277  0F5D  120A  158A  239B  120A  158A  	fcall	___aldiv
  1278  0F62  0873               	movf	?___aldiv+3,w
  1279  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  1280  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  1281  0F65  00AA               	movwf	?_sprintf+4
  1282  0F66  0872               	movf	?___aldiv+2,w
  1283  0F67  00A9               	movwf	?_sprintf+3
  1284  0F68  0871               	movf	?___aldiv+1,w
  1285  0F69  00A8               	movwf	?_sprintf+2
  1286  0F6A  0870               	movf	?___aldiv,w
  1287  0F6B  00A7               	movwf	?_sprintf+1
  1288  0F6C  3000               	movlw	0
  1289  0F6D  00F3               	movwf	___almod@divisor+3
  1290  0F6E  3000               	movlw	0
  1291  0F6F  00F2               	movwf	___almod@divisor+2
  1292  0F70  3000               	movlw	0
  1293  0F71  00F1               	movwf	___almod@divisor+1
  1294  0F72  3064               	movlw	100
  1295  0F73  00F0               	movwf	___almod@divisor
  1296  0F74  086E               	movf	_temperature+3,w
  1297  0F75  00F7               	movwf	___almod@dividend+3
  1298  0F76  086D               	movf	_temperature+2,w
  1299  0F77  00F6               	movwf	___almod@dividend+2
  1300  0F78  086C               	movf	_temperature+1,w
  1301  0F79  00F5               	movwf	___almod@dividend+1
  1302  0F7A  086B               	movf	_temperature,w
  1303  0F7B  00F4               	movwf	___almod@dividend
  1304  0F7C  120A  118A  200C  120A  158A  	fcall	___almod
  1305  0F81  0873               	movf	?___almod+3,w
  1306  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  1307  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0F84  00AE               	movwf	?_sprintf+8
  1309  0F85  0872               	movf	?___almod+2,w
  1310  0F86  00AD               	movwf	?_sprintf+7
  1311  0F87  0871               	movf	?___almod+1,w
  1312  0F88  00AC               	movwf	?_sprintf+6
  1313  0F89  0870               	movf	?___almod,w
  1314  0F8A  00AB               	movwf	?_sprintf+5
  1315  0F8B  306F               	movlw	(low (_buffer| 0))& (0+255)
  1316  0F8C  120A  158A  25D5  120A  158A  	fcall	_sprintf
  1317                           
  1318                           ;bmp.c: 124:     UART_write(buffer);
  1319  0F91  306F               	movlw	(low (_buffer| 0))& (0+255)
  1320  0F92  00F0               	movwf	UART_write@word
  1321  0F93  3000               	movlw	0
  1322  0F94  00F1               	movwf	UART_write@word+1
  1323  0F95  160A  118A  270B  120A  158A  	fcall	_UART_write
  1324                           
  1325                           ;bmp.c: 127:     sprintf(buffer, "Pres: %d.%dhPa", (pressure/100), (pressure%100));
  1326  0F9A  303D               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1327  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0F9D  00DB               	movwf	??_main
  1330  0F9E  085B               	movf	??_main,w
  1331  0F9F  00A6               	movwf	sprintf@f
  1332  0FA0  3000               	movlw	0
  1333  0FA1  00F3               	movwf	___lldiv@divisor+3
  1334  0FA2  3000               	movlw	0
  1335  0FA3  00F2               	movwf	___lldiv@divisor+2
  1336  0FA4  3000               	movlw	0
  1337  0FA5  00F1               	movwf	___lldiv@divisor+1
  1338  0FA6  3064               	movlw	100
  1339  0FA7  00F0               	movwf	___lldiv@divisor
  1340  0FA8  086A               	movf	_pressure+3,w
  1341  0FA9  00F7               	movwf	___lldiv@dividend+3
  1342  0FAA  0869               	movf	_pressure+2,w
  1343  0FAB  00F6               	movwf	___lldiv@dividend+2
  1344  0FAC  0868               	movf	_pressure+1,w
  1345  0FAD  00F5               	movwf	___lldiv@dividend+1
  1346  0FAE  0867               	movf	_pressure,w
  1347  0FAF  00F4               	movwf	___lldiv@dividend
  1348  0FB0  120A  158A  22CE  120A  158A  	fcall	___lldiv
  1349  0FB5  0873               	movf	?___lldiv+3,w
  1350  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0FB8  00AA               	movwf	?_sprintf+4
  1353  0FB9  0872               	movf	?___lldiv+2,w
  1354  0FBA  00A9               	movwf	?_sprintf+3
  1355  0FBB  0871               	movf	?___lldiv+1,w
  1356  0FBC  00A8               	movwf	?_sprintf+2
  1357  0FBD  0870               	movf	?___lldiv,w
  1358  0FBE  00A7               	movwf	?_sprintf+1
  1359  0FBF  3000               	movlw	0
  1360  0FC0  00F3               	movwf	___llmod@divisor+3
  1361  0FC1  3000               	movlw	0
  1362  0FC2  00F2               	movwf	___llmod@divisor+2
  1363  0FC3  3000               	movlw	0
  1364  0FC4  00F1               	movwf	___llmod@divisor+1
  1365  0FC5  3064               	movlw	100
  1366  0FC6  00F0               	movwf	___llmod@divisor
  1367  0FC7  086A               	movf	_pressure+3,w
  1368  0FC8  00F7               	movwf	___llmod@dividend+3
  1369  0FC9  0869               	movf	_pressure+2,w
  1370  0FCA  00F6               	movwf	___llmod@dividend+2
  1371  0FCB  0868               	movf	_pressure+1,w
  1372  0FCC  00F5               	movwf	___llmod@dividend+1
  1373  0FCD  0867               	movf	_pressure,w
  1374  0FCE  00F4               	movwf	___llmod@dividend
  1375  0FCF  120A  158A  2221  120A  158A  	fcall	___llmod
  1376  0FD4  0873               	movf	?___llmod+3,w
  1377  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  1378  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  1379  0FD7  00AE               	movwf	?_sprintf+8
  1380  0FD8  0872               	movf	?___llmod+2,w
  1381  0FD9  00AD               	movwf	?_sprintf+7
  1382  0FDA  0871               	movf	?___llmod+1,w
  1383  0FDB  00AC               	movwf	?_sprintf+6
  1384  0FDC  0870               	movf	?___llmod,w
  1385  0FDD  00AB               	movwf	?_sprintf+5
  1386  0FDE  306F               	movlw	(low (_buffer| 0))& (0+255)
  1387  0FDF  120A  158A  25D5  120A  158A  	fcall	_sprintf
  1388                           
  1389                           ;bmp.c: 128:     UART_write(buffer);
  1390  0FE4  306F               	movlw	(low (_buffer| 0))& (0+255)
  1391  0FE5  00F0               	movwf	UART_write@word
  1392  0FE6  3000               	movlw	0
  1393  0FE7  00F1               	movwf	UART_write@word+1
  1394  0FE8  160A  118A  270B  120A  158A  	fcall	_UART_write
  1395  0FED                     l2113:
  1396                           
  1397                           ;bmp.c: 131:     _delay((unsigned long)((2000)*(8000000/4000.0)));
  1398  0FED  3015               	movlw	21
  1399  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0FF0  00DD               	movwf	??_main+2
  1402  0FF1  304B               	movlw	75
  1403  0FF2  00DC               	movwf	??_main+1
  1404  0FF3  30BD               	movlw	189
  1405  0FF4  00DB               	movwf	??_main
  1406  0FF5                     u2487:
  1407  0FF5  0BDB               	decfsz	??_main,f
  1408  0FF6  2FF5               	goto	u2487
  1409  0FF7  0BDC               	decfsz	??_main+1,f
  1410  0FF8  2FF5               	goto	u2487
  1411  0FF9  0BDD               	decfsz	??_main+2,f
  1412  0FFA  2FF5               	goto	u2487
  1413  0FFB  2FFC               	nop2
  1414  0FFC  2EEB               	goto	l2105
  1415  0FFD  120A  118A  2800   	ljmp	start
  1416  1000                     __end_of_main:
  1417                           
  1418                           	psect	text1
  1419  0DD5                     __ptext1:	
  1420 ;; *************** function _sprintf *****************
  1421 ;; Defined at:
  1422 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  sp              1    wreg     PTR unsigned char 
  1425 ;;		 -> buffer(1), 
  1426 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  1427 ;;		 -> STR_5(15), STR_4(16), STR_3(16), 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1430 ;;		 -> buffer(1), 
  1431 ;;  tmpval          4    0        struct .
  1432 ;;  val             2   21[BANK0 ] unsigned int 
  1433 ;;  cp              2    0        PTR const unsigned char 
  1434 ;;  len             2    0        unsigned int 
  1435 ;;  c               1   24[BANK0 ] unsigned char 
  1436 ;;  prec            1   20[BANK0 ] char 
  1437 ;;  flag            1   19[BANK0 ] unsigned char 
  1438 ;;  ap              1   18[BANK0 ] PTR void [1]
  1439 ;;		 -> ?_sprintf(2), 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2    6[BANK0 ] int 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1449 ;;      Params:         0       9       0       0       0
  1450 ;;      Locals:         0       7       0       0       0
  1451 ;;      Temps:          0       3       0       0       0
  1452 ;;      Totals:         0      19       0       0       0
  1453 ;;Total ram usage:       19 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    1
  1456 ;; This function calls:
  1457 ;;		___lwdiv
  1458 ;;		___lwmod
  1459 ;; This function is called by:
  1460 ;;		_main
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           
  1465                           ;psect for function _sprintf
  1466  0DD5                     _sprintf:
  1467                           
  1468                           ;incstack = 0
  1469                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1470                           ;sprintf@sp stored from wreg
  1471  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  1472  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  1473  0DD7  00B7               	movwf	sprintf@sp
  1474  0DD8                     l2035:
  1475                           
  1476                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1477  0DD8  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1478  0DD9  00AF               	movwf	??_sprintf
  1479  0DDA  082F               	movf	??_sprintf,w
  1480  0DDB  00B2               	movwf	sprintf@ap
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1483  0DDC  2EA6               	goto	l2087
  1484  0DDD                     l2037:
  1485                           
  1486                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1487  0DDD  3025               	movlw	37
  1488  0DDE  0638               	xorwf	sprintf@c,w
  1489  0DDF  1903               	btfsc	3,2
  1490  0DE0  2DE2               	goto	u2391
  1491  0DE1  2DE3               	goto	u2390
  1492  0DE2                     u2391:
  1493  0DE2  2DEF               	goto	l2043
  1494  0DE3                     u2390:
  1495  0DE3                     l2039:
  1496                           
  1497                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1498  0DE3  0838               	movf	sprintf@c,w
  1499  0DE4  00AF               	movwf	??_sprintf
  1500  0DE5  0837               	movf	sprintf@sp,w
  1501  0DE6  0084               	movwf	4
  1502  0DE7  082F               	movf	??_sprintf,w
  1503  0DE8  1383               	bcf	3,7	;select IRP bank0
  1504  0DE9  0080               	movwf	0
  1505  0DEA                     l2041:
  1506  0DEA  3001               	movlw	1
  1507  0DEB  00AF               	movwf	??_sprintf
  1508  0DEC  082F               	movf	??_sprintf,w
  1509  0DED  07B7               	addwf	sprintf@sp,f
  1510                           
  1511                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1512  0DEE  2EA6               	goto	l2087
  1513  0DEF                     l2043:
  1514                           
  1515                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1516  0DEF  01B3               	clrf	sprintf@flag
  1517  0DF0                     l2047:	
  1518                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1519                           
  1520  0DF0  3001               	movlw	1
  1521  0DF1  07A6               	addwf	sprintf@f,f
  1522  0DF2  30FF               	movlw	-1
  1523  0DF3  0726               	addwf	sprintf@f,w
  1524  0DF4  0084               	movwf	4
  1525  0DF5  120A  158A  200A  120A  158A  	fcall	stringdir
  1526  0DFA  00B8               	movwf	sprintf@c
  1527  0DFB  00AF               	movwf	??_sprintf
  1528  0DFC  01B0               	clrf	??_sprintf+1
  1529                           
  1530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1531                           ; Switch size 1, requested type "simple"
  1532                           ; Number of cases is 1, Range of values is 0 to 0
  1533                           ; switch strategies available:
  1534                           ; Name         Instructions Cycles
  1535                           ; simple_byte            4     3 (average)
  1536                           ; direct_byte           11     8 (fixed)
  1537                           ; jumptable            260     6 (fixed)
  1538                           ;	Chosen strategy is simple_byte
  1539  0DFD  0830               	movf	??_sprintf+1,w
  1540  0DFE  3A00               	xorlw	0	; case 0
  1541  0DFF  1903               	skipnz
  1542  0E00  2E02               	goto	l2155
  1543  0E01  2EA6               	goto	l2087
  1544  0E02                     l2155:
  1545                           
  1546                           ; Switch size 1, requested type "simple"
  1547                           ; Number of cases is 3, Range of values is 0 to 105
  1548                           ; switch strategies available:
  1549                           ; Name         Instructions Cycles
  1550                           ; simple_byte           10     6 (average)
  1551                           ; jumptable            260     6 (fixed)
  1552                           ;	Chosen strategy is simple_byte
  1553  0E02  082F               	movf	??_sprintf,w
  1554  0E03  3A00               	xorlw	0	; case 0
  1555  0E04  1903               	skipnz
  1556  0E05  2EB8               	goto	l2089
  1557  0E06  3A64               	xorlw	100	; case 100
  1558  0E07  1903               	skipnz
  1559  0E08  2E0D               	goto	l2049
  1560  0E09  3A0D               	xorlw	13	; case 105
  1561  0E0A  1903               	skipnz
  1562  0E0B  2E0D               	goto	l2049
  1563  0E0C  2EA6               	goto	l2087
  1564  0E0D                     l2049:
  1565                           
  1566                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1567  0E0D  0832               	movf	sprintf@ap,w
  1568  0E0E  0084               	movwf	4
  1569  0E0F  1383               	bcf	3,7	;select IRP bank0
  1570  0E10  0800               	movf	0,w
  1571  0E11  00B5               	movwf	sprintf@val
  1572  0E12  0A84               	incf	4,f
  1573  0E13  0800               	movf	0,w
  1574  0E14  00B6               	movwf	sprintf@val+1
  1575  0E15                     l2051:
  1576  0E15  3002               	movlw	2
  1577  0E16  00AF               	movwf	??_sprintf
  1578  0E17  082F               	movf	??_sprintf,w
  1579  0E18  07B2               	addwf	sprintf@ap,f
  1580  0E19                     l2053:
  1581                           
  1582                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1583  0E19  1FB6               	btfss	sprintf@val+1,7
  1584  0E1A  2E1C               	goto	u2401
  1585  0E1B  2E1D               	goto	u2400
  1586  0E1C                     u2401:
  1587  0E1C  2E26               	goto	l2059
  1588  0E1D                     u2400:
  1589  0E1D                     l2055:
  1590                           
  1591                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1592  0E1D  3003               	movlw	3
  1593  0E1E  00AF               	movwf	??_sprintf
  1594  0E1F  082F               	movf	??_sprintf,w
  1595  0E20  04B3               	iorwf	sprintf@flag,f
  1596  0E21                     l2057:
  1597                           
  1598                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1599  0E21  09B5               	comf	sprintf@val,f
  1600  0E22  09B6               	comf	sprintf@val+1,f
  1601  0E23  0AB5               	incf	sprintf@val,f
  1602  0E24  1903               	skipnz
  1603  0E25  0AB6               	incf	sprintf@val+1,f
  1604  0E26                     l2059:
  1605                           
  1606                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1607  0E26  01B8               	clrf	sprintf@c
  1608  0E27  0AB8               	incf	sprintf@c,f
  1609  0E28                     l2065:
  1610                           
  1611                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1612  0E28  0838               	movf	sprintf@c,w
  1613  0E29  00AF               	movwf	??_sprintf
  1614  0E2A  072F               	addwf	??_sprintf,w
  1615  0E2B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1616  0E2C  0084               	movwf	4
  1617  0E2D  120A  158A  200A  120A  158A  	fcall	stringdir
  1618  0E32  00B0               	movwf	??_sprintf+1
  1619  0E33  120A  158A  200A  120A  158A  	fcall	stringdir
  1620  0E38  00B1               	movwf	??_sprintf+2
  1621  0E39  0831               	movf	??_sprintf+2,w
  1622  0E3A  0236               	subwf	sprintf@val+1,w
  1623  0E3B  1D03               	skipz
  1624  0E3C  2E3F               	goto	u2415
  1625  0E3D  0830               	movf	??_sprintf+1,w
  1626  0E3E  0235               	subwf	sprintf@val,w
  1627  0E3F                     u2415:
  1628  0E3F  1803               	skipnc
  1629  0E40  2E42               	goto	u2411
  1630  0E41  2E43               	goto	u2410
  1631  0E42                     u2411:
  1632  0E42  2E44               	goto	l2069
  1633  0E43                     u2410:
  1634  0E43  2E4E               	goto	l2071
  1635  0E44                     l2069:
  1636  0E44  3001               	movlw	1
  1637  0E45  00AF               	movwf	??_sprintf
  1638  0E46  082F               	movf	??_sprintf,w
  1639  0E47  07B8               	addwf	sprintf@c,f
  1640  0E48  3005               	movlw	5
  1641  0E49  0638               	xorwf	sprintf@c,w
  1642  0E4A  1D03               	btfss	3,2
  1643  0E4B  2E4D               	goto	u2421
  1644  0E4C  2E4E               	goto	u2420
  1645  0E4D                     u2421:
  1646  0E4D  2E28               	goto	l2065
  1647  0E4E                     u2420:
  1648  0E4E                     l2071:
  1649                           
  1650                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1651  0E4E  0833               	movf	sprintf@flag,w
  1652  0E4F  3903               	andlw	3
  1653  0E50  1903               	btfsc	3,2
  1654  0E51  2E53               	goto	u2431
  1655  0E52  2E54               	goto	u2430
  1656  0E53                     u2431:
  1657  0E53  2E5F               	goto	l2077
  1658  0E54                     u2430:
  1659  0E54                     l2073:
  1660                           
  1661                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1662  0E54  302D               	movlw	45
  1663  0E55  00AF               	movwf	??_sprintf
  1664  0E56  0837               	movf	sprintf@sp,w
  1665  0E57  0084               	movwf	4
  1666  0E58  082F               	movf	??_sprintf,w
  1667  0E59  1383               	bcf	3,7	;select IRP bank0
  1668  0E5A  0080               	movwf	0
  1669  0E5B                     l2075:
  1670  0E5B  3001               	movlw	1
  1671  0E5C  00AF               	movwf	??_sprintf
  1672  0E5D  082F               	movf	??_sprintf,w
  1673  0E5E  07B7               	addwf	sprintf@sp,f
  1674  0E5F                     l2077:
  1675                           
  1676                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1677  0E5F  0838               	movf	sprintf@c,w
  1678  0E60  00AF               	movwf	??_sprintf
  1679  0E61  082F               	movf	??_sprintf,w
  1680  0E62  00B4               	movwf	sprintf@prec
  1681                           
  1682                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1683  0E63  2E9D               	goto	l2085
  1684  0E64                     l2079:
  1685                           
  1686                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1687  0E64  300A               	movlw	10
  1688  0E65  00F8               	movwf	___lwmod@divisor
  1689  0E66  3000               	movlw	0
  1690  0E67  00F9               	movwf	___lwmod@divisor+1
  1691  0E68  0834               	movf	sprintf@prec,w
  1692  0E69  00AF               	movwf	??_sprintf
  1693  0E6A  072F               	addwf	??_sprintf,w
  1694  0E6B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1695  0E6C  0084               	movwf	4
  1696  0E6D  120A  158A  200A  120A  158A  	fcall	stringdir
  1697  0E72  00F0               	movwf	___lwdiv@divisor
  1698  0E73  120A  158A  200A  120A  158A  	fcall	stringdir
  1699  0E78  00F1               	movwf	___lwdiv@divisor+1
  1700  0E79  0836               	movf	sprintf@val+1,w
  1701  0E7A  00F3               	movwf	___lwdiv@dividend+1
  1702  0E7B  0835               	movf	sprintf@val,w
  1703  0E7C  00F2               	movwf	___lwdiv@dividend
  1704  0E7D  120A  158A  20BA  120A  158A  	fcall	___lwdiv
  1705  0E82  0871               	movf	?___lwdiv+1,w
  1706  0E83  00FB               	movwf	___lwmod@dividend+1
  1707  0E84  0870               	movf	?___lwdiv,w
  1708  0E85  00FA               	movwf	___lwmod@dividend
  1709  0E86  160A  118A  27C6  120A  158A  	fcall	___lwmod
  1710  0E8B  0878               	movf	?___lwmod,w
  1711  0E8C  3E30               	addlw	48
  1712  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0E8F  00B0               	movwf	??_sprintf+1
  1715  0E90  0830               	movf	??_sprintf+1,w
  1716  0E91  00B8               	movwf	sprintf@c
  1717  0E92                     l2081:
  1718                           
  1719                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1720  0E92  0838               	movf	sprintf@c,w
  1721  0E93  00AF               	movwf	??_sprintf
  1722  0E94  0837               	movf	sprintf@sp,w
  1723  0E95  0084               	movwf	4
  1724  0E96  082F               	movf	??_sprintf,w
  1725  0E97  1383               	bcf	3,7	;select IRP bank0
  1726  0E98  0080               	movwf	0
  1727  0E99                     l2083:
  1728  0E99  3001               	movlw	1
  1729  0E9A  00AF               	movwf	??_sprintf
  1730  0E9B  082F               	movf	??_sprintf,w
  1731  0E9C  07B7               	addwf	sprintf@sp,f
  1732  0E9D                     l2085:
  1733                           
  1734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1735  0E9D  30FF               	movlw	255
  1736  0E9E  00AF               	movwf	??_sprintf
  1737  0E9F  082F               	movf	??_sprintf,w
  1738  0EA0  07B4               	addwf	sprintf@prec,f
  1739  0EA1  0A34               	incf	sprintf@prec,w
  1740  0EA2  1D03               	btfss	3,2
  1741  0EA3  2EA5               	goto	u2441
  1742  0EA4  2EA6               	goto	u2440
  1743  0EA5                     u2441:
  1744  0EA5  2E64               	goto	l2079
  1745  0EA6                     u2440:
  1746  0EA6                     l2087:
  1747                           
  1748                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1749  0EA6  3001               	movlw	1
  1750  0EA7  07A6               	addwf	sprintf@f,f
  1751  0EA8  30FF               	movlw	-1
  1752  0EA9  0726               	addwf	sprintf@f,w
  1753  0EAA  0084               	movwf	4
  1754  0EAB  120A  158A  200A  120A  158A  	fcall	stringdir
  1755  0EB0  00AF               	movwf	??_sprintf
  1756  0EB1  082F               	movf	??_sprintf,w
  1757  0EB2  00B8               	movwf	sprintf@c
  1758  0EB3  0838               	movf	sprintf@c,w
  1759  0EB4  1D03               	btfss	3,2
  1760  0EB5  2EB7               	goto	u2451
  1761  0EB6  2EB8               	goto	u2450
  1762  0EB7                     u2451:
  1763  0EB7  2DDD               	goto	l2037
  1764  0EB8                     u2450:
  1765  0EB8                     l2089:
  1766                           
  1767                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1768  0EB8  0837               	movf	sprintf@sp,w
  1769  0EB9  0084               	movwf	4
  1770  0EBA  1383               	bcf	3,7	;select IRP bank0
  1771  0EBB  0180               	clrf	0
  1772  0EBC                     l319:
  1773  0EBC  0008               	return
  1774  0EBD                     __end_of_sprintf:
  1775                           
  1776                           	psect	text2
  1777  17C6                     __ptext2:	
  1778 ;; *************** function ___lwmod *****************
  1779 ;; Defined at:
  1780 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  divisor         2    8[COMMON] unsigned int 
  1783 ;;  dividend        2   10[COMMON] unsigned int 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  counter         1   13[COMMON] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  2    8[COMMON] unsigned int 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2, status,0
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1795 ;;      Params:         4       0       0       0       0
  1796 ;;      Locals:         1       0       0       0       0
  1797 ;;      Temps:          1       0       0       0       0
  1798 ;;      Totals:         6       0       0       0       0
  1799 ;;Total ram usage:        6 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_sprintf
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function ___lwmod
  1810  17C6                     ___lwmod:
  1811  17C6                     l1669:	
  1812                           ;incstack = 0
  1813                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1814                           
  1815  17C6  0878               	movf	___lwmod@divisor,w
  1816  17C7  0479               	iorwf	___lwmod@divisor+1,w
  1817  17C8  1903               	btfsc	3,2
  1818  17C9  2FCB               	goto	u1611
  1819  17CA  2FCC               	goto	u1610
  1820  17CB                     u1611:
  1821  17CB  2FFB               	goto	l1687
  1822  17CC                     u1610:
  1823  17CC                     l1671:
  1824  17CC  01FD               	clrf	___lwmod@counter
  1825  17CD  0AFD               	incf	___lwmod@counter,f
  1826  17CE  2FDA               	goto	l1677
  1827  17CF                     l1673:
  1828  17CF  3001               	movlw	1
  1829  17D0                     u1625:
  1830  17D0  1003               	clrc
  1831  17D1  0DF8               	rlf	___lwmod@divisor,f
  1832  17D2  0DF9               	rlf	___lwmod@divisor+1,f
  1833  17D3  3EFF               	addlw	-1
  1834  17D4  1D03               	skipz
  1835  17D5  2FD0               	goto	u1625
  1836  17D6                     l1675:
  1837  17D6  3001               	movlw	1
  1838  17D7  00FC               	movwf	??___lwmod
  1839  17D8  087C               	movf	??___lwmod,w
  1840  17D9  07FD               	addwf	___lwmod@counter,f
  1841  17DA                     l1677:
  1842  17DA  1FF9               	btfss	___lwmod@divisor+1,7
  1843  17DB  2FDD               	goto	u1631
  1844  17DC  2FDE               	goto	u1630
  1845  17DD                     u1631:
  1846  17DD  2FCF               	goto	l1673
  1847  17DE                     u1630:
  1848  17DE                     l1679:
  1849  17DE  0879               	movf	___lwmod@divisor+1,w
  1850  17DF  027B               	subwf	___lwmod@dividend+1,w
  1851  17E0  1D03               	skipz
  1852  17E1  2FE4               	goto	u1645
  1853  17E2  0878               	movf	___lwmod@divisor,w
  1854  17E3  027A               	subwf	___lwmod@dividend,w
  1855  17E4                     u1645:
  1856  17E4  1C03               	skipc
  1857  17E5  2FE7               	goto	u1641
  1858  17E6  2FE8               	goto	u1640
  1859  17E7                     u1641:
  1860  17E7  2FEE               	goto	l1683
  1861  17E8                     u1640:
  1862  17E8                     l1681:
  1863  17E8  0878               	movf	___lwmod@divisor,w
  1864  17E9  02FA               	subwf	___lwmod@dividend,f
  1865  17EA  0879               	movf	___lwmod@divisor+1,w
  1866  17EB  1C03               	skipc
  1867  17EC  03FB               	decf	___lwmod@dividend+1,f
  1868  17ED  02FB               	subwf	___lwmod@dividend+1,f
  1869  17EE                     l1683:
  1870  17EE  3001               	movlw	1
  1871  17EF                     u1655:
  1872  17EF  1003               	clrc
  1873  17F0  0CF9               	rrf	___lwmod@divisor+1,f
  1874  17F1  0CF8               	rrf	___lwmod@divisor,f
  1875  17F2  3EFF               	addlw	-1
  1876  17F3  1D03               	skipz
  1877  17F4  2FEF               	goto	u1655
  1878  17F5                     l1685:
  1879  17F5  3001               	movlw	1
  1880  17F6  02FD               	subwf	___lwmod@counter,f
  1881  17F7  1D03               	btfss	3,2
  1882  17F8  2FFA               	goto	u1661
  1883  17F9  2FFB               	goto	u1660
  1884  17FA                     u1661:
  1885  17FA  2FDE               	goto	l1679
  1886  17FB                     u1660:
  1887  17FB                     l1687:
  1888  17FB  087B               	movf	___lwmod@dividend+1,w
  1889  17FC  00F9               	movwf	?___lwmod+1
  1890  17FD  087A               	movf	___lwmod@dividend,w
  1891  17FE  00F8               	movwf	?___lwmod
  1892  17FF                     l605:
  1893  17FF  0008               	return
  1894  1800                     __end_of___lwmod:
  1895                           
  1896                           	psect	text3
  1897  08BA                     __ptext3:	
  1898 ;; *************** function ___lwdiv *****************
  1899 ;; Defined at:
  1900 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  divisor         2    0[COMMON] unsigned int 
  1903 ;;  dividend        2    2[COMMON] unsigned int 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  quotient        2    5[COMMON] unsigned int 
  1906 ;;  counter         1    7[COMMON] unsigned char 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  2    0[COMMON] unsigned int 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, status,0
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         4       0       0       0       0
  1917 ;;      Locals:         3       0       0       0       0
  1918 ;;      Temps:          1       0       0       0       0
  1919 ;;      Totals:         8       0       0       0       0
  1920 ;;Total ram usage:        8 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_sprintf
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function ___lwdiv
  1931  08BA                     ___lwdiv:
  1932  08BA                     l1643:	
  1933                           ;incstack = 0
  1934                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1935                           
  1936  08BA  01F5               	clrf	___lwdiv@quotient
  1937  08BB  01F6               	clrf	___lwdiv@quotient+1
  1938  08BC                     l1645:
  1939  08BC  0870               	movf	___lwdiv@divisor,w
  1940  08BD  0471               	iorwf	___lwdiv@divisor+1,w
  1941  08BE  1903               	btfsc	3,2
  1942  08BF  28C1               	goto	u1541
  1943  08C0  28C2               	goto	u1540
  1944  08C1                     u1541:
  1945  08C1  28F9               	goto	l1665
  1946  08C2                     u1540:
  1947  08C2                     l1647:
  1948  08C2  01F7               	clrf	___lwdiv@counter
  1949  08C3  0AF7               	incf	___lwdiv@counter,f
  1950  08C4  28D0               	goto	l1653
  1951  08C5                     l1649:
  1952  08C5  3001               	movlw	1
  1953  08C6                     u1555:
  1954  08C6  1003               	clrc
  1955  08C7  0DF0               	rlf	___lwdiv@divisor,f
  1956  08C8  0DF1               	rlf	___lwdiv@divisor+1,f
  1957  08C9  3EFF               	addlw	-1
  1958  08CA  1D03               	skipz
  1959  08CB  28C6               	goto	u1555
  1960  08CC                     l1651:
  1961  08CC  3001               	movlw	1
  1962  08CD  00F4               	movwf	??___lwdiv
  1963  08CE  0874               	movf	??___lwdiv,w
  1964  08CF  07F7               	addwf	___lwdiv@counter,f
  1965  08D0                     l1653:
  1966  08D0  1FF1               	btfss	___lwdiv@divisor+1,7
  1967  08D1  28D3               	goto	u1561
  1968  08D2  28D4               	goto	u1560
  1969  08D3                     u1561:
  1970  08D3  28C5               	goto	l1649
  1971  08D4                     u1560:
  1972  08D4                     l1655:
  1973  08D4  3001               	movlw	1
  1974  08D5                     u1575:
  1975  08D5  1003               	clrc
  1976  08D6  0DF5               	rlf	___lwdiv@quotient,f
  1977  08D7  0DF6               	rlf	___lwdiv@quotient+1,f
  1978  08D8  3EFF               	addlw	-1
  1979  08D9  1D03               	skipz
  1980  08DA  28D5               	goto	u1575
  1981  08DB  0871               	movf	___lwdiv@divisor+1,w
  1982  08DC  0273               	subwf	___lwdiv@dividend+1,w
  1983  08DD  1D03               	skipz
  1984  08DE  28E1               	goto	u1585
  1985  08DF  0870               	movf	___lwdiv@divisor,w
  1986  08E0  0272               	subwf	___lwdiv@dividend,w
  1987  08E1                     u1585:
  1988  08E1  1C03               	skipc
  1989  08E2  28E4               	goto	u1581
  1990  08E3  28E5               	goto	u1580
  1991  08E4                     u1581:
  1992  08E4  28EC               	goto	l1661
  1993  08E5                     u1580:
  1994  08E5                     l1657:
  1995  08E5  0870               	movf	___lwdiv@divisor,w
  1996  08E6  02F2               	subwf	___lwdiv@dividend,f
  1997  08E7  0871               	movf	___lwdiv@divisor+1,w
  1998  08E8  1C03               	skipc
  1999  08E9  03F3               	decf	___lwdiv@dividend+1,f
  2000  08EA  02F3               	subwf	___lwdiv@dividend+1,f
  2001  08EB                     l1659:
  2002  08EB  1475               	bsf	___lwdiv@quotient,0
  2003  08EC                     l1661:
  2004  08EC  3001               	movlw	1
  2005  08ED                     u1595:
  2006  08ED  1003               	clrc
  2007  08EE  0CF1               	rrf	___lwdiv@divisor+1,f
  2008  08EF  0CF0               	rrf	___lwdiv@divisor,f
  2009  08F0  3EFF               	addlw	-1
  2010  08F1  1D03               	skipz
  2011  08F2  28ED               	goto	u1595
  2012  08F3                     l1663:
  2013  08F3  3001               	movlw	1
  2014  08F4  02F7               	subwf	___lwdiv@counter,f
  2015  08F5  1D03               	btfss	3,2
  2016  08F6  28F8               	goto	u1601
  2017  08F7  28F9               	goto	u1600
  2018  08F8                     u1601:
  2019  08F8  28D4               	goto	l1655
  2020  08F9                     u1600:
  2021  08F9                     l1665:
  2022  08F9  0876               	movf	___lwdiv@quotient+1,w
  2023  08FA  00F1               	movwf	?___lwdiv+1
  2024  08FB  0875               	movf	___lwdiv@quotient,w
  2025  08FC  00F0               	movwf	?___lwdiv
  2026  08FD                     l595:
  2027  08FD  0008               	return
  2028  08FE                     __end_of___lwdiv:
  2029                           
  2030                           	psect	text4
  2031  16E4                     __ptext4:	
  2032 ;; *************** function _setup *****************
  2033 ;; Defined at:
  2034 ;;		line 82 in file "bmp.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;		None
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2048 ;;      Params:         0       0       0       0       0
  2049 ;;      Locals:         0       0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0
  2051 ;;      Totals:         0       0       0       0       0
  2052 ;;Total ram usage:        0 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    2
  2055 ;; This function calls:
  2056 ;;		_I2C_Master_Init
  2057 ;;		_USART_CONFIG
  2058 ;; This function is called by:
  2059 ;;		_main
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           
  2064                           ;psect for function _setup
  2065  16E4                     _setup:
  2066  16E4                     l1699:	
  2067                           ;incstack = 0
  2068                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2069                           
  2070                           
  2071                           ;bmp.c: 83:     ANSEL = 0x00;
  2072  16E4  1683               	bsf	3,5	;RP0=1, select bank3
  2073  16E5  1703               	bsf	3,6	;RP1=1, select bank3
  2074  16E6  0188               	clrf	8	;volatile
  2075                           
  2076                           ;bmp.c: 84:     ANSELH = 0x00;
  2077  16E7  0189               	clrf	9	;volatile
  2078                           
  2079                           ;bmp.c: 86:     TRISA = 0x00;
  2080  16E8  1683               	bsf	3,5	;RP0=1, select bank1
  2081  16E9  1303               	bcf	3,6	;RP1=0, select bank1
  2082  16EA  0185               	clrf	5	;volatile
  2083                           
  2084                           ;bmp.c: 87:     TRISB = 0x00;
  2085  16EB  0186               	clrf	6	;volatile
  2086                           
  2087                           ;bmp.c: 88:     TRISC = 0x00;
  2088  16EC  0187               	clrf	7	;volatile
  2089                           
  2090                           ;bmp.c: 89:     TRISD = 0x00;
  2091  16ED  0188               	clrf	8	;volatile
  2092  16EE                     l1701:
  2093                           
  2094                           ;bmp.c: 91:     OSCCONbits.IRCF = 0B111;
  2095  16EE  3070               	movlw	112
  2096  16EF  048F               	iorwf	15,f	;volatile
  2097  16F0                     l1703:
  2098                           
  2099                           ;bmp.c: 92:     OSCCONbits.OSTS = 0;
  2100  16F0  118F               	bcf	15,3	;volatile
  2101  16F1                     l1705:
  2102                           
  2103                           ;bmp.c: 93:     OSCCONbits.SCS = 1;
  2104  16F1  140F               	bsf	15,0	;volatile
  2105  16F2                     l1707:
  2106                           
  2107                           ;bmp.c: 95:     USART_CONFIG(8, 1, 0);
  2108  16F2  01F0               	clrf	USART_CONFIG@tr
  2109  16F3  0AF0               	incf	USART_CONFIG@tr,f
  2110  16F4  01F1               	clrf	USART_CONFIG@rc
  2111  16F5  3008               	movlw	8
  2112  16F6  120A  158A  20FE  160A  118A  	fcall	_USART_CONFIG
  2113  16FB                     l1709:
  2114                           
  2115                           ;bmp.c: 97:     I2C_Master_Init(100000);
  2116  16FB  3000               	movlw	0
  2117  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  2118  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  2119  16FE  00A3               	movwf	I2C_Master_Init@c+3
  2120  16FF  3001               	movlw	1
  2121  1700  00A2               	movwf	I2C_Master_Init@c+2
  2122  1701  3086               	movlw	134
  2123  1702  00A1               	movwf	I2C_Master_Init@c+1
  2124  1703  30A0               	movlw	160
  2125  1704  00A0               	movwf	I2C_Master_Init@c
  2126  1705  160A  118A  278E  160A  118A  	fcall	_I2C_Master_Init
  2127  170A                     l84:
  2128  170A  0008               	return
  2129  170B                     __end_of_setup:
  2130                           
  2131                           	psect	text5
  2132  08FE                     __ptext5:	
  2133 ;; *************** function _USART_CONFIG *****************
  2134 ;; Defined at:
  2135 ;;		line 36 in file "bmp.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  frec            1    wreg     unsigned char 
  2138 ;;  tr              1    0[COMMON] unsigned char 
  2139 ;;  rc              1    1[COMMON] unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  frec            1    4[COMMON] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151 ;;      Params:         2       0       0       0       0
  2152 ;;      Locals:         1       0       0       0       0
  2153 ;;      Temps:          2       0       0       0       0
  2154 ;;      Totals:         5       0       0       0       0
  2155 ;;Total ram usage:        5 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_setup
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           
  2165                           ;psect for function _USART_CONFIG
  2166  08FE                     _USART_CONFIG:
  2167                           
  2168                           ;incstack = 0
  2169                           ; Regs used in _USART_CONFIG: [wreg-fsr0h+status,2+status,0]
  2170                           ;USART_CONFIG@frec stored from wreg
  2171  08FE  00F4               	movwf	USART_CONFIG@frec
  2172  08FF                     l1499:
  2173                           
  2174                           ;bmp.c: 37:     RCSTAbits.SPEN = 1;
  2175  08FF  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0900  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0901  1798               	bsf	24,7	;volatile
  2178                           
  2179                           ;bmp.c: 38:     TXSTAbits.SYNC = 0;
  2180  0902  1683               	bsf	3,5	;RP0=1, select bank1
  2181  0903  1303               	bcf	3,6	;RP1=0, select bank1
  2182  0904  1218               	bcf	24,4	;volatile
  2183                           
  2184                           ;bmp.c: 39:     TXSTAbits.TX9 = 0;
  2185  0905  1318               	bcf	24,6	;volatile
  2186                           
  2187                           ;bmp.c: 40:     RCSTAbits.RX9 = 0;
  2188  0906  1283               	bcf	3,5	;RP0=0, select bank0
  2189  0907  1303               	bcf	3,6	;RP1=0, select bank0
  2190  0908  1318               	bcf	24,6	;volatile
  2191                           
  2192                           ;bmp.c: 41:     switch(frec){
  2193  0909  291C               	goto	l1515
  2194  090A                     l1501:
  2195                           
  2196                           ;bmp.c: 43:             SPBRG = 25;
  2197  090A  3019               	movlw	25
  2198  090B  1683               	bsf	3,5	;RP0=1, select bank1
  2199  090C  1303               	bcf	3,6	;RP1=0, select bank1
  2200  090D  0099               	movwf	25	;volatile
  2201  090E                     l1503:
  2202                           
  2203                           ;bmp.c: 44:             TXSTAbits.BRGH = 1;
  2204  090E  1518               	bsf	24,2	;volatile
  2205  090F                     l1505:
  2206                           
  2207                           ;bmp.c: 45:             BAUDCTLbits.BRG16 = 0;
  2208  090F  1683               	bsf	3,5	;RP0=1, select bank3
  2209  0910  1703               	bsf	3,6	;RP1=1, select bank3
  2210  0911  1187               	bcf	7,3	;volatile
  2211                           
  2212                           ;bmp.c: 46:             break;
  2213  0912  292C               	goto	l1517
  2214  0913                     l1507:
  2215                           
  2216                           ;bmp.c: 48:             SPBRG = 12;
  2217  0913  300C               	movlw	12
  2218  0914  1683               	bsf	3,5	;RP0=1, select bank1
  2219  0915  1303               	bcf	3,6	;RP1=0, select bank1
  2220  0916  0099               	movwf	25	;volatile
  2221  0917                     l1509:
  2222                           
  2223                           ;bmp.c: 49:             TXSTAbits.BRGH = 0;
  2224  0917  1118               	bcf	24,2	;volatile
  2225  0918                     l1511:
  2226                           
  2227                           ;bmp.c: 50:             BAUDCTLbits.BRG16 = 0;
  2228  0918  1683               	bsf	3,5	;RP0=1, select bank3
  2229  0919  1703               	bsf	3,6	;RP1=1, select bank3
  2230  091A  1187               	bcf	7,3	;volatile
  2231                           
  2232                           ;bmp.c: 51:             break;
  2233  091B  292C               	goto	l1517
  2234  091C                     l1515:
  2235  091C  0874               	movf	USART_CONFIG@frec,w
  2236  091D  00F2               	movwf	??_USART_CONFIG
  2237  091E  01F3               	clrf	??_USART_CONFIG+1
  2238                           
  2239                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2240                           ; Switch size 1, requested type "simple"
  2241                           ; Number of cases is 1, Range of values is 0 to 0
  2242                           ; switch strategies available:
  2243                           ; Name         Instructions Cycles
  2244                           ; simple_byte            4     3 (average)
  2245                           ; direct_byte           11     8 (fixed)
  2246                           ; jumptable            260     6 (fixed)
  2247                           ;	Chosen strategy is simple_byte
  2248  091F  0873               	movf	??_USART_CONFIG+1,w
  2249  0920  3A00               	xorlw	0	; case 0
  2250  0921  1903               	skipnz
  2251  0922  2924               	goto	l2157
  2252  0923  292C               	goto	l1517
  2253  0924                     l2157:
  2254                           
  2255                           ; Switch size 1, requested type "simple"
  2256                           ; Number of cases is 2, Range of values is 4 to 8
  2257                           ; switch strategies available:
  2258                           ; Name         Instructions Cycles
  2259                           ; simple_byte            7     4 (average)
  2260                           ; direct_byte           26    11 (fixed)
  2261                           ; jumptable            263     9 (fixed)
  2262                           ;	Chosen strategy is simple_byte
  2263  0924  0872               	movf	??_USART_CONFIG,w
  2264  0925  3A04               	xorlw	4	; case 4
  2265  0926  1903               	skipnz
  2266  0927  290A               	goto	l1501
  2267  0928  3A0C               	xorlw	12	; case 8
  2268  0929  1903               	skipnz
  2269  092A  2913               	goto	l1507
  2270  092B  292C               	goto	l1517
  2271  092C                     l1517:
  2272                           
  2273                           ;bmp.c: 53:     if(tr==1){
  2274  092C  0370               	decf	USART_CONFIG@tr,w
  2275  092D  1D03               	btfss	3,2
  2276  092E  2930               	goto	u1301
  2277  092F  2931               	goto	u1300
  2278  0930                     u1301:
  2279  0930  2935               	goto	l65
  2280  0931                     u1300:
  2281  0931                     l1519:
  2282                           
  2283                           ;bmp.c: 54:         TXEN = 1;
  2284  0931  1683               	bsf	3,5	;RP0=1, select bank1
  2285  0932  1303               	bcf	3,6	;RP1=0, select bank1
  2286  0933  1698               	bsf	24,5	;volatile
  2287                           
  2288                           ;bmp.c: 55:     }
  2289  0934  2938               	goto	l1521
  2290  0935                     l65:	
  2291                           ;bmp.c: 56:     else{
  2292                           
  2293                           
  2294                           ;bmp.c: 57:         TXEN = 0;
  2295  0935  1683               	bsf	3,5	;RP0=1, select bank1
  2296  0936  1303               	bcf	3,6	;RP1=0, select bank1
  2297  0937  1298               	bcf	24,5	;volatile
  2298  0938                     l1521:
  2299                           
  2300                           ;bmp.c: 59:     if(rc == 1){
  2301  0938  0371               	decf	USART_CONFIG@rc,w
  2302  0939  1D03               	btfss	3,2
  2303  093A  293C               	goto	u1311
  2304  093B  293D               	goto	u1310
  2305  093C                     u1311:
  2306  093C  2941               	goto	l67
  2307  093D                     u1310:
  2308  093D                     l1523:
  2309                           
  2310                           ;bmp.c: 60:         RCSTAbits.CREN = 1;
  2311  093D  1283               	bcf	3,5	;RP0=0, select bank0
  2312  093E  1303               	bcf	3,6	;RP1=0, select bank0
  2313  093F  1618               	bsf	24,4	;volatile
  2314                           
  2315                           ;bmp.c: 61:     }
  2316  0940  2944               	goto	l69
  2317  0941                     l67:	
  2318                           ;bmp.c: 62:     else{
  2319                           
  2320                           
  2321                           ;bmp.c: 63:         RCSTAbits.CREN = 0;
  2322  0941  1283               	bcf	3,5	;RP0=0, select bank0
  2323  0942  1303               	bcf	3,6	;RP1=0, select bank0
  2324  0943  1218               	bcf	24,4	;volatile
  2325  0944                     l69:
  2326  0944  0008               	return
  2327  0945                     __end_of_USART_CONFIG:
  2328                           
  2329                           	psect	text6
  2330  178E                     __ptext6:	
  2331 ;; *************** function _I2C_Master_Init *****************
  2332 ;; Defined at:
  2333 ;;		line 16 in file "I2C.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  c               4    0[BANK0 ] const unsigned long 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;		None
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, status,2, status,0, pclath, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2347 ;;      Params:         0       4       0       0       0
  2348 ;;      Locals:         0       0       0       0       0
  2349 ;;      Temps:          0       4       0       0       0
  2350 ;;      Totals:         0       8       0       0       0
  2351 ;;Total ram usage:        8 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    1
  2354 ;; This function calls:
  2355 ;;		___lldiv
  2356 ;; This function is called by:
  2357 ;;		_setup
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           
  2362                           ;psect for function _I2C_Master_Init
  2363  178E                     _I2C_Master_Init:
  2364  178E                     l1529:	
  2365                           ;incstack = 0
  2366                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2367                           
  2368                           
  2369                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  2370  178E  3028               	movlw	40
  2371  178F  1283               	bcf	3,5	;RP0=0, select bank0
  2372  1790  1303               	bcf	3,6	;RP1=0, select bank0
  2373  1791  0094               	movwf	20	;volatile
  2374  1792                     l1531:
  2375                           
  2376                           ;I2C.c: 19:     SSPCON2 = 0;
  2377  1792  1683               	bsf	3,5	;RP0=1, select bank1
  2378  1793  1303               	bcf	3,6	;RP1=0, select bank1
  2379  1794  0191               	clrf	17	;volatile
  2380  1795                     l1533:
  2381                           
  2382                           ;I2C.c: 20:     SSPADD = (8000000/(4*c))-1;
  2383  1795  1283               	bcf	3,5	;RP0=0, select bank0
  2384  1796  1303               	bcf	3,6	;RP1=0, select bank0
  2385  1797  0820               	movf	I2C_Master_Init@c,w
  2386  1798  00A4               	movwf	??_I2C_Master_Init
  2387  1799  0821               	movf	I2C_Master_Init@c+1,w
  2388  179A  00A5               	movwf	??_I2C_Master_Init+1
  2389  179B  0822               	movf	I2C_Master_Init@c+2,w
  2390  179C  00A6               	movwf	??_I2C_Master_Init+2
  2391  179D  0823               	movf	I2C_Master_Init@c+3,w
  2392  179E  00A7               	movwf	??_I2C_Master_Init+3
  2393  179F  3002               	movlw	2
  2394  17A0                     u1325:
  2395  17A0  1003               	clrc
  2396  17A1  0DA4               	rlf	??_I2C_Master_Init,f
  2397  17A2  0DA5               	rlf	??_I2C_Master_Init+1,f
  2398  17A3  0DA6               	rlf	??_I2C_Master_Init+2,f
  2399  17A4  0DA7               	rlf	??_I2C_Master_Init+3,f
  2400  17A5                     u1320:
  2401  17A5  3EFF               	addlw	-1
  2402  17A6  1D03               	skipz
  2403  17A7  2FA0               	goto	u1325
  2404  17A8  0827               	movf	??_I2C_Master_Init+3,w
  2405  17A9  00F3               	movwf	___lldiv@divisor+3
  2406  17AA  0826               	movf	??_I2C_Master_Init+2,w
  2407  17AB  00F2               	movwf	___lldiv@divisor+2
  2408  17AC  0825               	movf	??_I2C_Master_Init+1,w
  2409  17AD  00F1               	movwf	___lldiv@divisor+1
  2410  17AE  0824               	movf	??_I2C_Master_Init,w
  2411  17AF  00F0               	movwf	___lldiv@divisor
  2412  17B0  3000               	movlw	0
  2413  17B1  00F7               	movwf	___lldiv@dividend+3
  2414  17B2  307A               	movlw	122
  2415  17B3  00F6               	movwf	___lldiv@dividend+2
  2416  17B4  3012               	movlw	18
  2417  17B5  00F5               	movwf	___lldiv@dividend+1
  2418  17B6  3000               	movlw	0
  2419  17B7  00F4               	movwf	___lldiv@dividend
  2420  17B8  120A  158A  22CE  160A  118A  	fcall	___lldiv
  2421  17BD  0870               	movf	?___lldiv,w
  2422  17BE  3EFF               	addlw	255
  2423  17BF  1683               	bsf	3,5	;RP0=1, select bank1
  2424  17C0  1303               	bcf	3,6	;RP1=0, select bank1
  2425  17C1  0093               	movwf	19	;volatile
  2426  17C2                     l1535:
  2427                           
  2428                           ;I2C.c: 21:     SSPSTAT = 0;
  2429  17C2  0194               	clrf	20	;volatile
  2430  17C3                     l1537:
  2431                           
  2432                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  2433  17C3  1587               	bsf	7,3	;volatile
  2434  17C4                     l1539:
  2435                           
  2436                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  2437  17C4  1607               	bsf	7,4	;volatile
  2438  17C5                     l127:
  2439  17C5  0008               	return
  2440  17C6                     __end_of_I2C_Master_Init:
  2441                           
  2442                           	psect	text7
  2443  086D                     __ptext7:	
  2444 ;; *************** function _abs *****************
  2445 ;; Defined at:
  2446 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\abs.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;  a               2    0[COMMON] int 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;		None
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  2    0[COMMON] int 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2460 ;;      Params:         2       0       0       0       0
  2461 ;;      Locals:         0       0       0       0       0
  2462 ;;      Temps:          2       0       0       0       0
  2463 ;;      Totals:         4       0       0       0       0
  2464 ;;Total ram usage:        4 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           
  2474                           ;psect for function _abs
  2475  086D                     _abs:
  2476  086D                     l1757:	
  2477                           ;incstack = 0
  2478                           ; Regs used in _abs: [wreg+status,2+status,0]
  2479                           
  2480  086D  1FF1               	btfss	abs@a+1,7
  2481  086E  2870               	goto	u1931
  2482  086F  2871               	goto	u1930
  2483  0870                     u1931:
  2484  0870  287D               	goto	l774
  2485  0871                     u1930:
  2486  0871                     l1759:
  2487  0871  0970               	comf	abs@a,w
  2488  0872  00F2               	movwf	??_abs
  2489  0873  0971               	comf	abs@a+1,w
  2490  0874  00F3               	movwf	??_abs+1
  2491  0875  0AF2               	incf	??_abs,f
  2492  0876  1903               	skipnz
  2493  0877  0AF3               	incf	??_abs+1,f
  2494  0878  0872               	movf	??_abs,w
  2495  0879  00F0               	movwf	?_abs
  2496  087A  0873               	movf	??_abs+1,w
  2497  087B  00F1               	movwf	?_abs+1
  2498  087C  287D               	goto	l775
  2499  087D                     l774:
  2500  087D                     l775:
  2501  087D  0008               	return
  2502  087E                     __end_of_abs:
  2503                           
  2504                           	psect	text8
  2505  0A21                     __ptext8:	
  2506 ;; *************** function ___llmod *****************
  2507 ;; Defined at:
  2508 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\llmod.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  divisor         4    0[COMMON] unsigned long 
  2511 ;;  dividend        4    4[COMMON] unsigned long 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  counter         1    9[COMMON] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  4    0[COMMON] unsigned long 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2523 ;;      Params:         8       0       0       0       0
  2524 ;;      Locals:         1       0       0       0       0
  2525 ;;      Temps:          1       0       0       0       0
  2526 ;;      Totals:        10       0       0       0       0
  2527 ;;Total ram usage:       10 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; This function calls:
  2530 ;;		Nothing
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function ___llmod
  2538  0A21                     ___llmod:
  2539  0A21                     l1939:	
  2540                           ;incstack = 0
  2541                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2542                           
  2543  0A21  0873               	movf	___llmod@divisor+3,w
  2544  0A22  0472               	iorwf	___llmod@divisor+2,w
  2545  0A23  0471               	iorwf	___llmod@divisor+1,w
  2546  0A24  0470               	iorwf	___llmod@divisor,w
  2547  0A25  1903               	skipnz
  2548  0A26  2A28               	goto	u2291
  2549  0A27  2A29               	goto	u2290
  2550  0A28                     u2291:
  2551  0A28  2A6C               	goto	l1955
  2552  0A29                     u2290:
  2553  0A29                     l1941:
  2554  0A29  01F9               	clrf	___llmod@counter
  2555  0A2A  0AF9               	incf	___llmod@counter,f
  2556  0A2B  2A39               	goto	l1945
  2557  0A2C                     l1943:
  2558  0A2C  3001               	movlw	1
  2559  0A2D  00F8               	movwf	??___llmod
  2560  0A2E                     u2305:
  2561  0A2E  1003               	clrc
  2562  0A2F  0DF0               	rlf	___llmod@divisor,f
  2563  0A30  0DF1               	rlf	___llmod@divisor+1,f
  2564  0A31  0DF2               	rlf	___llmod@divisor+2,f
  2565  0A32  0DF3               	rlf	___llmod@divisor+3,f
  2566  0A33  0BF8               	decfsz	??___llmod,f
  2567  0A34  2A2E               	goto	u2305
  2568  0A35  3001               	movlw	1
  2569  0A36  00F8               	movwf	??___llmod
  2570  0A37  0878               	movf	??___llmod,w
  2571  0A38  07F9               	addwf	___llmod@counter,f
  2572  0A39                     l1945:
  2573  0A39  1FF3               	btfss	___llmod@divisor+3,7
  2574  0A3A  2A3C               	goto	u2311
  2575  0A3B  2A3D               	goto	u2310
  2576  0A3C                     u2311:
  2577  0A3C  2A2C               	goto	l1943
  2578  0A3D                     u2310:
  2579  0A3D                     l1947:
  2580  0A3D  0873               	movf	___llmod@divisor+3,w
  2581  0A3E  0277               	subwf	___llmod@dividend+3,w
  2582  0A3F  1D03               	skipz
  2583  0A40  2A4B               	goto	u2325
  2584  0A41  0872               	movf	___llmod@divisor+2,w
  2585  0A42  0276               	subwf	___llmod@dividend+2,w
  2586  0A43  1D03               	skipz
  2587  0A44  2A4B               	goto	u2325
  2588  0A45  0871               	movf	___llmod@divisor+1,w
  2589  0A46  0275               	subwf	___llmod@dividend+1,w
  2590  0A47  1D03               	skipz
  2591  0A48  2A4B               	goto	u2325
  2592  0A49  0870               	movf	___llmod@divisor,w
  2593  0A4A  0274               	subwf	___llmod@dividend,w
  2594  0A4B                     u2325:
  2595  0A4B  1C03               	skipc
  2596  0A4C  2A4E               	goto	u2321
  2597  0A4D  2A4F               	goto	u2320
  2598  0A4E                     u2321:
  2599  0A4E  2A5D               	goto	l1951
  2600  0A4F                     u2320:
  2601  0A4F                     l1949:
  2602  0A4F  0870               	movf	___llmod@divisor,w
  2603  0A50  02F4               	subwf	___llmod@dividend,f
  2604  0A51  0871               	movf	___llmod@divisor+1,w
  2605  0A52  1C03               	skipc
  2606  0A53  0F71               	incfsz	___llmod@divisor+1,w
  2607  0A54  02F5               	subwf	___llmod@dividend+1,f
  2608  0A55  0872               	movf	___llmod@divisor+2,w
  2609  0A56  1C03               	skipc
  2610  0A57  0F72               	incfsz	___llmod@divisor+2,w
  2611  0A58  02F6               	subwf	___llmod@dividend+2,f
  2612  0A59  0873               	movf	___llmod@divisor+3,w
  2613  0A5A  1C03               	skipc
  2614  0A5B  0F73               	incfsz	___llmod@divisor+3,w
  2615  0A5C  02F7               	subwf	___llmod@dividend+3,f
  2616  0A5D                     l1951:
  2617  0A5D  3001               	movlw	1
  2618  0A5E                     u2335:
  2619  0A5E  1003               	clrc
  2620  0A5F  0CF3               	rrf	___llmod@divisor+3,f
  2621  0A60  0CF2               	rrf	___llmod@divisor+2,f
  2622  0A61  0CF1               	rrf	___llmod@divisor+1,f
  2623  0A62  0CF0               	rrf	___llmod@divisor,f
  2624  0A63  3EFF               	addlw	-1
  2625  0A64  1D03               	skipz
  2626  0A65  2A5E               	goto	u2335
  2627  0A66                     l1953:
  2628  0A66  3001               	movlw	1
  2629  0A67  02F9               	subwf	___llmod@counter,f
  2630  0A68  1D03               	btfss	3,2
  2631  0A69  2A6B               	goto	u2341
  2632  0A6A  2A6C               	goto	u2340
  2633  0A6B                     u2341:
  2634  0A6B  2A3D               	goto	l1947
  2635  0A6C                     u2340:
  2636  0A6C                     l1955:
  2637  0A6C  0877               	movf	___llmod@dividend+3,w
  2638  0A6D  00F3               	movwf	?___llmod+3
  2639  0A6E  0876               	movf	___llmod@dividend+2,w
  2640  0A6F  00F2               	movwf	?___llmod+2
  2641  0A70  0875               	movf	___llmod@dividend+1,w
  2642  0A71  00F1               	movwf	?___llmod+1
  2643  0A72  0874               	movf	___llmod@dividend,w
  2644  0A73  00F0               	movwf	?___llmod
  2645  0A74                     l545:
  2646  0A74  0008               	return
  2647  0A75                     __end_of___llmod:
  2648                           
  2649                           	psect	text9
  2650  0A75                     __ptext9:	
  2651 ;; *************** function ___awmod *****************
  2652 ;; Defined at:
  2653 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  divisor         2    4[COMMON] int 
  2656 ;;  dividend        2    6[COMMON] int 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  sign            1   10[COMMON] unsigned char 
  2659 ;;  counter         1    9[COMMON] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  2    4[COMMON] int 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2669 ;;      Params:         4       0       0       0       0
  2670 ;;      Locals:         2       0       0       0       0
  2671 ;;      Temps:          1       0       0       0       0
  2672 ;;      Totals:         7       0       0       0       0
  2673 ;;Total ram usage:        7 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;;		_Division
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function ___awmod
  2685  0A75                     ___awmod:
  2686  0A75                     l1901:	
  2687                           ;incstack = 0
  2688                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2689                           
  2690  0A75  01FA               	clrf	___awmod@sign
  2691  0A76                     l1903:
  2692  0A76  1FF7               	btfss	___awmod@dividend+1,7
  2693  0A77  2A79               	goto	u2201
  2694  0A78  2A7A               	goto	u2200
  2695  0A79                     u2201:
  2696  0A79  2A81               	goto	l1909
  2697  0A7A                     u2200:
  2698  0A7A                     l1905:
  2699  0A7A  09F6               	comf	___awmod@dividend,f
  2700  0A7B  09F7               	comf	___awmod@dividend+1,f
  2701  0A7C  0AF6               	incf	___awmod@dividend,f
  2702  0A7D  1903               	skipnz
  2703  0A7E  0AF7               	incf	___awmod@dividend+1,f
  2704  0A7F                     l1907:
  2705  0A7F  01FA               	clrf	___awmod@sign
  2706  0A80  0AFA               	incf	___awmod@sign,f
  2707  0A81                     l1909:
  2708  0A81  1FF5               	btfss	___awmod@divisor+1,7
  2709  0A82  2A84               	goto	u2211
  2710  0A83  2A85               	goto	u2210
  2711  0A84                     u2211:
  2712  0A84  2A8A               	goto	l1913
  2713  0A85                     u2210:
  2714  0A85                     l1911:
  2715  0A85  09F4               	comf	___awmod@divisor,f
  2716  0A86  09F5               	comf	___awmod@divisor+1,f
  2717  0A87  0AF4               	incf	___awmod@divisor,f
  2718  0A88  1903               	skipnz
  2719  0A89  0AF5               	incf	___awmod@divisor+1,f
  2720  0A8A                     l1913:
  2721  0A8A  0874               	movf	___awmod@divisor,w
  2722  0A8B  0475               	iorwf	___awmod@divisor+1,w
  2723  0A8C  1903               	btfsc	3,2
  2724  0A8D  2A8F               	goto	u2221
  2725  0A8E  2A90               	goto	u2220
  2726  0A8F                     u2221:
  2727  0A8F  2ABF               	goto	l1931
  2728  0A90                     u2220:
  2729  0A90                     l1915:
  2730  0A90  01F9               	clrf	___awmod@counter
  2731  0A91  0AF9               	incf	___awmod@counter,f
  2732  0A92  2A9E               	goto	l1921
  2733  0A93                     l1917:
  2734  0A93  3001               	movlw	1
  2735  0A94                     u2235:
  2736  0A94  1003               	clrc
  2737  0A95  0DF4               	rlf	___awmod@divisor,f
  2738  0A96  0DF5               	rlf	___awmod@divisor+1,f
  2739  0A97  3EFF               	addlw	-1
  2740  0A98  1D03               	skipz
  2741  0A99  2A94               	goto	u2235
  2742  0A9A                     l1919:
  2743  0A9A  3001               	movlw	1
  2744  0A9B  00F8               	movwf	??___awmod
  2745  0A9C  0878               	movf	??___awmod,w
  2746  0A9D  07F9               	addwf	___awmod@counter,f
  2747  0A9E                     l1921:
  2748  0A9E  1FF5               	btfss	___awmod@divisor+1,7
  2749  0A9F  2AA1               	goto	u2241
  2750  0AA0  2AA2               	goto	u2240
  2751  0AA1                     u2241:
  2752  0AA1  2A93               	goto	l1917
  2753  0AA2                     u2240:
  2754  0AA2                     l1923:
  2755  0AA2  0875               	movf	___awmod@divisor+1,w
  2756  0AA3  0277               	subwf	___awmod@dividend+1,w
  2757  0AA4  1D03               	skipz
  2758  0AA5  2AA8               	goto	u2255
  2759  0AA6  0874               	movf	___awmod@divisor,w
  2760  0AA7  0276               	subwf	___awmod@dividend,w
  2761  0AA8                     u2255:
  2762  0AA8  1C03               	skipc
  2763  0AA9  2AAB               	goto	u2251
  2764  0AAA  2AAC               	goto	u2250
  2765  0AAB                     u2251:
  2766  0AAB  2AB2               	goto	l1927
  2767  0AAC                     u2250:
  2768  0AAC                     l1925:
  2769  0AAC  0874               	movf	___awmod@divisor,w
  2770  0AAD  02F6               	subwf	___awmod@dividend,f
  2771  0AAE  0875               	movf	___awmod@divisor+1,w
  2772  0AAF  1C03               	skipc
  2773  0AB0  03F7               	decf	___awmod@dividend+1,f
  2774  0AB1  02F7               	subwf	___awmod@dividend+1,f
  2775  0AB2                     l1927:
  2776  0AB2  3001               	movlw	1
  2777  0AB3                     u2265:
  2778  0AB3  1003               	clrc
  2779  0AB4  0CF5               	rrf	___awmod@divisor+1,f
  2780  0AB5  0CF4               	rrf	___awmod@divisor,f
  2781  0AB6  3EFF               	addlw	-1
  2782  0AB7  1D03               	skipz
  2783  0AB8  2AB3               	goto	u2265
  2784  0AB9                     l1929:
  2785  0AB9  3001               	movlw	1
  2786  0ABA  02F9               	subwf	___awmod@counter,f
  2787  0ABB  1D03               	btfss	3,2
  2788  0ABC  2ABE               	goto	u2271
  2789  0ABD  2ABF               	goto	u2270
  2790  0ABE                     u2271:
  2791  0ABE  2AA2               	goto	l1923
  2792  0ABF                     u2270:
  2793  0ABF                     l1931:
  2794  0ABF  087A               	movf	___awmod@sign,w
  2795  0AC0  1903               	btfsc	3,2
  2796  0AC1  2AC3               	goto	u2281
  2797  0AC2  2AC4               	goto	u2280
  2798  0AC3                     u2281:
  2799  0AC3  2AC9               	goto	l1935
  2800  0AC4                     u2280:
  2801  0AC4                     l1933:
  2802  0AC4  09F6               	comf	___awmod@dividend,f
  2803  0AC5  09F7               	comf	___awmod@dividend+1,f
  2804  0AC6  0AF6               	incf	___awmod@dividend,f
  2805  0AC7  1903               	skipnz
  2806  0AC8  0AF7               	incf	___awmod@dividend+1,f
  2807  0AC9                     l1935:
  2808  0AC9  0877               	movf	___awmod@dividend+1,w
  2809  0ACA  00F5               	movwf	?___awmod+1
  2810  0ACB  0876               	movf	___awmod@dividend,w
  2811  0ACC  00F4               	movwf	?___awmod
  2812  0ACD                     l489:
  2813  0ACD  0008               	return
  2814  0ACE                     __end_of___awmod:
  2815                           
  2816                           	psect	text10
  2817  0B34                     __ptext10:	
  2818 ;; *************** function ___awdiv *****************
  2819 ;; Defined at:
  2820 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  divisor         2    4[COMMON] int 
  2823 ;;  dividend        2    6[COMMON] int 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  quotient        2   11[COMMON] int 
  2826 ;;  sign            1   10[COMMON] unsigned char 
  2827 ;;  counter         1    9[COMMON] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  2    4[COMMON] int 
  2830 ;; Registers used:
  2831 ;;		wreg, status,2, status,0
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2837 ;;      Params:         4       0       0       0       0
  2838 ;;      Locals:         4       0       0       0       0
  2839 ;;      Temps:          1       0       0       0       0
  2840 ;;      Totals:         9       0       0       0       0
  2841 ;;Total ram usage:        9 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_main
  2847 ;;		_Division
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           
  2852                           ;psect for function ___awdiv
  2853  0B34                     ___awdiv:
  2854  0B34                     l1857:	
  2855                           ;incstack = 0
  2856                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2857                           
  2858  0B34  01FA               	clrf	___awdiv@sign
  2859  0B35                     l1859:
  2860  0B35  1FF5               	btfss	___awdiv@divisor+1,7
  2861  0B36  2B38               	goto	u2101
  2862  0B37  2B39               	goto	u2100
  2863  0B38                     u2101:
  2864  0B38  2B40               	goto	l1865
  2865  0B39                     u2100:
  2866  0B39                     l1861:
  2867  0B39  09F4               	comf	___awdiv@divisor,f
  2868  0B3A  09F5               	comf	___awdiv@divisor+1,f
  2869  0B3B  0AF4               	incf	___awdiv@divisor,f
  2870  0B3C  1903               	skipnz
  2871  0B3D  0AF5               	incf	___awdiv@divisor+1,f
  2872  0B3E                     l1863:
  2873  0B3E  01FA               	clrf	___awdiv@sign
  2874  0B3F  0AFA               	incf	___awdiv@sign,f
  2875  0B40                     l1865:
  2876  0B40  1FF7               	btfss	___awdiv@dividend+1,7
  2877  0B41  2B43               	goto	u2111
  2878  0B42  2B44               	goto	u2110
  2879  0B43                     u2111:
  2880  0B43  2B4D               	goto	l1871
  2881  0B44                     u2110:
  2882  0B44                     l1867:
  2883  0B44  09F6               	comf	___awdiv@dividend,f
  2884  0B45  09F7               	comf	___awdiv@dividend+1,f
  2885  0B46  0AF6               	incf	___awdiv@dividend,f
  2886  0B47  1903               	skipnz
  2887  0B48  0AF7               	incf	___awdiv@dividend+1,f
  2888  0B49                     l1869:
  2889  0B49  3001               	movlw	1
  2890  0B4A  00F8               	movwf	??___awdiv
  2891  0B4B  0878               	movf	??___awdiv,w
  2892  0B4C  06FA               	xorwf	___awdiv@sign,f
  2893  0B4D                     l1871:
  2894  0B4D  01FB               	clrf	___awdiv@quotient
  2895  0B4E  01FC               	clrf	___awdiv@quotient+1
  2896  0B4F                     l1873:
  2897  0B4F  0874               	movf	___awdiv@divisor,w
  2898  0B50  0475               	iorwf	___awdiv@divisor+1,w
  2899  0B51  1903               	btfsc	3,2
  2900  0B52  2B54               	goto	u2121
  2901  0B53  2B55               	goto	u2120
  2902  0B54                     u2121:
  2903  0B54  2B8C               	goto	l1893
  2904  0B55                     u2120:
  2905  0B55                     l1875:
  2906  0B55  01F9               	clrf	___awdiv@counter
  2907  0B56  0AF9               	incf	___awdiv@counter,f
  2908  0B57  2B63               	goto	l1881
  2909  0B58                     l1877:
  2910  0B58  3001               	movlw	1
  2911  0B59                     u2135:
  2912  0B59  1003               	clrc
  2913  0B5A  0DF4               	rlf	___awdiv@divisor,f
  2914  0B5B  0DF5               	rlf	___awdiv@divisor+1,f
  2915  0B5C  3EFF               	addlw	-1
  2916  0B5D  1D03               	skipz
  2917  0B5E  2B59               	goto	u2135
  2918  0B5F                     l1879:
  2919  0B5F  3001               	movlw	1
  2920  0B60  00F8               	movwf	??___awdiv
  2921  0B61  0878               	movf	??___awdiv,w
  2922  0B62  07F9               	addwf	___awdiv@counter,f
  2923  0B63                     l1881:
  2924  0B63  1FF5               	btfss	___awdiv@divisor+1,7
  2925  0B64  2B66               	goto	u2141
  2926  0B65  2B67               	goto	u2140
  2927  0B66                     u2141:
  2928  0B66  2B58               	goto	l1877
  2929  0B67                     u2140:
  2930  0B67                     l1883:
  2931  0B67  3001               	movlw	1
  2932  0B68                     u2155:
  2933  0B68  1003               	clrc
  2934  0B69  0DFB               	rlf	___awdiv@quotient,f
  2935  0B6A  0DFC               	rlf	___awdiv@quotient+1,f
  2936  0B6B  3EFF               	addlw	-1
  2937  0B6C  1D03               	skipz
  2938  0B6D  2B68               	goto	u2155
  2939  0B6E  0875               	movf	___awdiv@divisor+1,w
  2940  0B6F  0277               	subwf	___awdiv@dividend+1,w
  2941  0B70  1D03               	skipz
  2942  0B71  2B74               	goto	u2165
  2943  0B72  0874               	movf	___awdiv@divisor,w
  2944  0B73  0276               	subwf	___awdiv@dividend,w
  2945  0B74                     u2165:
  2946  0B74  1C03               	skipc
  2947  0B75  2B77               	goto	u2161
  2948  0B76  2B78               	goto	u2160
  2949  0B77                     u2161:
  2950  0B77  2B7F               	goto	l1889
  2951  0B78                     u2160:
  2952  0B78                     l1885:
  2953  0B78  0874               	movf	___awdiv@divisor,w
  2954  0B79  02F6               	subwf	___awdiv@dividend,f
  2955  0B7A  0875               	movf	___awdiv@divisor+1,w
  2956  0B7B  1C03               	skipc
  2957  0B7C  03F7               	decf	___awdiv@dividend+1,f
  2958  0B7D  02F7               	subwf	___awdiv@dividend+1,f
  2959  0B7E                     l1887:
  2960  0B7E  147B               	bsf	___awdiv@quotient,0
  2961  0B7F                     l1889:
  2962  0B7F  3001               	movlw	1
  2963  0B80                     u2175:
  2964  0B80  1003               	clrc
  2965  0B81  0CF5               	rrf	___awdiv@divisor+1,f
  2966  0B82  0CF4               	rrf	___awdiv@divisor,f
  2967  0B83  3EFF               	addlw	-1
  2968  0B84  1D03               	skipz
  2969  0B85  2B80               	goto	u2175
  2970  0B86                     l1891:
  2971  0B86  3001               	movlw	1
  2972  0B87  02F9               	subwf	___awdiv@counter,f
  2973  0B88  1D03               	btfss	3,2
  2974  0B89  2B8B               	goto	u2181
  2975  0B8A  2B8C               	goto	u2180
  2976  0B8B                     u2181:
  2977  0B8B  2B67               	goto	l1883
  2978  0B8C                     u2180:
  2979  0B8C                     l1893:
  2980  0B8C  087A               	movf	___awdiv@sign,w
  2981  0B8D  1903               	btfsc	3,2
  2982  0B8E  2B90               	goto	u2191
  2983  0B8F  2B91               	goto	u2190
  2984  0B90                     u2191:
  2985  0B90  2B96               	goto	l1897
  2986  0B91                     u2190:
  2987  0B91                     l1895:
  2988  0B91  09FB               	comf	___awdiv@quotient,f
  2989  0B92  09FC               	comf	___awdiv@quotient+1,f
  2990  0B93  0AFB               	incf	___awdiv@quotient,f
  2991  0B94  1903               	skipnz
  2992  0B95  0AFC               	incf	___awdiv@quotient+1,f
  2993  0B96                     l1897:
  2994  0B96  087C               	movf	___awdiv@quotient+1,w
  2995  0B97  00F5               	movwf	?___awdiv+1
  2996  0B98  087B               	movf	___awdiv@quotient,w
  2997  0B99  00F4               	movwf	?___awdiv
  2998  0B9A                     l476:
  2999  0B9A  0008               	return
  3000  0B9B                     __end_of___awdiv:
  3001                           
  3002                           	psect	text11
  3003  000C                     __ptext11:	
  3004 ;; *************** function ___almod *****************
  3005 ;; Defined at:
  3006 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\almod.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  divisor         4    0[COMMON] long 
  3009 ;;  dividend        4    4[COMMON] long 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  sign            1   10[COMMON] unsigned char 
  3012 ;;  counter         1    9[COMMON] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  4    0[COMMON] long 
  3015 ;; Registers used:
  3016 ;;		wreg, status,2, status,0
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3022 ;;      Params:         8       0       0       0       0
  3023 ;;      Locals:         2       0       0       0       0
  3024 ;;      Temps:          1       0       0       0       0
  3025 ;;      Totals:        11       0       0       0       0
  3026 ;;Total ram usage:       11 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_main
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           
  3036                           ;psect for function ___almod
  3037  000C                     ___almod:
  3038  000C                     l1825:	
  3039                           ;incstack = 0
  3040                           ; Regs used in ___almod: [wreg+status,2+status,0]
  3041                           
  3042  000C  01FA               	clrf	___almod@sign
  3043  000D                     l1827:
  3044  000D  1FF7               	btfss	___almod@dividend+3,7
  3045  000E  2810               	goto	u2011
  3046  000F  2811               	goto	u2010
  3047  0010                     u2011:
  3048  0010  281E               	goto	l401
  3049  0011                     u2010:
  3050  0011                     l1829:
  3051  0011  09F4               	comf	___almod@dividend,f
  3052  0012  09F5               	comf	___almod@dividend+1,f
  3053  0013  09F6               	comf	___almod@dividend+2,f
  3054  0014  09F7               	comf	___almod@dividend+3,f
  3055  0015  0AF4               	incf	___almod@dividend,f
  3056  0016  1903               	skipnz
  3057  0017  0AF5               	incf	___almod@dividend+1,f
  3058  0018  1903               	skipnz
  3059  0019  0AF6               	incf	___almod@dividend+2,f
  3060  001A  1903               	skipnz
  3061  001B  0AF7               	incf	___almod@dividend+3,f
  3062  001C  01FA               	clrf	___almod@sign
  3063  001D  0AFA               	incf	___almod@sign,f
  3064  001E                     l401:
  3065  001E  1FF3               	btfss	___almod@divisor+3,7
  3066  001F  2821               	goto	u2021
  3067  0020  2822               	goto	u2020
  3068  0021                     u2021:
  3069  0021  282D               	goto	l1833
  3070  0022                     u2020:
  3071  0022                     l1831:
  3072  0022  09F0               	comf	___almod@divisor,f
  3073  0023  09F1               	comf	___almod@divisor+1,f
  3074  0024  09F2               	comf	___almod@divisor+2,f
  3075  0025  09F3               	comf	___almod@divisor+3,f
  3076  0026  0AF0               	incf	___almod@divisor,f
  3077  0027  1903               	skipnz
  3078  0028  0AF1               	incf	___almod@divisor+1,f
  3079  0029  1903               	skipnz
  3080  002A  0AF2               	incf	___almod@divisor+2,f
  3081  002B  1903               	skipnz
  3082  002C  0AF3               	incf	___almod@divisor+3,f
  3083  002D                     l1833:
  3084  002D  0873               	movf	___almod@divisor+3,w
  3085  002E  0472               	iorwf	___almod@divisor+2,w
  3086  002F  0471               	iorwf	___almod@divisor+1,w
  3087  0030  0470               	iorwf	___almod@divisor,w
  3088  0031  1903               	skipnz
  3089  0032  2834               	goto	u2031
  3090  0033  2835               	goto	u2030
  3091  0034                     u2031:
  3092  0034  2878               	goto	l1849
  3093  0035                     u2030:
  3094  0035                     l1835:
  3095  0035  01F9               	clrf	___almod@counter
  3096  0036  0AF9               	incf	___almod@counter,f
  3097  0037  2845               	goto	l1839
  3098  0038                     l1837:
  3099  0038  3001               	movlw	1
  3100  0039  00F8               	movwf	??___almod
  3101  003A                     u2045:
  3102  003A  1003               	clrc
  3103  003B  0DF0               	rlf	___almod@divisor,f
  3104  003C  0DF1               	rlf	___almod@divisor+1,f
  3105  003D  0DF2               	rlf	___almod@divisor+2,f
  3106  003E  0DF3               	rlf	___almod@divisor+3,f
  3107  003F  0BF8               	decfsz	??___almod,f
  3108  0040  283A               	goto	u2045
  3109  0041  3001               	movlw	1
  3110  0042  00F8               	movwf	??___almod
  3111  0043  0878               	movf	??___almod,w
  3112  0044  07F9               	addwf	___almod@counter,f
  3113  0045                     l1839:
  3114  0045  1FF3               	btfss	___almod@divisor+3,7
  3115  0046  2848               	goto	u2051
  3116  0047  2849               	goto	u2050
  3117  0048                     u2051:
  3118  0048  2838               	goto	l1837
  3119  0049                     u2050:
  3120  0049                     l1841:
  3121  0049  0873               	movf	___almod@divisor+3,w
  3122  004A  0277               	subwf	___almod@dividend+3,w
  3123  004B  1D03               	skipz
  3124  004C  2857               	goto	u2065
  3125  004D  0872               	movf	___almod@divisor+2,w
  3126  004E  0276               	subwf	___almod@dividend+2,w
  3127  004F  1D03               	skipz
  3128  0050  2857               	goto	u2065
  3129  0051  0871               	movf	___almod@divisor+1,w
  3130  0052  0275               	subwf	___almod@dividend+1,w
  3131  0053  1D03               	skipz
  3132  0054  2857               	goto	u2065
  3133  0055  0870               	movf	___almod@divisor,w
  3134  0056  0274               	subwf	___almod@dividend,w
  3135  0057                     u2065:
  3136  0057  1C03               	skipc
  3137  0058  285A               	goto	u2061
  3138  0059  285B               	goto	u2060
  3139  005A                     u2061:
  3140  005A  2869               	goto	l1845
  3141  005B                     u2060:
  3142  005B                     l1843:
  3143  005B  0870               	movf	___almod@divisor,w
  3144  005C  02F4               	subwf	___almod@dividend,f
  3145  005D  0871               	movf	___almod@divisor+1,w
  3146  005E  1C03               	skipc
  3147  005F  0F71               	incfsz	___almod@divisor+1,w
  3148  0060  02F5               	subwf	___almod@dividend+1,f
  3149  0061  0872               	movf	___almod@divisor+2,w
  3150  0062  1C03               	skipc
  3151  0063  0F72               	incfsz	___almod@divisor+2,w
  3152  0064  02F6               	subwf	___almod@dividend+2,f
  3153  0065  0873               	movf	___almod@divisor+3,w
  3154  0066  1C03               	skipc
  3155  0067  0F73               	incfsz	___almod@divisor+3,w
  3156  0068  02F7               	subwf	___almod@dividend+3,f
  3157  0069                     l1845:
  3158  0069  3001               	movlw	1
  3159  006A                     u2075:
  3160  006A  1003               	clrc
  3161  006B  0CF3               	rrf	___almod@divisor+3,f
  3162  006C  0CF2               	rrf	___almod@divisor+2,f
  3163  006D  0CF1               	rrf	___almod@divisor+1,f
  3164  006E  0CF0               	rrf	___almod@divisor,f
  3165  006F  3EFF               	addlw	-1
  3166  0070  1D03               	skipz
  3167  0071  286A               	goto	u2075
  3168  0072                     l1847:
  3169  0072  3001               	movlw	1
  3170  0073  02F9               	subwf	___almod@counter,f
  3171  0074  1D03               	btfss	3,2
  3172  0075  2877               	goto	u2081
  3173  0076  2878               	goto	u2080
  3174  0077                     u2081:
  3175  0077  2849               	goto	l1841
  3176  0078                     u2080:
  3177  0078                     l1849:
  3178  0078  087A               	movf	___almod@sign,w
  3179  0079  1903               	btfsc	3,2
  3180  007A  287C               	goto	u2091
  3181  007B  287D               	goto	u2090
  3182  007C                     u2091:
  3183  007C  2888               	goto	l1853
  3184  007D                     u2090:
  3185  007D                     l1851:
  3186  007D  09F4               	comf	___almod@dividend,f
  3187  007E  09F5               	comf	___almod@dividend+1,f
  3188  007F  09F6               	comf	___almod@dividend+2,f
  3189  0080  09F7               	comf	___almod@dividend+3,f
  3190  0081  0AF4               	incf	___almod@dividend,f
  3191  0082  1903               	skipnz
  3192  0083  0AF5               	incf	___almod@dividend+1,f
  3193  0084  1903               	skipnz
  3194  0085  0AF6               	incf	___almod@dividend+2,f
  3195  0086  1903               	skipnz
  3196  0087  0AF7               	incf	___almod@dividend+3,f
  3197  0088                     l1853:
  3198  0088  0877               	movf	___almod@dividend+3,w
  3199  0089  00F3               	movwf	?___almod+3
  3200  008A  0876               	movf	___almod@dividend+2,w
  3201  008B  00F2               	movwf	?___almod+2
  3202  008C  0875               	movf	___almod@dividend+1,w
  3203  008D  00F1               	movwf	?___almod+1
  3204  008E  0874               	movf	___almod@dividend,w
  3205  008F  00F0               	movwf	?___almod
  3206  0090                     l411:
  3207  0090  0008               	return
  3208  0091                     __end_of___almod:
  3209                           
  3210                           	psect	text12
  3211  170B                     __ptext12:	
  3212 ;; *************** function _UART_write *****************
  3213 ;; Defined at:
  3214 ;;		line 67 in file "bmp.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  word            2    0[COMMON] PTR unsigned char 
  3217 ;;		 -> buffer(1), STR_2(18), STR_1(11), 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr0l, fsr0h, btemp+1, pclath
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         2       0       0       0       0
  3230 ;;      Locals:         0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0
  3232 ;;      Totals:         2       0       0       0       0
  3233 ;;Total ram usage:        2 bytes
  3234 ;; Hardware stack levels used:    2
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_main
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           
  3243                           ;psect for function _UART_write
  3244  170B                     _UART_write:
  3245  170B                     l1691:	
  3246                           ;incstack = 0
  3247                           ; Regs used in _UART_write: [wreg-fsr0h+btemp+1+pclath]
  3248                           
  3249                           
  3250                           ;bmp.c: 68:     while (*word != 0){
  3251  170B  2F22               	goto	l1697
  3252  170C                     l1693:
  3253                           
  3254                           ;bmp.c: 69:         TXREG = (*word);
  3255  170C  0871               	movf	UART_write@word+1,w
  3256  170D  00FF               	movwf	btemp+1
  3257  170E  0870               	movf	UART_write@word,w
  3258  170F  0084               	movwf	4
  3259  1710  120A  158A  2000  160A  118A  	fcall	stringtab
  3260  1715  0099               	movwf	25	;volatile
  3261  1716                     l74:	
  3262                           ;bmp.c: 70:         while(!TXSTAbits.TRMT);
  3263                           
  3264  1716  1683               	bsf	3,5	;RP0=1, select bank1
  3265  1717  1303               	bcf	3,6	;RP1=0, select bank1
  3266  1718  1C98               	btfss	24,1	;volatile
  3267  1719  2F1B               	goto	u1671
  3268  171A  2F1C               	goto	u1670
  3269  171B                     u1671:
  3270  171B  2F16               	goto	l74
  3271  171C                     u1670:
  3272  171C                     l1695:
  3273                           
  3274                           ;bmp.c: 71:         word++;
  3275  171C  3001               	movlw	1
  3276  171D  07F0               	addwf	UART_write@word,f
  3277  171E  1803               	skipnc
  3278  171F  0AF1               	incf	UART_write@word+1,f
  3279  1720  3000               	movlw	0
  3280  1721  07F1               	addwf	UART_write@word+1,f
  3281  1722                     l1697:
  3282                           
  3283                           ;bmp.c: 68:     while (*word != 0){
  3284  1722  0871               	movf	UART_write@word+1,w
  3285  1723  1283               	bcf	3,5	;RP0=0, select bank0
  3286  1724  1303               	bcf	3,6	;RP1=0, select bank0
  3287  1725  00FF               	movwf	btemp+1
  3288  1726  0870               	movf	UART_write@word,w
  3289  1727  0084               	movwf	4
  3290  1728  120A  158A  2000  160A  118A  	fcall	stringtab
  3291  172D  3A00               	xorlw	0
  3292  172E  1D03               	skipz
  3293  172F  2F31               	goto	u1681
  3294  1730  2F32               	goto	u1680
  3295  1731                     u1681:
  3296  1731  2F0C               	goto	l1693
  3297  1732                     u1680:
  3298  1732                     l78:
  3299  1732  0008               	return
  3300  1733                     __end_of_UART_write:
  3301                           
  3302                           	psect	text13
  3303  0091                     __ptext13:	
  3304 ;; *************** function _BMP280_readTemperature *****************
  3305 ;; Defined at:
  3306 ;;		line 257 in file "BMP280.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  temp            1    wreg     PTR long 
  3309 ;;		 -> temperature(4), 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  temp            1   42[BANK0 ] PTR long 
  3312 ;;		 -> temperature(4), 
  3313 ;;  var2            4   34[BANK0 ] long 
  3314 ;;  var1            4   30[BANK0 ] long 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  2   32[None  ] int 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3324 ;;      Params:         0       0       0       0       0
  3325 ;;      Locals:         0      17       0       0       0
  3326 ;;      Temps:          0      16       0       0       0
  3327 ;;      Totals:         0      33       0       0       0
  3328 ;;Total ram usage:       33 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    3
  3331 ;; This function calls:
  3332 ;;		_BMP280_Update
  3333 ;;		___aldiv
  3334 ;;		___lmul
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _BMP280_readTemperature
  3342  0091                     _BMP280_readTemperature:
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _BMP280_readTemperature: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3346                           ;BMP280_readTemperature@temp stored from wreg
  3347  0091  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0092  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0093  00CA               	movwf	BMP280_readTemperature@temp
  3350  0094                     l1731:
  3351                           
  3352                           ;BMP280.c: 257: int BMP280_readTemperature(int32_t *temp);BMP280.c: 258: {;BMP280.c: 259
      +                          :   int32_t var1, var2;;BMP280.c: 261:   BMP280_Update();
  3353  0094  120A  158A  2438  120A  118A  	fcall	_BMP280_Update
  3354                           
  3355                           ;BMP280.c: 264:   var1 = ((((adc_T / 8) - ((int32_t)BMP280_calib.dig_T1 * 2))) *
  3356  0099  1683               	bsf	3,5	;RP0=1, select bank1
  3357  009A  1303               	bcf	3,6	;RP1=0, select bank1
  3358  009B  0828               	movf	_BMP280_calib^(0+128),w
  3359  009C  1283               	bcf	3,5	;RP0=0, select bank0
  3360  009D  1303               	bcf	3,6	;RP1=0, select bank0
  3361  009E  00AE               	movwf	??_BMP280_readTemperature
  3362  009F  1683               	bsf	3,5	;RP0=1, select bank1
  3363  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  3364  00A1  0829               	movf	(_BMP280_calib+1)^(0+128),w
  3365  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  3366  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  3367  00A4  00AF               	movwf	??_BMP280_readTemperature+1
  3368  00A5  01B0               	clrf	??_BMP280_readTemperature+2
  3369  00A6  01B1               	clrf	??_BMP280_readTemperature+3
  3370  00A7  3001               	movlw	1
  3371  00A8                     u1715:
  3372  00A8  1003               	clrc
  3373  00A9  0DAE               	rlf	??_BMP280_readTemperature,f
  3374  00AA  0DAF               	rlf	??_BMP280_readTemperature+1,f
  3375  00AB  0DB0               	rlf	??_BMP280_readTemperature+2,f
  3376  00AC  0DB1               	rlf	??_BMP280_readTemperature+3,f
  3377  00AD                     u1710:
  3378  00AD  3EFF               	addlw	-1
  3379  00AE  1D03               	skipz
  3380  00AF  28A8               	goto	u1715
  3381  00B0  3000               	movlw	0
  3382  00B1  00F3               	movwf	___aldiv@divisor+3
  3383  00B2  3000               	movlw	0
  3384  00B3  00F2               	movwf	___aldiv@divisor+2
  3385  00B4  3000               	movlw	0
  3386  00B5  00F1               	movwf	___aldiv@divisor+1
  3387  00B6  3008               	movlw	8
  3388  00B7  00F0               	movwf	___aldiv@divisor
  3389  00B8  0861               	movf	_adc_T+3,w
  3390  00B9  00F7               	movwf	___aldiv@dividend+3
  3391  00BA  0860               	movf	_adc_T+2,w
  3392  00BB  00F6               	movwf	___aldiv@dividend+2
  3393  00BC  085F               	movf	_adc_T+1,w
  3394  00BD  00F5               	movwf	___aldiv@dividend+1
  3395  00BE  085E               	movf	_adc_T,w
  3396  00BF  00F4               	movwf	___aldiv@dividend
  3397  00C0  120A  158A  239B  120A  118A  	fcall	___aldiv
  3398  00C5  0870               	movf	?___aldiv,w
  3399  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  3400  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  3401  00C8  00B2               	movwf	??_BMP280_readTemperature+4
  3402  00C9  0871               	movf	?___aldiv+1,w
  3403  00CA  00B3               	movwf	??_BMP280_readTemperature+5
  3404  00CB  0872               	movf	?___aldiv+2,w
  3405  00CC  00B4               	movwf	??_BMP280_readTemperature+6
  3406  00CD  0873               	movf	?___aldiv+3,w
  3407  00CE  00B5               	movwf	??_BMP280_readTemperature+7
  3408  00CF  082E               	movf	??_BMP280_readTemperature,w
  3409  00D0  02B2               	subwf	??_BMP280_readTemperature+4,f
  3410  00D1  082F               	movf	??_BMP280_readTemperature+1,w
  3411  00D2  1C03               	skipc
  3412  00D3  0F2F               	incfsz	??_BMP280_readTemperature+1,w
  3413  00D4  28D6               	goto	u1721
  3414  00D5  28D7               	goto	u1722
  3415  00D6                     u1721:
  3416  00D6  02B3               	subwf	??_BMP280_readTemperature+5,f
  3417  00D7                     u1722:
  3418  00D7  0830               	movf	??_BMP280_readTemperature+2,w
  3419  00D8  1C03               	skipc
  3420  00D9  0F30               	incfsz	??_BMP280_readTemperature+2,w
  3421  00DA  28DC               	goto	u1723
  3422  00DB  28DD               	goto	u1724
  3423  00DC                     u1723:
  3424  00DC  02B4               	subwf	??_BMP280_readTemperature+6,f
  3425  00DD                     u1724:
  3426  00DD  0831               	movf	??_BMP280_readTemperature+3,w
  3427  00DE  1C03               	skipc
  3428  00DF  0F31               	incfsz	??_BMP280_readTemperature+3,w
  3429  00E0  28E2               	goto	u1725
  3430  00E1  28E3               	goto	u1726
  3431  00E2                     u1725:
  3432  00E2  02B5               	subwf	??_BMP280_readTemperature+7,f
  3433  00E3                     u1726:
  3434  00E3  0835               	movf	??_BMP280_readTemperature+7,w
  3435  00E4  00A9               	movwf	___lmul@multiplier+3
  3436  00E5  0834               	movf	??_BMP280_readTemperature+6,w
  3437  00E6  00A8               	movwf	___lmul@multiplier+2
  3438  00E7  0833               	movf	??_BMP280_readTemperature+5,w
  3439  00E8  00A7               	movwf	___lmul@multiplier+1
  3440  00E9  0832               	movf	??_BMP280_readTemperature+4,w
  3441  00EA  00A6               	movwf	___lmul@multiplier
  3442  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  3443  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  3444  00ED  082A               	movf	(_BMP280_calib^(0+128)+2),w
  3445  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  3446  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  3447  00F0  00AA               	movwf	___lmul@multiplicand
  3448  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  3449  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  3450  00F3  082B               	movf	((_BMP280_calib+1)^(0+128)+2),w
  3451  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  3452  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  3453  00F6  00AB               	movwf	___lmul@multiplicand+1
  3454  00F7  3000               	movlw	0
  3455  00F8  1BAB               	btfsc	___lmul@multiplicand+1,7
  3456  00F9  30FF               	movlw	255
  3457  00FA  00AC               	movwf	___lmul@multiplicand+2
  3458  00FB  00AD               	movwf	___lmul@multiplicand+3
  3459  00FC  120A  158A  218D  120A  118A  	fcall	___lmul
  3460  0101  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0102  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0103  0829               	movf	?___lmul+3,w
  3463  0104  00CE               	movwf	_BMP280_readTemperature$1100+3
  3464  0105  0828               	movf	?___lmul+2,w
  3465  0106  00CD               	movwf	_BMP280_readTemperature$1100+2
  3466  0107  0827               	movf	?___lmul+1,w
  3467  0108  00CC               	movwf	_BMP280_readTemperature$1100+1
  3468  0109  0826               	movf	?___lmul,w
  3469  010A  00CB               	movwf	_BMP280_readTemperature$1100
  3470                           
  3471                           ;BMP280.c: 264:   var1 = ((((adc_T / 8) - ((int32_t)BMP280_calib.dig_T1 * 2))) *
  3472  010B  3000               	movlw	0
  3473  010C  00F3               	movwf	___aldiv@divisor+3
  3474  010D  3000               	movlw	0
  3475  010E  00F2               	movwf	___aldiv@divisor+2
  3476  010F  3008               	movlw	8
  3477  0110  00F1               	movwf	___aldiv@divisor+1
  3478  0111  3000               	movlw	0
  3479  0112  00F0               	movwf	___aldiv@divisor
  3480  0113  084E               	movf	_BMP280_readTemperature$1100+3,w
  3481  0114  00F7               	movwf	___aldiv@dividend+3
  3482  0115  084D               	movf	_BMP280_readTemperature$1100+2,w
  3483  0116  00F6               	movwf	___aldiv@dividend+2
  3484  0117  084C               	movf	_BMP280_readTemperature$1100+1,w
  3485  0118  00F5               	movwf	___aldiv@dividend+1
  3486  0119  084B               	movf	_BMP280_readTemperature$1100,w
  3487  011A  00F4               	movwf	___aldiv@dividend
  3488  011B  120A  158A  239B  120A  118A  	fcall	___aldiv
  3489  0120  0873               	movf	?___aldiv+3,w
  3490  0121  1283               	bcf	3,5	;RP0=0, select bank0
  3491  0122  1303               	bcf	3,6	;RP1=0, select bank0
  3492  0123  00C1               	movwf	BMP280_readTemperature@var1+3
  3493  0124  0872               	movf	?___aldiv+2,w
  3494  0125  00C0               	movwf	BMP280_readTemperature@var1+2
  3495  0126  0871               	movf	?___aldiv+1,w
  3496  0127  00BF               	movwf	BMP280_readTemperature@var1+1
  3497  0128  0870               	movf	?___aldiv,w
  3498  0129  00BE               	movwf	BMP280_readTemperature@var1
  3499                           
  3500                           ;BMP280.c: 267:   var2 = (((((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1)) *
  3501  012A  1683               	bsf	3,5	;RP0=1, select bank1
  3502  012B  1303               	bcf	3,6	;RP1=0, select bank1
  3503  012C  0828               	movf	_BMP280_calib^(0+128),w
  3504  012D  1283               	bcf	3,5	;RP0=0, select bank0
  3505  012E  1303               	bcf	3,6	;RP1=0, select bank0
  3506  012F  00AE               	movwf	??_BMP280_readTemperature
  3507  0130  1683               	bsf	3,5	;RP0=1, select bank1
  3508  0131  1303               	bcf	3,6	;RP1=0, select bank1
  3509  0132  0829               	movf	(_BMP280_calib+1)^(0+128),w
  3510  0133  1283               	bcf	3,5	;RP0=0, select bank0
  3511  0134  1303               	bcf	3,6	;RP1=0, select bank0
  3512  0135  00AF               	movwf	??_BMP280_readTemperature+1
  3513  0136  01B0               	clrf	??_BMP280_readTemperature+2
  3514  0137  01B1               	clrf	??_BMP280_readTemperature+3
  3515  0138  3000               	movlw	0
  3516  0139  00F3               	movwf	___aldiv@divisor+3
  3517  013A  3000               	movlw	0
  3518  013B  00F2               	movwf	___aldiv@divisor+2
  3519  013C  3000               	movlw	0
  3520  013D  00F1               	movwf	___aldiv@divisor+1
  3521  013E  3010               	movlw	16
  3522  013F  00F0               	movwf	___aldiv@divisor
  3523  0140  0861               	movf	_adc_T+3,w
  3524  0141  00F7               	movwf	___aldiv@dividend+3
  3525  0142  0860               	movf	_adc_T+2,w
  3526  0143  00F6               	movwf	___aldiv@dividend+2
  3527  0144  085F               	movf	_adc_T+1,w
  3528  0145  00F5               	movwf	___aldiv@dividend+1
  3529  0146  085E               	movf	_adc_T,w
  3530  0147  00F4               	movwf	___aldiv@dividend
  3531  0148  120A  158A  239B  120A  118A  	fcall	___aldiv
  3532  014D  0870               	movf	?___aldiv,w
  3533  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3534  014F  1303               	bcf	3,6	;RP1=0, select bank0
  3535  0150  00B2               	movwf	??_BMP280_readTemperature+4
  3536  0151  0871               	movf	?___aldiv+1,w
  3537  0152  00B3               	movwf	??_BMP280_readTemperature+5
  3538  0153  0872               	movf	?___aldiv+2,w
  3539  0154  00B4               	movwf	??_BMP280_readTemperature+6
  3540  0155  0873               	movf	?___aldiv+3,w
  3541  0156  00B5               	movwf	??_BMP280_readTemperature+7
  3542  0157  082E               	movf	??_BMP280_readTemperature,w
  3543  0158  02B2               	subwf	??_BMP280_readTemperature+4,f
  3544  0159  082F               	movf	??_BMP280_readTemperature+1,w
  3545  015A  1C03               	skipc
  3546  015B  0F2F               	incfsz	??_BMP280_readTemperature+1,w
  3547  015C  295E               	goto	u1731
  3548  015D  295F               	goto	u1732
  3549  015E                     u1731:
  3550  015E  02B3               	subwf	??_BMP280_readTemperature+5,f
  3551  015F                     u1732:
  3552  015F  0830               	movf	??_BMP280_readTemperature+2,w
  3553  0160  1C03               	skipc
  3554  0161  0F30               	incfsz	??_BMP280_readTemperature+2,w
  3555  0162  2964               	goto	u1733
  3556  0163  2965               	goto	u1734
  3557  0164                     u1733:
  3558  0164  02B4               	subwf	??_BMP280_readTemperature+6,f
  3559  0165                     u1734:
  3560  0165  0831               	movf	??_BMP280_readTemperature+3,w
  3561  0166  1C03               	skipc
  3562  0167  0F31               	incfsz	??_BMP280_readTemperature+3,w
  3563  0168  296A               	goto	u1735
  3564  0169  296B               	goto	u1736
  3565  016A                     u1735:
  3566  016A  02B5               	subwf	??_BMP280_readTemperature+7,f
  3567  016B                     u1736:
  3568  016B  0835               	movf	??_BMP280_readTemperature+7,w
  3569  016C  00A9               	movwf	___lmul@multiplier+3
  3570  016D  0834               	movf	??_BMP280_readTemperature+6,w
  3571  016E  00A8               	movwf	___lmul@multiplier+2
  3572  016F  0833               	movf	??_BMP280_readTemperature+5,w
  3573  0170  00A7               	movwf	___lmul@multiplier+1
  3574  0171  0832               	movf	??_BMP280_readTemperature+4,w
  3575  0172  00A6               	movwf	___lmul@multiplier
  3576  0173  1683               	bsf	3,5	;RP0=1, select bank1
  3577  0174  1303               	bcf	3,6	;RP1=0, select bank1
  3578  0175  0828               	movf	_BMP280_calib^(0+128),w
  3579  0176  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0177  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0178  00B6               	movwf	??_BMP280_readTemperature+8
  3582  0179  1683               	bsf	3,5	;RP0=1, select bank1
  3583  017A  1303               	bcf	3,6	;RP1=0, select bank1
  3584  017B  0829               	movf	(_BMP280_calib+1)^(0+128),w
  3585  017C  1283               	bcf	3,5	;RP0=0, select bank0
  3586  017D  1303               	bcf	3,6	;RP1=0, select bank0
  3587  017E  00B7               	movwf	??_BMP280_readTemperature+9
  3588  017F  01B8               	clrf	??_BMP280_readTemperature+10
  3589  0180  01B9               	clrf	??_BMP280_readTemperature+11
  3590  0181  3000               	movlw	0
  3591  0182  00F3               	movwf	___aldiv@divisor+3
  3592  0183  3000               	movlw	0
  3593  0184  00F2               	movwf	___aldiv@divisor+2
  3594  0185  3000               	movlw	0
  3595  0186  00F1               	movwf	___aldiv@divisor+1
  3596  0187  3010               	movlw	16
  3597  0188  00F0               	movwf	___aldiv@divisor
  3598  0189  0861               	movf	_adc_T+3,w
  3599  018A  00F7               	movwf	___aldiv@dividend+3
  3600  018B  0860               	movf	_adc_T+2,w
  3601  018C  00F6               	movwf	___aldiv@dividend+2
  3602  018D  085F               	movf	_adc_T+1,w
  3603  018E  00F5               	movwf	___aldiv@dividend+1
  3604  018F  085E               	movf	_adc_T,w
  3605  0190  00F4               	movwf	___aldiv@dividend
  3606  0191  120A  158A  239B  120A  118A  	fcall	___aldiv
  3607  0196  0870               	movf	?___aldiv,w
  3608  0197  1283               	bcf	3,5	;RP0=0, select bank0
  3609  0198  1303               	bcf	3,6	;RP1=0, select bank0
  3610  0199  00BA               	movwf	??_BMP280_readTemperature+12
  3611  019A  0871               	movf	?___aldiv+1,w
  3612  019B  00BB               	movwf	??_BMP280_readTemperature+13
  3613  019C  0872               	movf	?___aldiv+2,w
  3614  019D  00BC               	movwf	??_BMP280_readTemperature+14
  3615  019E  0873               	movf	?___aldiv+3,w
  3616  019F  00BD               	movwf	??_BMP280_readTemperature+15
  3617  01A0  0836               	movf	??_BMP280_readTemperature+8,w
  3618  01A1  02BA               	subwf	??_BMP280_readTemperature+12,f
  3619  01A2  0837               	movf	??_BMP280_readTemperature+9,w
  3620  01A3  1C03               	skipc
  3621  01A4  0F37               	incfsz	??_BMP280_readTemperature+9,w
  3622  01A5  29A7               	goto	u1741
  3623  01A6  29A8               	goto	u1742
  3624  01A7                     u1741:
  3625  01A7  02BB               	subwf	??_BMP280_readTemperature+13,f
  3626  01A8                     u1742:
  3627  01A8  0838               	movf	??_BMP280_readTemperature+10,w
  3628  01A9  1C03               	skipc
  3629  01AA  0F38               	incfsz	??_BMP280_readTemperature+10,w
  3630  01AB  29AD               	goto	u1743
  3631  01AC  29AE               	goto	u1744
  3632  01AD                     u1743:
  3633  01AD  02BC               	subwf	??_BMP280_readTemperature+14,f
  3634  01AE                     u1744:
  3635  01AE  0839               	movf	??_BMP280_readTemperature+11,w
  3636  01AF  1C03               	skipc
  3637  01B0  0F39               	incfsz	??_BMP280_readTemperature+11,w
  3638  01B1  29B3               	goto	u1745
  3639  01B2  29B4               	goto	u1746
  3640  01B3                     u1745:
  3641  01B3  02BD               	subwf	??_BMP280_readTemperature+15,f
  3642  01B4                     u1746:
  3643  01B4  083D               	movf	??_BMP280_readTemperature+15,w
  3644  01B5  00AD               	movwf	___lmul@multiplicand+3
  3645  01B6  083C               	movf	??_BMP280_readTemperature+14,w
  3646  01B7  00AC               	movwf	___lmul@multiplicand+2
  3647  01B8  083B               	movf	??_BMP280_readTemperature+13,w
  3648  01B9  00AB               	movwf	___lmul@multiplicand+1
  3649  01BA  083A               	movf	??_BMP280_readTemperature+12,w
  3650  01BB  00AA               	movwf	___lmul@multiplicand
  3651  01BC  120A  158A  218D  120A  118A  	fcall	___lmul
  3652  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  3653  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  3654  01C3  0829               	movf	?___lmul+3,w
  3655  01C4  00CE               	movwf	_BMP280_readTemperature$1100+3
  3656  01C5  0828               	movf	?___lmul+2,w
  3657  01C6  00CD               	movwf	_BMP280_readTemperature$1100+2
  3658  01C7  0827               	movf	?___lmul+1,w
  3659  01C8  00CC               	movwf	_BMP280_readTemperature$1100+1
  3660  01C9  0826               	movf	?___lmul,w
  3661  01CA  00CB               	movwf	_BMP280_readTemperature$1100
  3662                           
  3663                           ;BMP280.c: 267:   var2 = (((((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1)) *
  3664  01CB  3000               	movlw	0
  3665  01CC  00F3               	movwf	___aldiv@divisor+3
  3666  01CD  3000               	movlw	0
  3667  01CE  00F2               	movwf	___aldiv@divisor+2
  3668  01CF  3010               	movlw	16
  3669  01D0  00F1               	movwf	___aldiv@divisor+1
  3670  01D1  3000               	movlw	0
  3671  01D2  00F0               	movwf	___aldiv@divisor
  3672  01D3  084E               	movf	_BMP280_readTemperature$1100+3,w
  3673  01D4  00F7               	movwf	___aldiv@dividend+3
  3674  01D5  084D               	movf	_BMP280_readTemperature$1100+2,w
  3675  01D6  00F6               	movwf	___aldiv@dividend+2
  3676  01D7  084C               	movf	_BMP280_readTemperature$1100+1,w
  3677  01D8  00F5               	movwf	___aldiv@dividend+1
  3678  01D9  084B               	movf	_BMP280_readTemperature$1100,w
  3679  01DA  00F4               	movwf	___aldiv@dividend
  3680  01DB  120A  158A  239B  120A  118A  	fcall	___aldiv
  3681  01E0  0873               	movf	?___aldiv+3,w
  3682  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  3683  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  3684  01E3  00A9               	movwf	___lmul@multiplier+3
  3685  01E4  0872               	movf	?___aldiv+2,w
  3686  01E5  00A8               	movwf	___lmul@multiplier+2
  3687  01E6  0871               	movf	?___aldiv+1,w
  3688  01E7  00A7               	movwf	___lmul@multiplier+1
  3689  01E8  0870               	movf	?___aldiv,w
  3690  01E9  00A6               	movwf	___lmul@multiplier
  3691  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  3692  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  3693  01EC  082C               	movf	(_BMP280_calib^(0+128)+4),w
  3694  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  3695  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  3696  01EF  00AA               	movwf	___lmul@multiplicand
  3697  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  3698  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  3699  01F2  082D               	movf	((_BMP280_calib+1)^(0+128)+4),w
  3700  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3701  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  3702  01F5  00AB               	movwf	___lmul@multiplicand+1
  3703  01F6  3000               	movlw	0
  3704  01F7  1BAB               	btfsc	___lmul@multiplicand+1,7
  3705  01F8  30FF               	movlw	255
  3706  01F9  00AC               	movwf	___lmul@multiplicand+2
  3707  01FA  00AD               	movwf	___lmul@multiplicand+3
  3708  01FB  120A  158A  218D  120A  118A  	fcall	___lmul
  3709  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0201  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0202  0829               	movf	?___lmul+3,w
  3712  0203  00C9               	movwf	_BMP280_readTemperature$1101+3
  3713  0204  0828               	movf	?___lmul+2,w
  3714  0205  00C8               	movwf	_BMP280_readTemperature$1101+2
  3715  0206  0827               	movf	?___lmul+1,w
  3716  0207  00C7               	movwf	_BMP280_readTemperature$1101+1
  3717  0208  0826               	movf	?___lmul,w
  3718  0209  00C6               	movwf	_BMP280_readTemperature$1101
  3719                           
  3720                           ;BMP280.c: 267:   var2 = (((((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1)) *
  3721  020A  3000               	movlw	0
  3722  020B  00F3               	movwf	___aldiv@divisor+3
  3723  020C  3000               	movlw	0
  3724  020D  00F2               	movwf	___aldiv@divisor+2
  3725  020E  3040               	movlw	64
  3726  020F  00F1               	movwf	___aldiv@divisor+1
  3727  0210  3000               	movlw	0
  3728  0211  00F0               	movwf	___aldiv@divisor
  3729  0212  0849               	movf	_BMP280_readTemperature$1101+3,w
  3730  0213  00F7               	movwf	___aldiv@dividend+3
  3731  0214  0848               	movf	_BMP280_readTemperature$1101+2,w
  3732  0215  00F6               	movwf	___aldiv@dividend+2
  3733  0216  0847               	movf	_BMP280_readTemperature$1101+1,w
  3734  0217  00F5               	movwf	___aldiv@dividend+1
  3735  0218  0846               	movf	_BMP280_readTemperature$1101,w
  3736  0219  00F4               	movwf	___aldiv@dividend
  3737  021A  120A  158A  239B  120A  118A  	fcall	___aldiv
  3738  021F  0873               	movf	?___aldiv+3,w
  3739  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3740  0221  1303               	bcf	3,6	;RP1=0, select bank0
  3741  0222  00C5               	movwf	BMP280_readTemperature@var2+3
  3742  0223  0872               	movf	?___aldiv+2,w
  3743  0224  00C4               	movwf	BMP280_readTemperature@var2+2
  3744  0225  0871               	movf	?___aldiv+1,w
  3745  0226  00C3               	movwf	BMP280_readTemperature@var2+1
  3746  0227  0870               	movf	?___aldiv,w
  3747  0228  00C2               	movwf	BMP280_readTemperature@var2
  3748  0229                     l1733:
  3749                           
  3750                           ;BMP280.c: 271:   t_fine = var1 + var2;
  3751  0229  083E               	movf	BMP280_readTemperature@var1,w
  3752  022A  0742               	addwf	BMP280_readTemperature@var2,w
  3753  022B  00AE               	movwf	??_BMP280_readTemperature
  3754  022C  3000               	movlw	0
  3755  022D  1803               	skipnc
  3756  022E  3001               	movlw	1
  3757  022F  073F               	addwf	BMP280_readTemperature@var1+1,w
  3758  0230  01B0               	clrf	??_BMP280_readTemperature+2
  3759  0231  1803               	skipnc
  3760  0232  0AB0               	incf	??_BMP280_readTemperature+2,f
  3761  0233  0743               	addwf	BMP280_readTemperature@var2+1,w
  3762  0234  00AF               	movwf	??_BMP280_readTemperature+1
  3763  0235  1803               	skipnc
  3764  0236  0AB0               	incf	??_BMP280_readTemperature+2,f
  3765  0237  0840               	movf	BMP280_readTemperature@var1+2,w
  3766  0238  0730               	addwf	??_BMP280_readTemperature+2,w
  3767  0239  01B1               	clrf	??_BMP280_readTemperature+3
  3768  023A  1803               	skipnc
  3769  023B  0AB1               	incf	??_BMP280_readTemperature+3,f
  3770  023C  0744               	addwf	BMP280_readTemperature@var2+2,w
  3771  023D  00B0               	movwf	??_BMP280_readTemperature+2
  3772  023E  1803               	skipnc
  3773  023F  0AB1               	incf	??_BMP280_readTemperature+3,f
  3774  0240  0841               	movf	BMP280_readTemperature@var1+3,w
  3775  0241  0731               	addwf	??_BMP280_readTemperature+3,w
  3776  0242  0745               	addwf	BMP280_readTemperature@var2+3,w
  3777  0243  00B1               	movwf	??_BMP280_readTemperature+3
  3778  0244  0831               	movf	??_BMP280_readTemperature+3,w
  3779  0245  1683               	bsf	3,5	;RP0=1, select bank1
  3780  0246  1303               	bcf	3,6	;RP1=0, select bank1
  3781  0247  00A3               	movwf	(_t_fine+3)^(0+128)
  3782  0248  1283               	bcf	3,5	;RP0=0, select bank0
  3783  0249  1303               	bcf	3,6	;RP1=0, select bank0
  3784  024A  0830               	movf	??_BMP280_readTemperature+2,w
  3785  024B  1683               	bsf	3,5	;RP0=1, select bank1
  3786  024C  1303               	bcf	3,6	;RP1=0, select bank1
  3787  024D  00A2               	movwf	(_t_fine+2)^(0+128)
  3788  024E  1283               	bcf	3,5	;RP0=0, select bank0
  3789  024F  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0250  082F               	movf	??_BMP280_readTemperature+1,w
  3791  0251  1683               	bsf	3,5	;RP0=1, select bank1
  3792  0252  1303               	bcf	3,6	;RP1=0, select bank1
  3793  0253  00A1               	movwf	(_t_fine+1)^(0+128)
  3794  0254  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0255  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0256  082E               	movf	??_BMP280_readTemperature,w
  3797  0257  1683               	bsf	3,5	;RP0=1, select bank1
  3798  0258  1303               	bcf	3,6	;RP1=0, select bank1
  3799  0259  00A0               	movwf	_t_fine^(0+128)
  3800  025A                     l1735:
  3801                           
  3802                           ;BMP280.c: 273:   *temp = (t_fine * 5 + 128) / 256;
  3803  025A  3000               	movlw	0
  3804  025B  00F3               	movwf	___aldiv@divisor+3
  3805  025C  3000               	movlw	0
  3806  025D  00F2               	movwf	___aldiv@divisor+2
  3807  025E  3001               	movlw	1
  3808  025F  00F1               	movwf	___aldiv@divisor+1
  3809  0260  3000               	movlw	0
  3810  0261  00F0               	movwf	___aldiv@divisor
  3811  0262  3080               	movlw	128
  3812  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0265  00AE               	movwf	??_BMP280_readTemperature
  3815  0266  3000               	movlw	0
  3816  0267  00AF               	movwf	??_BMP280_readTemperature+1
  3817  0268  3000               	movlw	0
  3818  0269  00B0               	movwf	??_BMP280_readTemperature+2
  3819  026A  3000               	movlw	0
  3820  026B  00B1               	movwf	??_BMP280_readTemperature+3
  3821  026C  1683               	bsf	3,5	;RP0=1, select bank1
  3822  026D  1303               	bcf	3,6	;RP1=0, select bank1
  3823  026E  0823               	movf	(_t_fine+3)^(0+128),w
  3824  026F  1283               	bcf	3,5	;RP0=0, select bank0
  3825  0270  1303               	bcf	3,6	;RP1=0, select bank0
  3826  0271  00A9               	movwf	___lmul@multiplier+3
  3827  0272  1683               	bsf	3,5	;RP0=1, select bank1
  3828  0273  1303               	bcf	3,6	;RP1=0, select bank1
  3829  0274  0822               	movf	(_t_fine+2)^(0+128),w
  3830  0275  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0276  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0277  00A8               	movwf	___lmul@multiplier+2
  3833  0278  1683               	bsf	3,5	;RP0=1, select bank1
  3834  0279  1303               	bcf	3,6	;RP1=0, select bank1
  3835  027A  0821               	movf	(_t_fine+1)^(0+128),w
  3836  027B  1283               	bcf	3,5	;RP0=0, select bank0
  3837  027C  1303               	bcf	3,6	;RP1=0, select bank0
  3838  027D  00A7               	movwf	___lmul@multiplier+1
  3839  027E  1683               	bsf	3,5	;RP0=1, select bank1
  3840  027F  1303               	bcf	3,6	;RP1=0, select bank1
  3841  0280  0820               	movf	_t_fine^(0+128),w
  3842  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0283  00A6               	movwf	___lmul@multiplier
  3845  0284  3000               	movlw	0
  3846  0285  00AD               	movwf	___lmul@multiplicand+3
  3847  0286  3000               	movlw	0
  3848  0287  00AC               	movwf	___lmul@multiplicand+2
  3849  0288  3000               	movlw	0
  3850  0289  00AB               	movwf	___lmul@multiplicand+1
  3851  028A  3005               	movlw	5
  3852  028B  00AA               	movwf	___lmul@multiplicand
  3853  028C  120A  158A  218D  120A  118A  	fcall	___lmul
  3854  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3855  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3856  0293  0826               	movf	?___lmul,w
  3857  0294  07AE               	addwf	??_BMP280_readTemperature,f
  3858  0295  0827               	movf	?___lmul+1,w
  3859  0296  1803               	skipnc
  3860  0297  0F27               	incfsz	?___lmul+1,w
  3861  0298  2A9A               	goto	u1750
  3862  0299  2A9B               	goto	u1751
  3863  029A                     u1750:
  3864  029A  07AF               	addwf	??_BMP280_readTemperature+1,f
  3865  029B                     u1751:
  3866  029B  0828               	movf	?___lmul+2,w
  3867  029C  1803               	skipnc
  3868  029D  0F28               	incfsz	?___lmul+2,w
  3869  029E  2AA0               	goto	u1752
  3870  029F  2AA1               	goto	u1753
  3871  02A0                     u1752:
  3872  02A0  07B0               	addwf	??_BMP280_readTemperature+2,f
  3873  02A1                     u1753:
  3874  02A1  0829               	movf	?___lmul+3,w
  3875  02A2  1803               	skipnc
  3876  02A3  0A29               	incf	?___lmul+3,w
  3877  02A4  07B1               	addwf	??_BMP280_readTemperature+3,f
  3878  02A5  0831               	movf	??_BMP280_readTemperature+3,w
  3879  02A6  00F7               	movwf	___aldiv@dividend+3
  3880  02A7  0830               	movf	??_BMP280_readTemperature+2,w
  3881  02A8  00F6               	movwf	___aldiv@dividend+2
  3882  02A9  082F               	movf	??_BMP280_readTemperature+1,w
  3883  02AA  00F5               	movwf	___aldiv@dividend+1
  3884  02AB  082E               	movf	??_BMP280_readTemperature,w
  3885  02AC  00F4               	movwf	___aldiv@dividend
  3886  02AD  120A  158A  239B  120A  118A  	fcall	___aldiv
  3887  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  3888  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  3889  02B4  084A               	movf	BMP280_readTemperature@temp,w
  3890  02B5  0084               	movwf	4
  3891  02B6  0870               	movf	?___aldiv,w
  3892  02B7  1383               	bcf	3,7	;select IRP bank0
  3893  02B8  0080               	movwf	0
  3894  02B9  0A84               	incf	4,f
  3895  02BA  0871               	movf	?___aldiv+1,w
  3896  02BB  0080               	movwf	0
  3897  02BC  0A84               	incf	4,f
  3898  02BD  0872               	movf	?___aldiv+2,w
  3899  02BE  0080               	movwf	0
  3900  02BF  0A84               	incf	4,f
  3901  02C0  0873               	movf	?___aldiv+3,w
  3902  02C1  0080               	movwf	0
  3903  02C2                     l203:
  3904  02C2  0008               	return
  3905  02C3                     __end_of_BMP280_readTemperature:
  3906                           
  3907                           	psect	text14
  3908  0C38                     __ptext14:	
  3909 ;; *************** function _BMP280_Update *****************
  3910 ;; Defined at:
  3911 ;;		line 226 in file "BMP280.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  ret             4   10[COMMON] struct .
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, pclath, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3925 ;;      Params:         0       0       0       0       0
  3926 ;;      Locals:         4       0       0       0       0
  3927 ;;      Temps:          4       0       0       0       0
  3928 ;;      Totals:         8       0       0       0       0
  3929 ;;Total ram usage:        8 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    2
  3932 ;; This function calls:
  3933 ;;		_I2C_Master_Read
  3934 ;;		_I2C_Master_Start
  3935 ;;		_I2C_Master_Stop
  3936 ;;		_I2C_Master_Write
  3937 ;; This function is called by:
  3938 ;;		_BMP280_readTemperature
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _BMP280_Update
  3944  0C38                     _BMP280_Update:
  3945  0C38                     l1559:	
  3946                           ;incstack = 0
  3947                           ; Regs used in _BMP280_Update: [wreg+status,2+status,0+pclath+cstack]
  3948                           
  3949                           
  3950                           ;BMP280.c: 232:   } ret;;BMP280.c: 233:   ret.b[3] = 0x00;
  3951  0C38  01FD               	clrf	BMP280_Update@ret+3
  3952  0C39                     l1561:
  3953                           
  3954                           ;BMP280.c: 235:   I2C_Master_Start();
  3955  0C39  160A  118A  26C4  120A  158A  	fcall	_I2C_Master_Start
  3956  0C3E                     l1563:
  3957                           
  3958                           ;BMP280.c: 236:   I2C_Master_Write(0xEE);
  3959  0C3E  30EE               	movlw	238
  3960  0C3F  00F0               	movwf	I2C_Master_Write@d
  3961  0C40  3000               	movlw	0
  3962  0C41  00F1               	movwf	I2C_Master_Write@d+1
  3963  0C42  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  3964  0C47                     l1565:
  3965                           
  3966                           ;BMP280.c: 237:   I2C_Master_Write(0xF7);
  3967  0C47  30F7               	movlw	247
  3968  0C48  00F0               	movwf	I2C_Master_Write@d
  3969  0C49  3000               	movlw	0
  3970  0C4A  00F1               	movwf	I2C_Master_Write@d+1
  3971  0C4B  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  3972  0C50                     l1567:
  3973                           
  3974                           ;BMP280.c: 238:   I2C_Master_Start();
  3975  0C50  160A  118A  26C4  120A  158A  	fcall	_I2C_Master_Start
  3976  0C55                     l1569:
  3977                           
  3978                           ;BMP280.c: 239:   I2C_Master_Write(0xEE | 1);
  3979  0C55  30EF               	movlw	239
  3980  0C56  00F0               	movwf	I2C_Master_Write@d
  3981  0C57  3000               	movlw	0
  3982  0C58  00F1               	movwf	I2C_Master_Write@d+1
  3983  0C59  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  3984  0C5E                     l1571:
  3985                           
  3986                           ;BMP280.c: 240:   ret.b[2] = I2C_Master_Read(1);
  3987  0C5E  3001               	movlw	1
  3988  0C5F  00F0               	movwf	I2C_Master_Read@a
  3989  0C60  3000               	movlw	0
  3990  0C61  00F1               	movwf	I2C_Master_Read@a+1
  3991  0C62  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  3992  0C67  0870               	movf	?_I2C_Master_Read,w
  3993  0C68  00F6               	movwf	??_BMP280_Update
  3994  0C69  0876               	movf	??_BMP280_Update,w
  3995  0C6A  00FC               	movwf	BMP280_Update@ret+2
  3996  0C6B                     l1573:
  3997                           
  3998                           ;BMP280.c: 241:   ret.b[1] = I2C_Master_Read(1);
  3999  0C6B  3001               	movlw	1
  4000  0C6C  00F0               	movwf	I2C_Master_Read@a
  4001  0C6D  3000               	movlw	0
  4002  0C6E  00F1               	movwf	I2C_Master_Read@a+1
  4003  0C6F  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  4004  0C74  0870               	movf	?_I2C_Master_Read,w
  4005  0C75  00F6               	movwf	??_BMP280_Update
  4006  0C76  0876               	movf	??_BMP280_Update,w
  4007  0C77  00FB               	movwf	BMP280_Update@ret+1
  4008  0C78                     l1575:
  4009                           
  4010                           ;BMP280.c: 242:   ret.b[0] = I2C_Master_Read(1);
  4011  0C78  3001               	movlw	1
  4012  0C79  00F0               	movwf	I2C_Master_Read@a
  4013  0C7A  3000               	movlw	0
  4014  0C7B  00F1               	movwf	I2C_Master_Read@a+1
  4015  0C7C  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  4016  0C81  0870               	movf	?_I2C_Master_Read,w
  4017  0C82  00F6               	movwf	??_BMP280_Update
  4018  0C83  0876               	movf	??_BMP280_Update,w
  4019  0C84  00FA               	movwf	BMP280_Update@ret
  4020  0C85                     l1577:
  4021                           
  4022                           ;BMP280.c: 244:   adc_P = (ret.dw >> 4) & 0xFFFFF;
  4023  0C85  087A               	movf	BMP280_Update@ret,w
  4024  0C86  00F6               	movwf	??_BMP280_Update
  4025  0C87  087B               	movf	BMP280_Update@ret+1,w
  4026  0C88  00F7               	movwf	??_BMP280_Update+1
  4027  0C89  087C               	movf	BMP280_Update@ret+2,w
  4028  0C8A  00F8               	movwf	??_BMP280_Update+2
  4029  0C8B  087D               	movf	BMP280_Update@ret+3,w
  4030  0C8C  00F9               	movwf	??_BMP280_Update+3
  4031  0C8D  3004               	movlw	4
  4032  0C8E                     u1375:
  4033  0C8E  1003               	clrc
  4034  0C8F  0CF9               	rrf	??_BMP280_Update+3,f
  4035  0C90  0CF8               	rrf	??_BMP280_Update+2,f
  4036  0C91  0CF7               	rrf	??_BMP280_Update+1,f
  4037  0C92  0CF6               	rrf	??_BMP280_Update,f
  4038  0C93                     u1370:
  4039  0C93  3EFF               	addlw	-1
  4040  0C94  1D03               	skipz
  4041  0C95  2C8E               	goto	u1375
  4042  0C96  30FF               	movlw	255
  4043  0C97  0576               	andwf	??_BMP280_Update,w
  4044  0C98  1683               	bsf	3,5	;RP0=1, select bank1
  4045  0C99  1303               	bcf	3,6	;RP1=0, select bank1
  4046  0C9A  00A4               	movwf	_adc_P^(0+128)
  4047  0C9B  30FF               	movlw	255
  4048  0C9C  0577               	andwf	??_BMP280_Update+1,w
  4049  0C9D  00A5               	movwf	(_adc_P+1)^(0+128)
  4050  0C9E  300F               	movlw	15
  4051  0C9F  0578               	andwf	??_BMP280_Update+2,w
  4052  0CA0  00A6               	movwf	(_adc_P+2)^(0+128)
  4053  0CA1  3000               	movlw	0
  4054  0CA2  0579               	andwf	??_BMP280_Update+3,w
  4055  0CA3  00A7               	movwf	(_adc_P+3)^(0+128)
  4056  0CA4                     l1579:
  4057                           
  4058                           ;BMP280.c: 246:   ret.b[2] = I2C_Master_Read(1);
  4059  0CA4  3001               	movlw	1
  4060  0CA5  00F0               	movwf	I2C_Master_Read@a
  4061  0CA6  3000               	movlw	0
  4062  0CA7  00F1               	movwf	I2C_Master_Read@a+1
  4063  0CA8  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  4064  0CAD  0870               	movf	?_I2C_Master_Read,w
  4065  0CAE  00F6               	movwf	??_BMP280_Update
  4066  0CAF  0876               	movf	??_BMP280_Update,w
  4067  0CB0  00FC               	movwf	BMP280_Update@ret+2
  4068  0CB1                     l1581:
  4069                           
  4070                           ;BMP280.c: 247:   ret.b[1] = I2C_Master_Read(1);
  4071  0CB1  3001               	movlw	1
  4072  0CB2  00F0               	movwf	I2C_Master_Read@a
  4073  0CB3  3000               	movlw	0
  4074  0CB4  00F1               	movwf	I2C_Master_Read@a+1
  4075  0CB5  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  4076  0CBA  0870               	movf	?_I2C_Master_Read,w
  4077  0CBB  00F6               	movwf	??_BMP280_Update
  4078  0CBC  0876               	movf	??_BMP280_Update,w
  4079  0CBD  00FB               	movwf	BMP280_Update@ret+1
  4080  0CBE                     l1583:
  4081                           
  4082                           ;BMP280.c: 248:   ret.b[0] = I2C_Master_Read(0);
  4083  0CBE  3000               	movlw	0
  4084  0CBF  00F0               	movwf	I2C_Master_Read@a
  4085  0CC0  00F1               	movwf	I2C_Master_Read@a+1
  4086  0CC1  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  4087  0CC6  0870               	movf	?_I2C_Master_Read,w
  4088  0CC7  00F6               	movwf	??_BMP280_Update
  4089  0CC8  0876               	movf	??_BMP280_Update,w
  4090  0CC9  00FA               	movwf	BMP280_Update@ret
  4091  0CCA                     l1585:
  4092                           
  4093                           ;BMP280.c: 249:   I2C_Master_Stop();
  4094  0CCA  120A  118A  2003  120A  158A  	fcall	_I2C_Master_Stop
  4095  0CCF                     l1587:
  4096                           
  4097                           ;BMP280.c: 251:   adc_T = (ret.dw >> 4) & 0xFFFFF;
  4098  0CCF  087A               	movf	BMP280_Update@ret,w
  4099  0CD0  00F6               	movwf	??_BMP280_Update
  4100  0CD1  087B               	movf	BMP280_Update@ret+1,w
  4101  0CD2  00F7               	movwf	??_BMP280_Update+1
  4102  0CD3  087C               	movf	BMP280_Update@ret+2,w
  4103  0CD4  00F8               	movwf	??_BMP280_Update+2
  4104  0CD5  087D               	movf	BMP280_Update@ret+3,w
  4105  0CD6  00F9               	movwf	??_BMP280_Update+3
  4106  0CD7  3004               	movlw	4
  4107  0CD8                     u1385:
  4108  0CD8  1003               	clrc
  4109  0CD9  0CF9               	rrf	??_BMP280_Update+3,f
  4110  0CDA  0CF8               	rrf	??_BMP280_Update+2,f
  4111  0CDB  0CF7               	rrf	??_BMP280_Update+1,f
  4112  0CDC  0CF6               	rrf	??_BMP280_Update,f
  4113  0CDD                     u1380:
  4114  0CDD  3EFF               	addlw	-1
  4115  0CDE  1D03               	skipz
  4116  0CDF  2CD8               	goto	u1385
  4117  0CE0  30FF               	movlw	255
  4118  0CE1  0576               	andwf	??_BMP280_Update,w
  4119  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  4121  0CE4  00DE               	movwf	_adc_T
  4122  0CE5  30FF               	movlw	255
  4123  0CE6  0577               	andwf	??_BMP280_Update+1,w
  4124  0CE7  00DF               	movwf	_adc_T+1
  4125  0CE8  300F               	movlw	15
  4126  0CE9  0578               	andwf	??_BMP280_Update+2,w
  4127  0CEA  00E0               	movwf	_adc_T+2
  4128  0CEB  3000               	movlw	0
  4129  0CEC  0579               	andwf	??_BMP280_Update+3,w
  4130  0CED  00E1               	movwf	_adc_T+3
  4131  0CEE                     l200:
  4132  0CEE  0008               	return
  4133  0CEF                     __end_of_BMP280_Update:
  4134                           
  4135                           	psect	text15
  4136  02C3                     __ptext15:	
  4137 ;; *************** function _BMP280_readPressure *****************
  4138 ;; Defined at:
  4139 ;;		line 281 in file "BMP280.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  pres            1    wreg     PTR unsigned long 
  4142 ;;		 -> pressure(4), 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  pres            1   42[BANK0 ] PTR unsigned long 
  4145 ;;		 -> pressure(4), 
  4146 ;;  var1            4   55[BANK0 ] long 
  4147 ;;  p               4   51[BANK0 ] unsigned long 
  4148 ;;  var2            4   47[BANK0 ] long 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  2   34[None  ] int 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4158 ;;      Params:         0       0       0       0       0
  4159 ;;      Locals:         0      29       0       0       0
  4160 ;;      Temps:          0      16       0       0       0
  4161 ;;      Totals:         0      45       0       0       0
  4162 ;;Total ram usage:       45 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    1
  4165 ;; This function calls:
  4166 ;;		___aldiv
  4167 ;;		___lldiv
  4168 ;;		___lmul
  4169 ;; This function is called by:
  4170 ;;		_main
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           
  4175                           ;psect for function _BMP280_readPressure
  4176  02C3                     _BMP280_readPressure:
  4177                           
  4178                           ;incstack = 0
  4179                           ; Regs used in _BMP280_readPressure: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4180                           ;BMP280_readPressure@pres stored from wreg
  4181  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  4182  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  4183  02C5  00CA               	movwf	BMP280_readPressure@pres
  4184  02C6                     l1739:
  4185                           
  4186                           ;BMP280.c: 281: int BMP280_readPressure(uint32_t *pres);BMP280.c: 282: {;BMP280.c: 283: 
      +                            int32_t var1, var2;;BMP280.c: 284:   uint32_t p;;BMP280.c: 287:   var1 = (((int32_t)t_
      +                          fine) / 2) - (int32_t)64000;
  4187  02C6  3000               	movlw	0
  4188  02C7  00AE               	movwf	??_BMP280_readPressure
  4189  02C8  3006               	movlw	6
  4190  02C9  00AF               	movwf	??_BMP280_readPressure+1
  4191  02CA  30FF               	movlw	255
  4192  02CB  00B0               	movwf	??_BMP280_readPressure+2
  4193  02CC  30FF               	movlw	255
  4194  02CD  00B1               	movwf	??_BMP280_readPressure+3
  4195  02CE  3000               	movlw	0
  4196  02CF  00F3               	movwf	___aldiv@divisor+3
  4197  02D0  3000               	movlw	0
  4198  02D1  00F2               	movwf	___aldiv@divisor+2
  4199  02D2  3000               	movlw	0
  4200  02D3  00F1               	movwf	___aldiv@divisor+1
  4201  02D4  3002               	movlw	2
  4202  02D5  00F0               	movwf	___aldiv@divisor
  4203  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  4204  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  4205  02D8  0823               	movf	(_t_fine+3)^(0+128),w
  4206  02D9  00F7               	movwf	___aldiv@dividend+3
  4207  02DA  0822               	movf	(_t_fine+2)^(0+128),w
  4208  02DB  00F6               	movwf	___aldiv@dividend+2
  4209  02DC  0821               	movf	(_t_fine+1)^(0+128),w
  4210  02DD  00F5               	movwf	___aldiv@dividend+1
  4211  02DE  0820               	movf	_t_fine^(0+128),w
  4212  02DF  00F4               	movwf	___aldiv@dividend
  4213  02E0  120A  158A  239B  120A  118A  	fcall	___aldiv
  4214  02E5  0870               	movf	?___aldiv,w
  4215  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  4216  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  4217  02E8  07AE               	addwf	??_BMP280_readPressure,f
  4218  02E9  0871               	movf	?___aldiv+1,w
  4219  02EA  1803               	skipnc
  4220  02EB  0F71               	incfsz	?___aldiv+1,w
  4221  02EC  2AEE               	goto	u1760
  4222  02ED  2AEF               	goto	u1761
  4223  02EE                     u1760:
  4224  02EE  07AF               	addwf	??_BMP280_readPressure+1,f
  4225  02EF                     u1761:
  4226  02EF  0872               	movf	?___aldiv+2,w
  4227  02F0  1803               	skipnc
  4228  02F1  0F72               	incfsz	?___aldiv+2,w
  4229  02F2  2AF4               	goto	u1762
  4230  02F3  2AF5               	goto	u1763
  4231  02F4                     u1762:
  4232  02F4  07B0               	addwf	??_BMP280_readPressure+2,f
  4233  02F5                     u1763:
  4234  02F5  0873               	movf	?___aldiv+3,w
  4235  02F6  1803               	skipnc
  4236  02F7  0A73               	incf	?___aldiv+3,w
  4237  02F8  07B1               	addwf	??_BMP280_readPressure+3,f
  4238  02F9  0831               	movf	??_BMP280_readPressure+3,w
  4239  02FA  00DA               	movwf	BMP280_readPressure@var1+3
  4240  02FB  0830               	movf	??_BMP280_readPressure+2,w
  4241  02FC  00D9               	movwf	BMP280_readPressure@var1+2
  4242  02FD  082F               	movf	??_BMP280_readPressure+1,w
  4243  02FE  00D8               	movwf	BMP280_readPressure@var1+1
  4244  02FF  082E               	movf	??_BMP280_readPressure,w
  4245  0300  00D7               	movwf	BMP280_readPressure@var1
  4246                           
  4247                           ;BMP280.c: 288:   var2 = (((var1/4) * (var1/4)) / 2048 ) * ((int32_t)BMP280_calib.dig_P6
      +                          );
  4248  0301  3000               	movlw	0
  4249  0302  00F3               	movwf	___aldiv@divisor+3
  4250  0303  3000               	movlw	0
  4251  0304  00F2               	movwf	___aldiv@divisor+2
  4252  0305  3000               	movlw	0
  4253  0306  00F1               	movwf	___aldiv@divisor+1
  4254  0307  3004               	movlw	4
  4255  0308  00F0               	movwf	___aldiv@divisor
  4256  0309  085A               	movf	BMP280_readPressure@var1+3,w
  4257  030A  00F7               	movwf	___aldiv@dividend+3
  4258  030B  0859               	movf	BMP280_readPressure@var1+2,w
  4259  030C  00F6               	movwf	___aldiv@dividend+2
  4260  030D  0858               	movf	BMP280_readPressure@var1+1,w
  4261  030E  00F5               	movwf	___aldiv@dividend+1
  4262  030F  0857               	movf	BMP280_readPressure@var1,w
  4263  0310  00F4               	movwf	___aldiv@dividend
  4264  0311  120A  158A  239B  120A  118A  	fcall	___aldiv
  4265  0316  0873               	movf	?___aldiv+3,w
  4266  0317  1283               	bcf	3,5	;RP0=0, select bank0
  4267  0318  1303               	bcf	3,6	;RP1=0, select bank0
  4268  0319  00A9               	movwf	___lmul@multiplier+3
  4269  031A  0872               	movf	?___aldiv+2,w
  4270  031B  00A8               	movwf	___lmul@multiplier+2
  4271  031C  0871               	movf	?___aldiv+1,w
  4272  031D  00A7               	movwf	___lmul@multiplier+1
  4273  031E  0870               	movf	?___aldiv,w
  4274  031F  00A6               	movwf	___lmul@multiplier
  4275  0320  3000               	movlw	0
  4276  0321  00F3               	movwf	___aldiv@divisor+3
  4277  0322  3000               	movlw	0
  4278  0323  00F2               	movwf	___aldiv@divisor+2
  4279  0324  3000               	movlw	0
  4280  0325  00F1               	movwf	___aldiv@divisor+1
  4281  0326  3004               	movlw	4
  4282  0327  00F0               	movwf	___aldiv@divisor
  4283  0328  085A               	movf	BMP280_readPressure@var1+3,w
  4284  0329  00F7               	movwf	___aldiv@dividend+3
  4285  032A  0859               	movf	BMP280_readPressure@var1+2,w
  4286  032B  00F6               	movwf	___aldiv@dividend+2
  4287  032C  0858               	movf	BMP280_readPressure@var1+1,w
  4288  032D  00F5               	movwf	___aldiv@dividend+1
  4289  032E  0857               	movf	BMP280_readPressure@var1,w
  4290  032F  00F4               	movwf	___aldiv@dividend
  4291  0330  120A  158A  239B  120A  118A  	fcall	___aldiv
  4292  0335  0873               	movf	?___aldiv+3,w
  4293  0336  1283               	bcf	3,5	;RP0=0, select bank0
  4294  0337  1303               	bcf	3,6	;RP1=0, select bank0
  4295  0338  00AD               	movwf	___lmul@multiplicand+3
  4296  0339  0872               	movf	?___aldiv+2,w
  4297  033A  00AC               	movwf	___lmul@multiplicand+2
  4298  033B  0871               	movf	?___aldiv+1,w
  4299  033C  00AB               	movwf	___lmul@multiplicand+1
  4300  033D  0870               	movf	?___aldiv,w
  4301  033E  00AA               	movwf	___lmul@multiplicand
  4302  033F  120A  158A  218D  120A  118A  	fcall	___lmul
  4303  0344  1283               	bcf	3,5	;RP0=0, select bank0
  4304  0345  1303               	bcf	3,6	;RP1=0, select bank0
  4305  0346  0829               	movf	?___lmul+3,w
  4306  0347  00CE               	movwf	_BMP280_readPressure$1102+3
  4307  0348  0828               	movf	?___lmul+2,w
  4308  0349  00CD               	movwf	_BMP280_readPressure$1102+2
  4309  034A  0827               	movf	?___lmul+1,w
  4310  034B  00CC               	movwf	_BMP280_readPressure$1102+1
  4311  034C  0826               	movf	?___lmul,w
  4312  034D  00CB               	movwf	_BMP280_readPressure$1102
  4313                           
  4314                           ;BMP280.c: 288:   var2 = (((var1/4) * (var1/4)) / 2048 ) * ((int32_t)BMP280_calib.dig_P6
      +                          );
  4315  034E  3000               	movlw	0
  4316  034F  00F3               	movwf	___aldiv@divisor+3
  4317  0350  3000               	movlw	0
  4318  0351  00F2               	movwf	___aldiv@divisor+2
  4319  0352  3008               	movlw	8
  4320  0353  00F1               	movwf	___aldiv@divisor+1
  4321  0354  3000               	movlw	0
  4322  0355  00F0               	movwf	___aldiv@divisor
  4323  0356  084E               	movf	_BMP280_readPressure$1102+3,w
  4324  0357  00F7               	movwf	___aldiv@dividend+3
  4325  0358  084D               	movf	_BMP280_readPressure$1102+2,w
  4326  0359  00F6               	movwf	___aldiv@dividend+2
  4327  035A  084C               	movf	_BMP280_readPressure$1102+1,w
  4328  035B  00F5               	movwf	___aldiv@dividend+1
  4329  035C  084B               	movf	_BMP280_readPressure$1102,w
  4330  035D  00F4               	movwf	___aldiv@dividend
  4331  035E  120A  158A  239B  120A  118A  	fcall	___aldiv
  4332  0363  0873               	movf	?___aldiv+3,w
  4333  0364  1283               	bcf	3,5	;RP0=0, select bank0
  4334  0365  1303               	bcf	3,6	;RP1=0, select bank0
  4335  0366  00A9               	movwf	___lmul@multiplier+3
  4336  0367  0872               	movf	?___aldiv+2,w
  4337  0368  00A8               	movwf	___lmul@multiplier+2
  4338  0369  0871               	movf	?___aldiv+1,w
  4339  036A  00A7               	movwf	___lmul@multiplier+1
  4340  036B  0870               	movf	?___aldiv,w
  4341  036C  00A6               	movwf	___lmul@multiplier
  4342  036D  1683               	bsf	3,5	;RP0=1, select bank1
  4343  036E  1303               	bcf	3,6	;RP1=0, select bank1
  4344  036F  0838               	movf	(_BMP280_calib^(0+128)+16),w
  4345  0370  1283               	bcf	3,5	;RP0=0, select bank0
  4346  0371  1303               	bcf	3,6	;RP1=0, select bank0
  4347  0372  00AA               	movwf	___lmul@multiplicand
  4348  0373  1683               	bsf	3,5	;RP0=1, select bank1
  4349  0374  1303               	bcf	3,6	;RP1=0, select bank1
  4350  0375  0839               	movf	((_BMP280_calib+1)^(0+128)+16),w
  4351  0376  1283               	bcf	3,5	;RP0=0, select bank0
  4352  0377  1303               	bcf	3,6	;RP1=0, select bank0
  4353  0378  00AB               	movwf	___lmul@multiplicand+1
  4354  0379  3000               	movlw	0
  4355  037A  1BAB               	btfsc	___lmul@multiplicand+1,7
  4356  037B  30FF               	movlw	255
  4357  037C  00AC               	movwf	___lmul@multiplicand+2
  4358  037D  00AD               	movwf	___lmul@multiplicand+3
  4359  037E  120A  158A  218D  120A  118A  	fcall	___lmul
  4360  0383  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0384  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0385  0829               	movf	?___lmul+3,w
  4363  0386  00D2               	movwf	BMP280_readPressure@var2+3
  4364  0387  0828               	movf	?___lmul+2,w
  4365  0388  00D1               	movwf	BMP280_readPressure@var2+2
  4366  0389  0827               	movf	?___lmul+1,w
  4367  038A  00D0               	movwf	BMP280_readPressure@var2+1
  4368  038B  0826               	movf	?___lmul,w
  4369  038C  00CF               	movwf	BMP280_readPressure@var2
  4370                           
  4371                           ;BMP280.c: 290:   var2 = var2 + ((var1 * ((int32_t)BMP280_calib.dig_P5)) * 2);
  4372  038D  084F               	movf	BMP280_readPressure@var2,w
  4373  038E  00AE               	movwf	??_BMP280_readPressure
  4374  038F  0850               	movf	BMP280_readPressure@var2+1,w
  4375  0390  00AF               	movwf	??_BMP280_readPressure+1
  4376  0391  0851               	movf	BMP280_readPressure@var2+2,w
  4377  0392  00B0               	movwf	??_BMP280_readPressure+2
  4378  0393  0852               	movf	BMP280_readPressure@var2+3,w
  4379  0394  00B1               	movwf	??_BMP280_readPressure+3
  4380  0395  1683               	bsf	3,5	;RP0=1, select bank1
  4381  0396  1303               	bcf	3,6	;RP1=0, select bank1
  4382  0397  0836               	movf	(_BMP280_calib^(0+128)+14),w
  4383  0398  1283               	bcf	3,5	;RP0=0, select bank0
  4384  0399  1303               	bcf	3,6	;RP1=0, select bank0
  4385  039A  00A6               	movwf	___lmul@multiplier
  4386  039B  1683               	bsf	3,5	;RP0=1, select bank1
  4387  039C  1303               	bcf	3,6	;RP1=0, select bank1
  4388  039D  0837               	movf	((_BMP280_calib+1)^(0+128)+14),w
  4389  039E  1283               	bcf	3,5	;RP0=0, select bank0
  4390  039F  1303               	bcf	3,6	;RP1=0, select bank0
  4391  03A0  00A7               	movwf	___lmul@multiplier+1
  4392  03A1  3000               	movlw	0
  4393  03A2  1BA7               	btfsc	___lmul@multiplier+1,7
  4394  03A3  30FF               	movlw	255
  4395  03A4  00A8               	movwf	___lmul@multiplier+2
  4396  03A5  00A9               	movwf	___lmul@multiplier+3
  4397  03A6  085A               	movf	BMP280_readPressure@var1+3,w
  4398  03A7  00AD               	movwf	___lmul@multiplicand+3
  4399  03A8  0859               	movf	BMP280_readPressure@var1+2,w
  4400  03A9  00AC               	movwf	___lmul@multiplicand+2
  4401  03AA  0858               	movf	BMP280_readPressure@var1+1,w
  4402  03AB  00AB               	movwf	___lmul@multiplicand+1
  4403  03AC  0857               	movf	BMP280_readPressure@var1,w
  4404  03AD  00AA               	movwf	___lmul@multiplicand
  4405  03AE  120A  158A  218D  120A  118A  	fcall	___lmul
  4406  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  4407  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  4408  03B5  0826               	movf	?___lmul,w
  4409  03B6  00B2               	movwf	??_BMP280_readPressure+4
  4410  03B7  0827               	movf	?___lmul+1,w
  4411  03B8  00B3               	movwf	??_BMP280_readPressure+5
  4412  03B9  0828               	movf	?___lmul+2,w
  4413  03BA  00B4               	movwf	??_BMP280_readPressure+6
  4414  03BB  0829               	movf	?___lmul+3,w
  4415  03BC  00B5               	movwf	??_BMP280_readPressure+7
  4416  03BD  3001               	movlw	1
  4417  03BE                     u1775:
  4418  03BE  1003               	clrc
  4419  03BF  0DB2               	rlf	??_BMP280_readPressure+4,f
  4420  03C0  0DB3               	rlf	??_BMP280_readPressure+5,f
  4421  03C1  0DB4               	rlf	??_BMP280_readPressure+6,f
  4422  03C2  0DB5               	rlf	??_BMP280_readPressure+7,f
  4423  03C3                     u1770:
  4424  03C3  3EFF               	addlw	-1
  4425  03C4  1D03               	skipz
  4426  03C5  2BBE               	goto	u1775
  4427  03C6  0832               	movf	??_BMP280_readPressure+4,w
  4428  03C7  07AE               	addwf	??_BMP280_readPressure,f
  4429  03C8  0833               	movf	??_BMP280_readPressure+5,w
  4430  03C9  1803               	skipnc
  4431  03CA  0F33               	incfsz	??_BMP280_readPressure+5,w
  4432  03CB  2BCD               	goto	u1780
  4433  03CC  2BCE               	goto	u1781
  4434  03CD                     u1780:
  4435  03CD  07AF               	addwf	??_BMP280_readPressure+1,f
  4436  03CE                     u1781:
  4437  03CE  0834               	movf	??_BMP280_readPressure+6,w
  4438  03CF  1803               	skipnc
  4439  03D0  0F34               	incfsz	??_BMP280_readPressure+6,w
  4440  03D1  2BD3               	goto	u1782
  4441  03D2  2BD4               	goto	u1783
  4442  03D3                     u1782:
  4443  03D3  07B0               	addwf	??_BMP280_readPressure+2,f
  4444  03D4                     u1783:
  4445  03D4  0835               	movf	??_BMP280_readPressure+7,w
  4446  03D5  1803               	skipnc
  4447  03D6  0A35               	incf	??_BMP280_readPressure+7,w
  4448  03D7  07B1               	addwf	??_BMP280_readPressure+3,f
  4449  03D8  0831               	movf	??_BMP280_readPressure+3,w
  4450  03D9  00D2               	movwf	BMP280_readPressure@var2+3
  4451  03DA  0830               	movf	??_BMP280_readPressure+2,w
  4452  03DB  00D1               	movwf	BMP280_readPressure@var2+2
  4453  03DC  082F               	movf	??_BMP280_readPressure+1,w
  4454  03DD  00D0               	movwf	BMP280_readPressure@var2+1
  4455  03DE  082E               	movf	??_BMP280_readPressure,w
  4456  03DF  00CF               	movwf	BMP280_readPressure@var2
  4457                           
  4458                           ;BMP280.c: 291:   var2 = (var2/4) + (((int32_t)BMP280_calib.dig_P4) * 65536);
  4459  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  4460  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  4461  03E2  0834               	movf	(_BMP280_calib^(0+128)+12),w
  4462  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  4463  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  4464  03E5  00AE               	movwf	??_BMP280_readPressure
  4465  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  4466  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  4467  03E8  0835               	movf	((_BMP280_calib+1)^(0+128)+12),w
  4468  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  4469  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  4470  03EB  00AF               	movwf	??_BMP280_readPressure+1
  4471  03EC  01B0               	clrf	??_BMP280_readPressure+2
  4472  03ED  01B1               	clrf	??_BMP280_readPressure+3
  4473  03EE  3010               	movlw	16
  4474  03EF                     u1795:
  4475  03EF  1003               	clrc
  4476  03F0  0DAE               	rlf	??_BMP280_readPressure,f
  4477  03F1  0DAF               	rlf	??_BMP280_readPressure+1,f
  4478  03F2  0DB0               	rlf	??_BMP280_readPressure+2,f
  4479  03F3  0DB1               	rlf	??_BMP280_readPressure+3,f
  4480  03F4                     u1790:
  4481  03F4  3EFF               	addlw	-1
  4482  03F5  1D03               	skipz
  4483  03F6  2BEF               	goto	u1795
  4484  03F7  3000               	movlw	0
  4485  03F8  00F3               	movwf	___aldiv@divisor+3
  4486  03F9  3000               	movlw	0
  4487  03FA  00F2               	movwf	___aldiv@divisor+2
  4488  03FB  3000               	movlw	0
  4489  03FC  00F1               	movwf	___aldiv@divisor+1
  4490  03FD  3004               	movlw	4
  4491  03FE  00F0               	movwf	___aldiv@divisor
  4492  03FF  0852               	movf	BMP280_readPressure@var2+3,w
  4493  0400  00F7               	movwf	___aldiv@dividend+3
  4494  0401  0851               	movf	BMP280_readPressure@var2+2,w
  4495  0402  00F6               	movwf	___aldiv@dividend+2
  4496  0403  0850               	movf	BMP280_readPressure@var2+1,w
  4497  0404  00F5               	movwf	___aldiv@dividend+1
  4498  0405  084F               	movf	BMP280_readPressure@var2,w
  4499  0406  00F4               	movwf	___aldiv@dividend
  4500  0407  120A  158A  239B  120A  118A  	fcall	___aldiv
  4501  040C  0870               	movf	?___aldiv,w
  4502  040D  1283               	bcf	3,5	;RP0=0, select bank0
  4503  040E  1303               	bcf	3,6	;RP1=0, select bank0
  4504  040F  07AE               	addwf	??_BMP280_readPressure,f
  4505  0410  0871               	movf	?___aldiv+1,w
  4506  0411  1803               	skipnc
  4507  0412  0F71               	incfsz	?___aldiv+1,w
  4508  0413  2C15               	goto	u1800
  4509  0414  2C16               	goto	u1801
  4510  0415                     u1800:
  4511  0415  07AF               	addwf	??_BMP280_readPressure+1,f
  4512  0416                     u1801:
  4513  0416  0872               	movf	?___aldiv+2,w
  4514  0417  1803               	skipnc
  4515  0418  0F72               	incfsz	?___aldiv+2,w
  4516  0419  2C1B               	goto	u1802
  4517  041A  2C1C               	goto	u1803
  4518  041B                     u1802:
  4519  041B  07B0               	addwf	??_BMP280_readPressure+2,f
  4520  041C                     u1803:
  4521  041C  0873               	movf	?___aldiv+3,w
  4522  041D  1803               	skipnc
  4523  041E  0A73               	incf	?___aldiv+3,w
  4524  041F  07B1               	addwf	??_BMP280_readPressure+3,f
  4525  0420  0831               	movf	??_BMP280_readPressure+3,w
  4526  0421  00D2               	movwf	BMP280_readPressure@var2+3
  4527  0422  0830               	movf	??_BMP280_readPressure+2,w
  4528  0423  00D1               	movwf	BMP280_readPressure@var2+2
  4529  0424  082F               	movf	??_BMP280_readPressure+1,w
  4530  0425  00D0               	movwf	BMP280_readPressure@var2+1
  4531  0426  082E               	movf	??_BMP280_readPressure,w
  4532  0427  00CF               	movwf	BMP280_readPressure@var2
  4533                           
  4534                           ;BMP280.c: 293:   var1 = ((((int32_t)BMP280_calib.dig_P3 * (((var1/4) * (var1/4)) / 8192
      +                           )) / 8) +
  4535  0428  3000               	movlw	0
  4536  0429  00F3               	movwf	___aldiv@divisor+3
  4537  042A  3000               	movlw	0
  4538  042B  00F2               	movwf	___aldiv@divisor+2
  4539  042C  3000               	movlw	0
  4540  042D  00F1               	movwf	___aldiv@divisor+1
  4541  042E  3004               	movlw	4
  4542  042F  00F0               	movwf	___aldiv@divisor
  4543  0430  085A               	movf	BMP280_readPressure@var1+3,w
  4544  0431  00F7               	movwf	___aldiv@dividend+3
  4545  0432  0859               	movf	BMP280_readPressure@var1+2,w
  4546  0433  00F6               	movwf	___aldiv@dividend+2
  4547  0434  0858               	movf	BMP280_readPressure@var1+1,w
  4548  0435  00F5               	movwf	___aldiv@dividend+1
  4549  0436  0857               	movf	BMP280_readPressure@var1,w
  4550  0437  00F4               	movwf	___aldiv@dividend
  4551  0438  120A  158A  239B  120A  118A  	fcall	___aldiv
  4552  043D  0873               	movf	?___aldiv+3,w
  4553  043E  1283               	bcf	3,5	;RP0=0, select bank0
  4554  043F  1303               	bcf	3,6	;RP1=0, select bank0
  4555  0440  00A9               	movwf	___lmul@multiplier+3
  4556  0441  0872               	movf	?___aldiv+2,w
  4557  0442  00A8               	movwf	___lmul@multiplier+2
  4558  0443  0871               	movf	?___aldiv+1,w
  4559  0444  00A7               	movwf	___lmul@multiplier+1
  4560  0445  0870               	movf	?___aldiv,w
  4561  0446  00A6               	movwf	___lmul@multiplier
  4562  0447  3000               	movlw	0
  4563  0448  00F3               	movwf	___aldiv@divisor+3
  4564  0449  3000               	movlw	0
  4565  044A  00F2               	movwf	___aldiv@divisor+2
  4566  044B  3000               	movlw	0
  4567  044C  00F1               	movwf	___aldiv@divisor+1
  4568  044D  3004               	movlw	4
  4569  044E  00F0               	movwf	___aldiv@divisor
  4570  044F  085A               	movf	BMP280_readPressure@var1+3,w
  4571  0450  00F7               	movwf	___aldiv@dividend+3
  4572  0451  0859               	movf	BMP280_readPressure@var1+2,w
  4573  0452  00F6               	movwf	___aldiv@dividend+2
  4574  0453  0858               	movf	BMP280_readPressure@var1+1,w
  4575  0454  00F5               	movwf	___aldiv@dividend+1
  4576  0455  0857               	movf	BMP280_readPressure@var1,w
  4577  0456  00F4               	movwf	___aldiv@dividend
  4578  0457  120A  158A  239B  120A  118A  	fcall	___aldiv
  4579  045C  0873               	movf	?___aldiv+3,w
  4580  045D  1283               	bcf	3,5	;RP0=0, select bank0
  4581  045E  1303               	bcf	3,6	;RP1=0, select bank0
  4582  045F  00AD               	movwf	___lmul@multiplicand+3
  4583  0460  0872               	movf	?___aldiv+2,w
  4584  0461  00AC               	movwf	___lmul@multiplicand+2
  4585  0462  0871               	movf	?___aldiv+1,w
  4586  0463  00AB               	movwf	___lmul@multiplicand+1
  4587  0464  0870               	movf	?___aldiv,w
  4588  0465  00AA               	movwf	___lmul@multiplicand
  4589  0466  120A  158A  218D  120A  118A  	fcall	___lmul
  4590  046B  1283               	bcf	3,5	;RP0=0, select bank0
  4591  046C  1303               	bcf	3,6	;RP1=0, select bank0
  4592  046D  0829               	movf	?___lmul+3,w
  4593  046E  00CE               	movwf	_BMP280_readPressure$1102+3
  4594  046F  0828               	movf	?___lmul+2,w
  4595  0470  00CD               	movwf	_BMP280_readPressure$1102+2
  4596  0471  0827               	movf	?___lmul+1,w
  4597  0472  00CC               	movwf	_BMP280_readPressure$1102+1
  4598  0473  0826               	movf	?___lmul,w
  4599  0474  00CB               	movwf	_BMP280_readPressure$1102
  4600                           
  4601                           ;BMP280.c: 293:   var1 = ((((int32_t)BMP280_calib.dig_P3 * (((var1/4) * (var1/4)) / 8192
      +                           )) / 8) +
  4602  0475  1683               	bsf	3,5	;RP0=1, select bank1
  4603  0476  1303               	bcf	3,6	;RP1=0, select bank1
  4604  0477  0832               	movf	(_BMP280_calib^(0+128)+10),w
  4605  0478  1283               	bcf	3,5	;RP0=0, select bank0
  4606  0479  1303               	bcf	3,6	;RP1=0, select bank0
  4607  047A  00A6               	movwf	___lmul@multiplier
  4608  047B  1683               	bsf	3,5	;RP0=1, select bank1
  4609  047C  1303               	bcf	3,6	;RP1=0, select bank1
  4610  047D  0833               	movf	((_BMP280_calib+1)^(0+128)+10),w
  4611  047E  1283               	bcf	3,5	;RP0=0, select bank0
  4612  047F  1303               	bcf	3,6	;RP1=0, select bank0
  4613  0480  00A7               	movwf	___lmul@multiplier+1
  4614  0481  3000               	movlw	0
  4615  0482  1BA7               	btfsc	___lmul@multiplier+1,7
  4616  0483  30FF               	movlw	255
  4617  0484  00A8               	movwf	___lmul@multiplier+2
  4618  0485  00A9               	movwf	___lmul@multiplier+3
  4619  0486  3000               	movlw	0
  4620  0487  00F3               	movwf	___aldiv@divisor+3
  4621  0488  3000               	movlw	0
  4622  0489  00F2               	movwf	___aldiv@divisor+2
  4623  048A  3020               	movlw	32
  4624  048B  00F1               	movwf	___aldiv@divisor+1
  4625  048C  3000               	movlw	0
  4626  048D  00F0               	movwf	___aldiv@divisor
  4627  048E  084E               	movf	_BMP280_readPressure$1102+3,w
  4628  048F  00F7               	movwf	___aldiv@dividend+3
  4629  0490  084D               	movf	_BMP280_readPressure$1102+2,w
  4630  0491  00F6               	movwf	___aldiv@dividend+2
  4631  0492  084C               	movf	_BMP280_readPressure$1102+1,w
  4632  0493  00F5               	movwf	___aldiv@dividend+1
  4633  0494  084B               	movf	_BMP280_readPressure$1102,w
  4634  0495  00F4               	movwf	___aldiv@dividend
  4635  0496  120A  158A  239B  120A  118A  	fcall	___aldiv
  4636  049B  0873               	movf	?___aldiv+3,w
  4637  049C  1283               	bcf	3,5	;RP0=0, select bank0
  4638  049D  1303               	bcf	3,6	;RP1=0, select bank0
  4639  049E  00AD               	movwf	___lmul@multiplicand+3
  4640  049F  0872               	movf	?___aldiv+2,w
  4641  04A0  00AC               	movwf	___lmul@multiplicand+2
  4642  04A1  0871               	movf	?___aldiv+1,w
  4643  04A2  00AB               	movwf	___lmul@multiplicand+1
  4644  04A3  0870               	movf	?___aldiv,w
  4645  04A4  00AA               	movwf	___lmul@multiplicand
  4646  04A5  120A  158A  218D  120A  118A  	fcall	___lmul
  4647  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  4648  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  4649  04AC  0829               	movf	?___lmul+3,w
  4650  04AD  00C1               	movwf	_BMP280_readPressure$1103+3
  4651  04AE  0828               	movf	?___lmul+2,w
  4652  04AF  00C0               	movwf	_BMP280_readPressure$1103+2
  4653  04B0  0827               	movf	?___lmul+1,w
  4654  04B1  00BF               	movwf	_BMP280_readPressure$1103+1
  4655  04B2  0826               	movf	?___lmul,w
  4656  04B3  00BE               	movwf	_BMP280_readPressure$1103
  4657                           
  4658                           ;BMP280.c: 293:   var1 = ((((int32_t)BMP280_calib.dig_P3 * (((var1/4) * (var1/4)) / 8192
      +                           )) / 8) +
  4659  04B4  3000               	movlw	0
  4660  04B5  00F3               	movwf	___aldiv@divisor+3
  4661  04B6  3000               	movlw	0
  4662  04B7  00F2               	movwf	___aldiv@divisor+2
  4663  04B8  3000               	movlw	0
  4664  04B9  00F1               	movwf	___aldiv@divisor+1
  4665  04BA  3002               	movlw	2
  4666  04BB  00F0               	movwf	___aldiv@divisor
  4667  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  4668  04BD  1303               	bcf	3,6	;RP1=0, select bank1
  4669  04BE  0830               	movf	(_BMP280_calib^(0+128)+8),w
  4670  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  4671  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  4672  04C1  00A6               	movwf	___lmul@multiplier
  4673  04C2  1683               	bsf	3,5	;RP0=1, select bank1
  4674  04C3  1303               	bcf	3,6	;RP1=0, select bank1
  4675  04C4  0831               	movf	((_BMP280_calib+1)^(0+128)+8),w
  4676  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  4677  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  4678  04C7  00A7               	movwf	___lmul@multiplier+1
  4679  04C8  3000               	movlw	0
  4680  04C9  1BA7               	btfsc	___lmul@multiplier+1,7
  4681  04CA  30FF               	movlw	255
  4682  04CB  00A8               	movwf	___lmul@multiplier+2
  4683  04CC  00A9               	movwf	___lmul@multiplier+3
  4684  04CD  085A               	movf	BMP280_readPressure@var1+3,w
  4685  04CE  00AD               	movwf	___lmul@multiplicand+3
  4686  04CF  0859               	movf	BMP280_readPressure@var1+2,w
  4687  04D0  00AC               	movwf	___lmul@multiplicand+2
  4688  04D1  0858               	movf	BMP280_readPressure@var1+1,w
  4689  04D2  00AB               	movwf	___lmul@multiplicand+1
  4690  04D3  0857               	movf	BMP280_readPressure@var1,w
  4691  04D4  00AA               	movwf	___lmul@multiplicand
  4692  04D5  120A  158A  218D  120A  118A  	fcall	___lmul
  4693  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  4694  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  4695  04DC  0829               	movf	?___lmul+3,w
  4696  04DD  00F7               	movwf	___aldiv@dividend+3
  4697  04DE  0828               	movf	?___lmul+2,w
  4698  04DF  00F6               	movwf	___aldiv@dividend+2
  4699  04E0  0827               	movf	?___lmul+1,w
  4700  04E1  00F5               	movwf	___aldiv@dividend+1
  4701  04E2  0826               	movf	?___lmul,w
  4702  04E3  00F4               	movwf	___aldiv@dividend
  4703  04E4  120A  158A  239B  120A  118A  	fcall	___aldiv
  4704  04E9  0870               	movf	?___aldiv,w
  4705  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  4706  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  4707  04EC  00AE               	movwf	??_BMP280_readPressure
  4708  04ED  0871               	movf	?___aldiv+1,w
  4709  04EE  00AF               	movwf	??_BMP280_readPressure+1
  4710  04EF  0872               	movf	?___aldiv+2,w
  4711  04F0  00B0               	movwf	??_BMP280_readPressure+2
  4712  04F1  0873               	movf	?___aldiv+3,w
  4713  04F2  00B1               	movwf	??_BMP280_readPressure+3
  4714  04F3  3000               	movlw	0
  4715  04F4  00F3               	movwf	___aldiv@divisor+3
  4716  04F5  3000               	movlw	0
  4717  04F6  00F2               	movwf	___aldiv@divisor+2
  4718  04F7  3000               	movlw	0
  4719  04F8  00F1               	movwf	___aldiv@divisor+1
  4720  04F9  3008               	movlw	8
  4721  04FA  00F0               	movwf	___aldiv@divisor
  4722  04FB  0841               	movf	_BMP280_readPressure$1103+3,w
  4723  04FC  00F7               	movwf	___aldiv@dividend+3
  4724  04FD  0840               	movf	_BMP280_readPressure$1103+2,w
  4725  04FE  00F6               	movwf	___aldiv@dividend+2
  4726  04FF  083F               	movf	_BMP280_readPressure$1103+1,w
  4727  0500  00F5               	movwf	___aldiv@dividend+1
  4728  0501  083E               	movf	_BMP280_readPressure$1103,w
  4729  0502  00F4               	movwf	___aldiv@dividend
  4730  0503  120A  158A  239B  120A  118A  	fcall	___aldiv
  4731  0508  0870               	movf	?___aldiv,w
  4732  0509  1283               	bcf	3,5	;RP0=0, select bank0
  4733  050A  1303               	bcf	3,6	;RP1=0, select bank0
  4734  050B  07AE               	addwf	??_BMP280_readPressure,f
  4735  050C  0871               	movf	?___aldiv+1,w
  4736  050D  1803               	skipnc
  4737  050E  0F71               	incfsz	?___aldiv+1,w
  4738  050F  2D11               	goto	u1810
  4739  0510  2D12               	goto	u1811
  4740  0511                     u1810:
  4741  0511  07AF               	addwf	??_BMP280_readPressure+1,f
  4742  0512                     u1811:
  4743  0512  0872               	movf	?___aldiv+2,w
  4744  0513  1803               	skipnc
  4745  0514  0F72               	incfsz	?___aldiv+2,w
  4746  0515  2D17               	goto	u1812
  4747  0516  2D18               	goto	u1813
  4748  0517                     u1812:
  4749  0517  07B0               	addwf	??_BMP280_readPressure+2,f
  4750  0518                     u1813:
  4751  0518  0873               	movf	?___aldiv+3,w
  4752  0519  1803               	skipnc
  4753  051A  0A73               	incf	?___aldiv+3,w
  4754  051B  07B1               	addwf	??_BMP280_readPressure+3,f
  4755  051C  0831               	movf	??_BMP280_readPressure+3,w
  4756  051D  00C5               	movwf	_BMP280_readPressure$1104+3
  4757  051E  0830               	movf	??_BMP280_readPressure+2,w
  4758  051F  00C4               	movwf	_BMP280_readPressure$1104+2
  4759  0520  082F               	movf	??_BMP280_readPressure+1,w
  4760  0521  00C3               	movwf	_BMP280_readPressure$1104+1
  4761  0522  082E               	movf	??_BMP280_readPressure,w
  4762  0523  00C2               	movwf	_BMP280_readPressure$1104
  4763                           
  4764                           ;BMP280.c: 293:   var1 = ((((int32_t)BMP280_calib.dig_P3 * (((var1/4) * (var1/4)) / 8192
      +                           )) / 8) +
  4765  0524  3000               	movlw	0
  4766  0525  00F3               	movwf	___aldiv@divisor+3
  4767  0526  3004               	movlw	4
  4768  0527  00F2               	movwf	___aldiv@divisor+2
  4769  0528  3000               	movlw	0
  4770  0529  00F1               	movwf	___aldiv@divisor+1
  4771  052A  3000               	movlw	0
  4772  052B  00F0               	movwf	___aldiv@divisor
  4773  052C  0845               	movf	_BMP280_readPressure$1104+3,w
  4774  052D  00F7               	movwf	___aldiv@dividend+3
  4775  052E  0844               	movf	_BMP280_readPressure$1104+2,w
  4776  052F  00F6               	movwf	___aldiv@dividend+2
  4777  0530  0843               	movf	_BMP280_readPressure$1104+1,w
  4778  0531  00F5               	movwf	___aldiv@dividend+1
  4779  0532  0842               	movf	_BMP280_readPressure$1104,w
  4780  0533  00F4               	movwf	___aldiv@dividend
  4781  0534  120A  158A  239B  120A  118A  	fcall	___aldiv
  4782  0539  0873               	movf	?___aldiv+3,w
  4783  053A  1283               	bcf	3,5	;RP0=0, select bank0
  4784  053B  1303               	bcf	3,6	;RP1=0, select bank0
  4785  053C  00DA               	movwf	BMP280_readPressure@var1+3
  4786  053D  0872               	movf	?___aldiv+2,w
  4787  053E  00D9               	movwf	BMP280_readPressure@var1+2
  4788  053F  0871               	movf	?___aldiv+1,w
  4789  0540  00D8               	movwf	BMP280_readPressure@var1+1
  4790  0541  0870               	movf	?___aldiv,w
  4791  0542  00D7               	movwf	BMP280_readPressure@var1
  4792                           
  4793                           ;BMP280.c: 296:   var1 =((((32768 + var1)) * ((int32_t)BMP280_calib.dig_P1)) / 32768);
  4794  0543  3000               	movlw	0
  4795  0544  00F3               	movwf	___aldiv@divisor+3
  4796  0545  3000               	movlw	0
  4797  0546  00F2               	movwf	___aldiv@divisor+2
  4798  0547  3080               	movlw	128
  4799  0548  00F1               	movwf	___aldiv@divisor+1
  4800  0549  3000               	movlw	0
  4801  054A  00F0               	movwf	___aldiv@divisor
  4802  054B  3000               	movlw	0
  4803  054C  00AE               	movwf	??_BMP280_readPressure
  4804  054D  3080               	movlw	128
  4805  054E  00AF               	movwf	??_BMP280_readPressure+1
  4806  054F  3000               	movlw	0
  4807  0550  00B0               	movwf	??_BMP280_readPressure+2
  4808  0551  3000               	movlw	0
  4809  0552  00B1               	movwf	??_BMP280_readPressure+3
  4810  0553  0857               	movf	BMP280_readPressure@var1,w
  4811  0554  07AE               	addwf	??_BMP280_readPressure,f
  4812  0555  0858               	movf	BMP280_readPressure@var1+1,w
  4813  0556  1803               	skipnc
  4814  0557  0F58               	incfsz	BMP280_readPressure@var1+1,w
  4815  0558  2D5A               	goto	u1820
  4816  0559  2D5B               	goto	u1821
  4817  055A                     u1820:
  4818  055A  07AF               	addwf	??_BMP280_readPressure+1,f
  4819  055B                     u1821:
  4820  055B  0859               	movf	BMP280_readPressure@var1+2,w
  4821  055C  1803               	skipnc
  4822  055D  0F59               	incfsz	BMP280_readPressure@var1+2,w
  4823  055E  2D60               	goto	u1822
  4824  055F  2D61               	goto	u1823
  4825  0560                     u1822:
  4826  0560  07B0               	addwf	??_BMP280_readPressure+2,f
  4827  0561                     u1823:
  4828  0561  085A               	movf	BMP280_readPressure@var1+3,w
  4829  0562  1803               	skipnc
  4830  0563  0A5A               	incf	BMP280_readPressure@var1+3,w
  4831  0564  07B1               	addwf	??_BMP280_readPressure+3,f
  4832  0565  0831               	movf	??_BMP280_readPressure+3,w
  4833  0566  00A9               	movwf	___lmul@multiplier+3
  4834  0567  0830               	movf	??_BMP280_readPressure+2,w
  4835  0568  00A8               	movwf	___lmul@multiplier+2
  4836  0569  082F               	movf	??_BMP280_readPressure+1,w
  4837  056A  00A7               	movwf	___lmul@multiplier+1
  4838  056B  082E               	movf	??_BMP280_readPressure,w
  4839  056C  00A6               	movwf	___lmul@multiplier
  4840  056D  1683               	bsf	3,5	;RP0=1, select bank1
  4841  056E  1303               	bcf	3,6	;RP1=0, select bank1
  4842  056F  082E               	movf	(_BMP280_calib^(0+128)+6),w
  4843  0570  1283               	bcf	3,5	;RP0=0, select bank0
  4844  0571  1303               	bcf	3,6	;RP1=0, select bank0
  4845  0572  00AA               	movwf	___lmul@multiplicand
  4846  0573  1683               	bsf	3,5	;RP0=1, select bank1
  4847  0574  1303               	bcf	3,6	;RP1=0, select bank1
  4848  0575  082F               	movf	((_BMP280_calib+1)^(0+128)+6),w
  4849  0576  1283               	bcf	3,5	;RP0=0, select bank0
  4850  0577  1303               	bcf	3,6	;RP1=0, select bank0
  4851  0578  00AB               	movwf	___lmul@multiplicand+1
  4852  0579  01AC               	clrf	___lmul@multiplicand+2
  4853  057A  01AD               	clrf	___lmul@multiplicand+3
  4854  057B  120A  158A  218D  120A  118A  	fcall	___lmul
  4855  0580  1283               	bcf	3,5	;RP0=0, select bank0
  4856  0581  1303               	bcf	3,6	;RP1=0, select bank0
  4857  0582  0829               	movf	?___lmul+3,w
  4858  0583  00F7               	movwf	___aldiv@dividend+3
  4859  0584  0828               	movf	?___lmul+2,w
  4860  0585  00F6               	movwf	___aldiv@dividend+2
  4861  0586  0827               	movf	?___lmul+1,w
  4862  0587  00F5               	movwf	___aldiv@dividend+1
  4863  0588  0826               	movf	?___lmul,w
  4864  0589  00F4               	movwf	___aldiv@dividend
  4865  058A  120A  158A  239B  120A  118A  	fcall	___aldiv
  4866  058F  0873               	movf	?___aldiv+3,w
  4867  0590  1283               	bcf	3,5	;RP0=0, select bank0
  4868  0591  1303               	bcf	3,6	;RP1=0, select bank0
  4869  0592  00DA               	movwf	BMP280_readPressure@var1+3
  4870  0593  0872               	movf	?___aldiv+2,w
  4871  0594  00D9               	movwf	BMP280_readPressure@var1+2
  4872  0595  0871               	movf	?___aldiv+1,w
  4873  0596  00D8               	movwf	BMP280_readPressure@var1+1
  4874  0597  0870               	movf	?___aldiv,w
  4875  0598  00D7               	movwf	BMP280_readPressure@var1
  4876  0599                     l1741:
  4877                           
  4878                           ;BMP280.c: 298:   if (var1 == 0)
  4879  0599  085A               	movf	BMP280_readPressure@var1+3,w
  4880  059A  0459               	iorwf	BMP280_readPressure@var1+2,w
  4881  059B  0458               	iorwf	BMP280_readPressure@var1+1,w
  4882  059C  0457               	iorwf	BMP280_readPressure@var1,w
  4883  059D  1D03               	skipz
  4884  059E  2DA0               	goto	u1831
  4885  059F  2DA1               	goto	u1830
  4886  05A0                     u1831:
  4887  05A0  2DA2               	goto	l1745
  4888  05A1                     u1830:
  4889  05A1  2FEA               	goto	l207
  4890  05A2                     l1745:
  4891                           
  4892                           ;BMP280.c: 301:   p = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 / 4096))) * 3125;
  4893  05A2  3000               	movlw	0
  4894  05A3  00AE               	movwf	??_BMP280_readPressure
  4895  05A4  3000               	movlw	0
  4896  05A5  00AF               	movwf	??_BMP280_readPressure+1
  4897  05A6  3010               	movlw	16
  4898  05A7  00B0               	movwf	??_BMP280_readPressure+2
  4899  05A8  3000               	movlw	0
  4900  05A9  00B1               	movwf	??_BMP280_readPressure+3
  4901  05AA  3000               	movlw	0
  4902  05AB  00F3               	movwf	___aldiv@divisor+3
  4903  05AC  3000               	movlw	0
  4904  05AD  00F2               	movwf	___aldiv@divisor+2
  4905  05AE  3010               	movlw	16
  4906  05AF  00F1               	movwf	___aldiv@divisor+1
  4907  05B0  3000               	movlw	0
  4908  05B1  00F0               	movwf	___aldiv@divisor
  4909  05B2  0852               	movf	BMP280_readPressure@var2+3,w
  4910  05B3  00F7               	movwf	___aldiv@dividend+3
  4911  05B4  0851               	movf	BMP280_readPressure@var2+2,w
  4912  05B5  00F6               	movwf	___aldiv@dividend+2
  4913  05B6  0850               	movf	BMP280_readPressure@var2+1,w
  4914  05B7  00F5               	movwf	___aldiv@dividend+1
  4915  05B8  084F               	movf	BMP280_readPressure@var2,w
  4916  05B9  00F4               	movwf	___aldiv@dividend
  4917  05BA  120A  158A  239B  120A  118A  	fcall	___aldiv
  4918  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  4919  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  4920  05C1  0924               	comf	_adc_P^(0+128),w
  4921  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  4922  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  4923  05C4  00B2               	movwf	??_BMP280_readPressure+4
  4924  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  4925  05C6  1303               	bcf	3,6	;RP1=0, select bank1
  4926  05C7  0925               	comf	(_adc_P+1)^(0+128),w
  4927  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  4928  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  4929  05CA  00B3               	movwf	??_BMP280_readPressure+5
  4930  05CB  1683               	bsf	3,5	;RP0=1, select bank1
  4931  05CC  1303               	bcf	3,6	;RP1=0, select bank1
  4932  05CD  0926               	comf	(_adc_P+2)^(0+128),w
  4933  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  4934  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  4935  05D0  00B4               	movwf	??_BMP280_readPressure+6
  4936  05D1  1683               	bsf	3,5	;RP0=1, select bank1
  4937  05D2  1303               	bcf	3,6	;RP1=0, select bank1
  4938  05D3  0927               	comf	(_adc_P+3)^(0+128),w
  4939  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  4940  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  4941  05D6  00B5               	movwf	??_BMP280_readPressure+7
  4942  05D7  0AB2               	incf	??_BMP280_readPressure+4,f
  4943  05D8  1903               	skipnz
  4944  05D9  0AB3               	incf	??_BMP280_readPressure+5,f
  4945  05DA  1903               	skipnz
  4946  05DB  0AB4               	incf	??_BMP280_readPressure+6,f
  4947  05DC  1903               	skipnz
  4948  05DD  0AB5               	incf	??_BMP280_readPressure+7,f
  4949  05DE  0870               	movf	?___aldiv,w
  4950  05DF  02B2               	subwf	??_BMP280_readPressure+4,f
  4951  05E0  0871               	movf	?___aldiv+1,w
  4952  05E1  1C03               	skipc
  4953  05E2  0F71               	incfsz	?___aldiv+1,w
  4954  05E3  2DE5               	goto	u1841
  4955  05E4  2DE6               	goto	u1842
  4956  05E5                     u1841:
  4957  05E5  02B3               	subwf	??_BMP280_readPressure+5,f
  4958  05E6                     u1842:
  4959  05E6  0872               	movf	?___aldiv+2,w
  4960  05E7  1C03               	skipc
  4961  05E8  0F72               	incfsz	?___aldiv+2,w
  4962  05E9  2DEB               	goto	u1843
  4963  05EA  2DEC               	goto	u1844
  4964  05EB                     u1843:
  4965  05EB  02B4               	subwf	??_BMP280_readPressure+6,f
  4966  05EC                     u1844:
  4967  05EC  0873               	movf	?___aldiv+3,w
  4968  05ED  1C03               	skipc
  4969  05EE  0F73               	incfsz	?___aldiv+3,w
  4970  05EF  2DF1               	goto	u1845
  4971  05F0  2DF2               	goto	u1846
  4972  05F1                     u1845:
  4973  05F1  02B5               	subwf	??_BMP280_readPressure+7,f
  4974  05F2                     u1846:
  4975  05F2  0832               	movf	??_BMP280_readPressure+4,w
  4976  05F3  07AE               	addwf	??_BMP280_readPressure,f
  4977  05F4  0833               	movf	??_BMP280_readPressure+5,w
  4978  05F5  1803               	skipnc
  4979  05F6  0F33               	incfsz	??_BMP280_readPressure+5,w
  4980  05F7  2DF9               	goto	u1850
  4981  05F8  2DFA               	goto	u1851
  4982  05F9                     u1850:
  4983  05F9  07AF               	addwf	??_BMP280_readPressure+1,f
  4984  05FA                     u1851:
  4985  05FA  0834               	movf	??_BMP280_readPressure+6,w
  4986  05FB  1803               	skipnc
  4987  05FC  0F34               	incfsz	??_BMP280_readPressure+6,w
  4988  05FD  2DFF               	goto	u1852
  4989  05FE  2E00               	goto	u1853
  4990  05FF                     u1852:
  4991  05FF  07B0               	addwf	??_BMP280_readPressure+2,f
  4992  0600                     u1853:
  4993  0600  0835               	movf	??_BMP280_readPressure+7,w
  4994  0601  1803               	skipnc
  4995  0602  0A35               	incf	??_BMP280_readPressure+7,w
  4996  0603  07B1               	addwf	??_BMP280_readPressure+3,f
  4997  0604  0831               	movf	??_BMP280_readPressure+3,w
  4998  0605  00A9               	movwf	___lmul@multiplier+3
  4999  0606  0830               	movf	??_BMP280_readPressure+2,w
  5000  0607  00A8               	movwf	___lmul@multiplier+2
  5001  0608  082F               	movf	??_BMP280_readPressure+1,w
  5002  0609  00A7               	movwf	___lmul@multiplier+1
  5003  060A  082E               	movf	??_BMP280_readPressure,w
  5004  060B  00A6               	movwf	___lmul@multiplier
  5005  060C  3000               	movlw	0
  5006  060D  00AD               	movwf	___lmul@multiplicand+3
  5007  060E  3000               	movlw	0
  5008  060F  00AC               	movwf	___lmul@multiplicand+2
  5009  0610  300C               	movlw	12
  5010  0611  00AB               	movwf	___lmul@multiplicand+1
  5011  0612  3035               	movlw	53
  5012  0613  00AA               	movwf	___lmul@multiplicand
  5013  0614  120A  158A  218D  120A  118A  	fcall	___lmul
  5014  0619  1283               	bcf	3,5	;RP0=0, select bank0
  5015  061A  1303               	bcf	3,6	;RP1=0, select bank0
  5016  061B  0829               	movf	?___lmul+3,w
  5017  061C  00D6               	movwf	BMP280_readPressure@p+3
  5018  061D  0828               	movf	?___lmul+2,w
  5019  061E  00D5               	movwf	BMP280_readPressure@p+2
  5020  061F  0827               	movf	?___lmul+1,w
  5021  0620  00D4               	movwf	BMP280_readPressure@p+1
  5022  0621  0826               	movf	?___lmul,w
  5023  0622  00D3               	movwf	BMP280_readPressure@p
  5024  0623                     l1747:
  5025                           
  5026                           ;BMP280.c: 303:   if (p < 0x80000000)
  5027  0623  3080               	movlw	128
  5028  0624  0256               	subwf	BMP280_readPressure@p+3,w
  5029  0625  1D03               	skipz
  5030  0626  2E33               	goto	u1863
  5031  0627  3000               	movlw	0
  5032  0628  0255               	subwf	BMP280_readPressure@p+2,w
  5033  0629  1D03               	skipz
  5034  062A  2E33               	goto	u1863
  5035  062B  3000               	movlw	0
  5036  062C  0254               	subwf	BMP280_readPressure@p+1,w
  5037  062D  1D03               	skipz
  5038  062E  2E33               	goto	u1863
  5039  062F  3000               	movlw	0
  5040  0630  0253               	subwf	BMP280_readPressure@p,w
  5041  0631  1D03               	skipz
  5042  0632  2E33               	goto	u1863
  5043  0633                     u1863:
  5044  0633  1803               	btfsc	3,0
  5045  0634  2E36               	goto	u1861
  5046  0635  2E37               	goto	u1860
  5047  0636                     u1861:
  5048  0636  2E5A               	goto	l1751
  5049  0637                     u1860:
  5050  0637                     l1749:
  5051                           
  5052                           ;BMP280.c: 304:     p = (p * 2) / ((uint32_t)var1);
  5053  0637  1283               	bcf	3,5	;RP0=0, select bank0
  5054  0638  1303               	bcf	3,6	;RP1=0, select bank0
  5055  0639  085A               	movf	BMP280_readPressure@var1+3,w
  5056  063A  00F3               	movwf	___lldiv@divisor+3
  5057  063B  0859               	movf	BMP280_readPressure@var1+2,w
  5058  063C  00F2               	movwf	___lldiv@divisor+2
  5059  063D  0858               	movf	BMP280_readPressure@var1+1,w
  5060  063E  00F1               	movwf	___lldiv@divisor+1
  5061  063F  0857               	movf	BMP280_readPressure@var1,w
  5062  0640  00F0               	movwf	___lldiv@divisor
  5063  0641  1003               	clrc
  5064  0642  0D53               	rlf	BMP280_readPressure@p,w
  5065  0643  00F4               	movwf	___lldiv@dividend
  5066  0644  0D54               	rlf	BMP280_readPressure@p+1,w
  5067  0645  00F5               	movwf	___lldiv@dividend+1
  5068  0646  0D55               	rlf	BMP280_readPressure@p+2,w
  5069  0647  00F6               	movwf	___lldiv@dividend+2
  5070  0648  0D56               	rlf	BMP280_readPressure@p+3,w
  5071  0649  00F7               	movwf	___lldiv@dividend+3
  5072  064A  120A  158A  22CE  120A  118A  	fcall	___lldiv
  5073  064F  0873               	movf	?___lldiv+3,w
  5074  0650  1283               	bcf	3,5	;RP0=0, select bank0
  5075  0651  1303               	bcf	3,6	;RP1=0, select bank0
  5076  0652  00D6               	movwf	BMP280_readPressure@p+3
  5077  0653  0872               	movf	?___lldiv+2,w
  5078  0654  00D5               	movwf	BMP280_readPressure@p+2
  5079  0655  0871               	movf	?___lldiv+1,w
  5080  0656  00D4               	movwf	BMP280_readPressure@p+1
  5081  0657  0870               	movf	?___lldiv,w
  5082  0658  00D3               	movwf	BMP280_readPressure@p
  5083  0659  2E7C               	goto	l209
  5084  065A                     l1751:
  5085                           
  5086                           ;BMP280.c: 307:     p = (p / (uint32_t)var1) * 2;
  5087  065A  1283               	bcf	3,5	;RP0=0, select bank0
  5088  065B  1303               	bcf	3,6	;RP1=0, select bank0
  5089  065C  085A               	movf	BMP280_readPressure@var1+3,w
  5090  065D  00F3               	movwf	___lldiv@divisor+3
  5091  065E  0859               	movf	BMP280_readPressure@var1+2,w
  5092  065F  00F2               	movwf	___lldiv@divisor+2
  5093  0660  0858               	movf	BMP280_readPressure@var1+1,w
  5094  0661  00F1               	movwf	___lldiv@divisor+1
  5095  0662  0857               	movf	BMP280_readPressure@var1,w
  5096  0663  00F0               	movwf	___lldiv@divisor
  5097  0664  0856               	movf	BMP280_readPressure@p+3,w
  5098  0665  00F7               	movwf	___lldiv@dividend+3
  5099  0666  0855               	movf	BMP280_readPressure@p+2,w
  5100  0667  00F6               	movwf	___lldiv@dividend+2
  5101  0668  0854               	movf	BMP280_readPressure@p+1,w
  5102  0669  00F5               	movwf	___lldiv@dividend+1
  5103  066A  0853               	movf	BMP280_readPressure@p,w
  5104  066B  00F4               	movwf	___lldiv@dividend
  5105  066C  120A  158A  22CE  120A  118A  	fcall	___lldiv
  5106  0671  1003               	clrc
  5107  0672  0D70               	rlf	?___lldiv,w
  5108  0673  1283               	bcf	3,5	;RP0=0, select bank0
  5109  0674  1303               	bcf	3,6	;RP1=0, select bank0
  5110  0675  00D3               	movwf	BMP280_readPressure@p
  5111  0676  0D71               	rlf	?___lldiv+1,w
  5112  0677  00D4               	movwf	BMP280_readPressure@p+1
  5113  0678  0D72               	rlf	?___lldiv+2,w
  5114  0679  00D5               	movwf	BMP280_readPressure@p+2
  5115  067A  0D73               	rlf	?___lldiv+3,w
  5116  067B  00D6               	movwf	BMP280_readPressure@p+3
  5117  067C                     l209:
  5118                           
  5119                           ;BMP280.c: 309:   var1 = (((int32_t)BMP280_calib.dig_P9) * ((int32_t)(((p/8) * (p/8)) / 
      +                          8192))) / 4096;
  5120  067C  0853               	movf	BMP280_readPressure@p,w
  5121  067D  00AE               	movwf	??_BMP280_readPressure
  5122  067E  0854               	movf	BMP280_readPressure@p+1,w
  5123  067F  00AF               	movwf	??_BMP280_readPressure+1
  5124  0680  0855               	movf	BMP280_readPressure@p+2,w
  5125  0681  00B0               	movwf	??_BMP280_readPressure+2
  5126  0682  0856               	movf	BMP280_readPressure@p+3,w
  5127  0683  00B1               	movwf	??_BMP280_readPressure+3
  5128  0684  3003               	movlw	3
  5129  0685                     u1875:
  5130  0685  1003               	clrc
  5131  0686  0CB1               	rrf	??_BMP280_readPressure+3,f
  5132  0687  0CB0               	rrf	??_BMP280_readPressure+2,f
  5133  0688  0CAF               	rrf	??_BMP280_readPressure+1,f
  5134  0689  0CAE               	rrf	??_BMP280_readPressure,f
  5135  068A                     u1870:
  5136  068A  3EFF               	addlw	-1
  5137  068B  1D03               	skipz
  5138  068C  2E85               	goto	u1875
  5139  068D  0831               	movf	??_BMP280_readPressure+3,w
  5140  068E  00AD               	movwf	___lmul@multiplicand+3
  5141  068F  0830               	movf	??_BMP280_readPressure+2,w
  5142  0690  00AC               	movwf	___lmul@multiplicand+2
  5143  0691  082F               	movf	??_BMP280_readPressure+1,w
  5144  0692  00AB               	movwf	___lmul@multiplicand+1
  5145  0693  082E               	movf	??_BMP280_readPressure,w
  5146  0694  00AA               	movwf	___lmul@multiplicand
  5147  0695  0853               	movf	BMP280_readPressure@p,w
  5148  0696  00B2               	movwf	??_BMP280_readPressure+4
  5149  0697  0854               	movf	BMP280_readPressure@p+1,w
  5150  0698  00B3               	movwf	??_BMP280_readPressure+5
  5151  0699  0855               	movf	BMP280_readPressure@p+2,w
  5152  069A  00B4               	movwf	??_BMP280_readPressure+6
  5153  069B  0856               	movf	BMP280_readPressure@p+3,w
  5154  069C  00B5               	movwf	??_BMP280_readPressure+7
  5155  069D  3003               	movlw	3
  5156  069E                     u1885:
  5157  069E  1003               	clrc
  5158  069F  0CB5               	rrf	??_BMP280_readPressure+7,f
  5159  06A0  0CB4               	rrf	??_BMP280_readPressure+6,f
  5160  06A1  0CB3               	rrf	??_BMP280_readPressure+5,f
  5161  06A2  0CB2               	rrf	??_BMP280_readPressure+4,f
  5162  06A3                     u1880:
  5163  06A3  3EFF               	addlw	-1
  5164  06A4  1D03               	skipz
  5165  06A5  2E9E               	goto	u1885
  5166  06A6  0835               	movf	??_BMP280_readPressure+7,w
  5167  06A7  00A9               	movwf	___lmul@multiplier+3
  5168  06A8  0834               	movf	??_BMP280_readPressure+6,w
  5169  06A9  00A8               	movwf	___lmul@multiplier+2
  5170  06AA  0833               	movf	??_BMP280_readPressure+5,w
  5171  06AB  00A7               	movwf	___lmul@multiplier+1
  5172  06AC  0832               	movf	??_BMP280_readPressure+4,w
  5173  06AD  00A6               	movwf	___lmul@multiplier
  5174  06AE  120A  158A  218D  120A  118A  	fcall	___lmul
  5175  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  5176  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  5177  06B5  0826               	movf	?___lmul,w
  5178  06B6  00B6               	movwf	??_BMP280_readPressure+8
  5179  06B7  0827               	movf	?___lmul+1,w
  5180  06B8  00B7               	movwf	??_BMP280_readPressure+9
  5181  06B9  0828               	movf	?___lmul+2,w
  5182  06BA  00B8               	movwf	??_BMP280_readPressure+10
  5183  06BB  0829               	movf	?___lmul+3,w
  5184  06BC  00B9               	movwf	??_BMP280_readPressure+11
  5185  06BD  300D               	movlw	13
  5186  06BE                     u1895:
  5187  06BE  1003               	clrc
  5188  06BF  0CB9               	rrf	??_BMP280_readPressure+11,f
  5189  06C0  0CB8               	rrf	??_BMP280_readPressure+10,f
  5190  06C1  0CB7               	rrf	??_BMP280_readPressure+9,f
  5191  06C2  0CB6               	rrf	??_BMP280_readPressure+8,f
  5192  06C3                     u1890:
  5193  06C3  3EFF               	addlw	-1
  5194  06C4  1D03               	skipz
  5195  06C5  2EBE               	goto	u1895
  5196  06C6  0839               	movf	??_BMP280_readPressure+11,w
  5197  06C7  00C9               	movwf	_BMP280_readPressure$1105+3
  5198  06C8  0838               	movf	??_BMP280_readPressure+10,w
  5199  06C9  00C8               	movwf	_BMP280_readPressure$1105+2
  5200  06CA  0837               	movf	??_BMP280_readPressure+9,w
  5201  06CB  00C7               	movwf	_BMP280_readPressure$1105+1
  5202  06CC  0836               	movf	??_BMP280_readPressure+8,w
  5203  06CD  00C6               	movwf	_BMP280_readPressure$1105
  5204                           
  5205                           ;BMP280.c: 309:   var1 = (((int32_t)BMP280_calib.dig_P9) * ((int32_t)(((p/8) * (p/8)) / 
      +                          8192))) / 4096;
  5206  06CE  3000               	movlw	0
  5207  06CF  00F3               	movwf	___aldiv@divisor+3
  5208  06D0  3000               	movlw	0
  5209  06D1  00F2               	movwf	___aldiv@divisor+2
  5210  06D2  3010               	movlw	16
  5211  06D3  00F1               	movwf	___aldiv@divisor+1
  5212  06D4  3000               	movlw	0
  5213  06D5  00F0               	movwf	___aldiv@divisor
  5214  06D6  1683               	bsf	3,5	;RP0=1, select bank1
  5215  06D7  1303               	bcf	3,6	;RP1=0, select bank1
  5216  06D8  083E               	movf	(_BMP280_calib^(0+128)+22),w
  5217  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  5218  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  5219  06DB  00A6               	movwf	___lmul@multiplier
  5220  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  5221  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  5222  06DE  083F               	movf	((_BMP280_calib+1)^(0+128)+22),w
  5223  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  5224  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  5225  06E1  00A7               	movwf	___lmul@multiplier+1
  5226  06E2  3000               	movlw	0
  5227  06E3  1BA7               	btfsc	___lmul@multiplier+1,7
  5228  06E4  30FF               	movlw	255
  5229  06E5  00A8               	movwf	___lmul@multiplier+2
  5230  06E6  00A9               	movwf	___lmul@multiplier+3
  5231  06E7  0849               	movf	_BMP280_readPressure$1105+3,w
  5232  06E8  00AD               	movwf	___lmul@multiplicand+3
  5233  06E9  0848               	movf	_BMP280_readPressure$1105+2,w
  5234  06EA  00AC               	movwf	___lmul@multiplicand+2
  5235  06EB  0847               	movf	_BMP280_readPressure$1105+1,w
  5236  06EC  00AB               	movwf	___lmul@multiplicand+1
  5237  06ED  0846               	movf	_BMP280_readPressure$1105,w
  5238  06EE  00AA               	movwf	___lmul@multiplicand
  5239  06EF  120A  158A  218D  120A  118A  	fcall	___lmul
  5240  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  5241  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  5242  06F6  0829               	movf	?___lmul+3,w
  5243  06F7  00F7               	movwf	___aldiv@dividend+3
  5244  06F8  0828               	movf	?___lmul+2,w
  5245  06F9  00F6               	movwf	___aldiv@dividend+2
  5246  06FA  0827               	movf	?___lmul+1,w
  5247  06FB  00F5               	movwf	___aldiv@dividend+1
  5248  06FC  0826               	movf	?___lmul,w
  5249  06FD  00F4               	movwf	___aldiv@dividend
  5250  06FE  120A  158A  239B  120A  118A  	fcall	___aldiv
  5251  0703  0873               	movf	?___aldiv+3,w
  5252  0704  1283               	bcf	3,5	;RP0=0, select bank0
  5253  0705  1303               	bcf	3,6	;RP1=0, select bank0
  5254  0706  00DA               	movwf	BMP280_readPressure@var1+3
  5255  0707  0872               	movf	?___aldiv+2,w
  5256  0708  00D9               	movwf	BMP280_readPressure@var1+2
  5257  0709  0871               	movf	?___aldiv+1,w
  5258  070A  00D8               	movwf	BMP280_readPressure@var1+1
  5259  070B  0870               	movf	?___aldiv,w
  5260  070C  00D7               	movwf	BMP280_readPressure@var1
  5261                           
  5262                           ;BMP280.c: 310:   var2 = (((int32_t)(p/4)) * ((int32_t)BMP280_calib.dig_P8)) / 8192;
  5263  070D  3000               	movlw	0
  5264  070E  00F3               	movwf	___aldiv@divisor+3
  5265  070F  3000               	movlw	0
  5266  0710  00F2               	movwf	___aldiv@divisor+2
  5267  0711  3020               	movlw	32
  5268  0712  00F1               	movwf	___aldiv@divisor+1
  5269  0713  3000               	movlw	0
  5270  0714  00F0               	movwf	___aldiv@divisor
  5271  0715  0853               	movf	BMP280_readPressure@p,w
  5272  0716  00AE               	movwf	??_BMP280_readPressure
  5273  0717  0854               	movf	BMP280_readPressure@p+1,w
  5274  0718  00AF               	movwf	??_BMP280_readPressure+1
  5275  0719  0855               	movf	BMP280_readPressure@p+2,w
  5276  071A  00B0               	movwf	??_BMP280_readPressure+2
  5277  071B  0856               	movf	BMP280_readPressure@p+3,w
  5278  071C  00B1               	movwf	??_BMP280_readPressure+3
  5279  071D  3002               	movlw	2
  5280  071E                     u1905:
  5281  071E  1003               	clrc
  5282  071F  0CB1               	rrf	??_BMP280_readPressure+3,f
  5283  0720  0CB0               	rrf	??_BMP280_readPressure+2,f
  5284  0721  0CAF               	rrf	??_BMP280_readPressure+1,f
  5285  0722  0CAE               	rrf	??_BMP280_readPressure,f
  5286  0723                     u1900:
  5287  0723  3EFF               	addlw	-1
  5288  0724  1D03               	skipz
  5289  0725  2F1E               	goto	u1905
  5290  0726  0831               	movf	??_BMP280_readPressure+3,w
  5291  0727  00A9               	movwf	___lmul@multiplier+3
  5292  0728  0830               	movf	??_BMP280_readPressure+2,w
  5293  0729  00A8               	movwf	___lmul@multiplier+2
  5294  072A  082F               	movf	??_BMP280_readPressure+1,w
  5295  072B  00A7               	movwf	___lmul@multiplier+1
  5296  072C  082E               	movf	??_BMP280_readPressure,w
  5297  072D  00A6               	movwf	___lmul@multiplier
  5298  072E  1683               	bsf	3,5	;RP0=1, select bank1
  5299  072F  1303               	bcf	3,6	;RP1=0, select bank1
  5300  0730  083C               	movf	(_BMP280_calib^(0+128)+20),w
  5301  0731  1283               	bcf	3,5	;RP0=0, select bank0
  5302  0732  1303               	bcf	3,6	;RP1=0, select bank0
  5303  0733  00AA               	movwf	___lmul@multiplicand
  5304  0734  1683               	bsf	3,5	;RP0=1, select bank1
  5305  0735  1303               	bcf	3,6	;RP1=0, select bank1
  5306  0736  083D               	movf	((_BMP280_calib+1)^(0+128)+20),w
  5307  0737  1283               	bcf	3,5	;RP0=0, select bank0
  5308  0738  1303               	bcf	3,6	;RP1=0, select bank0
  5309  0739  00AB               	movwf	___lmul@multiplicand+1
  5310  073A  3000               	movlw	0
  5311  073B  1BAB               	btfsc	___lmul@multiplicand+1,7
  5312  073C  30FF               	movlw	255
  5313  073D  00AC               	movwf	___lmul@multiplicand+2
  5314  073E  00AD               	movwf	___lmul@multiplicand+3
  5315  073F  120A  158A  218D  120A  118A  	fcall	___lmul
  5316  0744  1283               	bcf	3,5	;RP0=0, select bank0
  5317  0745  1303               	bcf	3,6	;RP1=0, select bank0
  5318  0746  0829               	movf	?___lmul+3,w
  5319  0747  00F7               	movwf	___aldiv@dividend+3
  5320  0748  0828               	movf	?___lmul+2,w
  5321  0749  00F6               	movwf	___aldiv@dividend+2
  5322  074A  0827               	movf	?___lmul+1,w
  5323  074B  00F5               	movwf	___aldiv@dividend+1
  5324  074C  0826               	movf	?___lmul,w
  5325  074D  00F4               	movwf	___aldiv@dividend
  5326  074E  120A  158A  239B  120A  118A  	fcall	___aldiv
  5327  0753  0873               	movf	?___aldiv+3,w
  5328  0754  1283               	bcf	3,5	;RP0=0, select bank0
  5329  0755  1303               	bcf	3,6	;RP1=0, select bank0
  5330  0756  00D2               	movwf	BMP280_readPressure@var2+3
  5331  0757  0872               	movf	?___aldiv+2,w
  5332  0758  00D1               	movwf	BMP280_readPressure@var2+2
  5333  0759  0871               	movf	?___aldiv+1,w
  5334  075A  00D0               	movwf	BMP280_readPressure@var2+1
  5335  075B  0870               	movf	?___aldiv,w
  5336  075C  00CF               	movwf	BMP280_readPressure@var2
  5337                           
  5338                           ;BMP280.c: 312:   p = (uint32_t)((int32_t)p + ((var1 + var2 + (int32_t)BMP280_calib.dig_
      +                          P7) / 16));
  5339  075D  3000               	movlw	0
  5340  075E  00F3               	movwf	___aldiv@divisor+3
  5341  075F  3000               	movlw	0
  5342  0760  00F2               	movwf	___aldiv@divisor+2
  5343  0761  3000               	movlw	0
  5344  0762  00F1               	movwf	___aldiv@divisor+1
  5345  0763  3010               	movlw	16
  5346  0764  00F0               	movwf	___aldiv@divisor
  5347  0765  084F               	movf	BMP280_readPressure@var2,w
  5348  0766  00AE               	movwf	??_BMP280_readPressure
  5349  0767  0850               	movf	BMP280_readPressure@var2+1,w
  5350  0768  00AF               	movwf	??_BMP280_readPressure+1
  5351  0769  0851               	movf	BMP280_readPressure@var2+2,w
  5352  076A  00B0               	movwf	??_BMP280_readPressure+2
  5353  076B  0852               	movf	BMP280_readPressure@var2+3,w
  5354  076C  00B1               	movwf	??_BMP280_readPressure+3
  5355  076D  0857               	movf	BMP280_readPressure@var1,w
  5356  076E  00B2               	movwf	??_BMP280_readPressure+4
  5357  076F  0858               	movf	BMP280_readPressure@var1+1,w
  5358  0770  00B3               	movwf	??_BMP280_readPressure+5
  5359  0771  0859               	movf	BMP280_readPressure@var1+2,w
  5360  0772  00B4               	movwf	??_BMP280_readPressure+6
  5361  0773  085A               	movf	BMP280_readPressure@var1+3,w
  5362  0774  00B5               	movwf	??_BMP280_readPressure+7
  5363  0775  1683               	bsf	3,5	;RP0=1, select bank1
  5364  0776  1303               	bcf	3,6	;RP1=0, select bank1
  5365  0777  083A               	movf	(_BMP280_calib^(0+128)+18),w
  5366  0778  1283               	bcf	3,5	;RP0=0, select bank0
  5367  0779  1303               	bcf	3,6	;RP1=0, select bank0
  5368  077A  00B6               	movwf	??_BMP280_readPressure+8
  5369  077B  1683               	bsf	3,5	;RP0=1, select bank1
  5370  077C  1303               	bcf	3,6	;RP1=0, select bank1
  5371  077D  083B               	movf	((_BMP280_calib+1)^(0+128)+18),w
  5372  077E  1283               	bcf	3,5	;RP0=0, select bank0
  5373  077F  1303               	bcf	3,6	;RP1=0, select bank0
  5374  0780  00B7               	movwf	??_BMP280_readPressure+9
  5375  0781  3000               	movlw	0
  5376  0782  1BB7               	btfsc	??_BMP280_readPressure+9,7
  5377  0783  30FF               	movlw	255
  5378  0784  00B8               	movwf	??_BMP280_readPressure+10
  5379  0785  00B9               	movwf	??_BMP280_readPressure+11
  5380  0786  0836               	movf	??_BMP280_readPressure+8,w
  5381  0787  07B2               	addwf	??_BMP280_readPressure+4,f
  5382  0788  0837               	movf	??_BMP280_readPressure+9,w
  5383  0789  1803               	skipnc
  5384  078A  0F37               	incfsz	??_BMP280_readPressure+9,w
  5385  078B  2F8D               	goto	u1910
  5386  078C  2F8E               	goto	u1911
  5387  078D                     u1910:
  5388  078D  07B3               	addwf	??_BMP280_readPressure+5,f
  5389  078E                     u1911:
  5390  078E  0838               	movf	??_BMP280_readPressure+10,w
  5391  078F  1803               	skipnc
  5392  0790  0F38               	incfsz	??_BMP280_readPressure+10,w
  5393  0791  2F93               	goto	u1912
  5394  0792  2F94               	goto	u1913
  5395  0793                     u1912:
  5396  0793  07B4               	addwf	??_BMP280_readPressure+6,f
  5397  0794                     u1913:
  5398  0794  0839               	movf	??_BMP280_readPressure+11,w
  5399  0795  1803               	skipnc
  5400  0796  0A39               	incf	??_BMP280_readPressure+11,w
  5401  0797  07B5               	addwf	??_BMP280_readPressure+7,f
  5402  0798  0832               	movf	??_BMP280_readPressure+4,w
  5403  0799  07AE               	addwf	??_BMP280_readPressure,f
  5404  079A  0833               	movf	??_BMP280_readPressure+5,w
  5405  079B  1803               	skipnc
  5406  079C  0F33               	incfsz	??_BMP280_readPressure+5,w
  5407  079D  2F9F               	goto	u1920
  5408  079E  2FA0               	goto	u1921
  5409  079F                     u1920:
  5410  079F  07AF               	addwf	??_BMP280_readPressure+1,f
  5411  07A0                     u1921:
  5412  07A0  0834               	movf	??_BMP280_readPressure+6,w
  5413  07A1  1803               	skipnc
  5414  07A2  0F34               	incfsz	??_BMP280_readPressure+6,w
  5415  07A3  2FA5               	goto	u1922
  5416  07A4  2FA6               	goto	u1923
  5417  07A5                     u1922:
  5418  07A5  07B0               	addwf	??_BMP280_readPressure+2,f
  5419  07A6                     u1923:
  5420  07A6  0835               	movf	??_BMP280_readPressure+7,w
  5421  07A7  1803               	skipnc
  5422  07A8  0A35               	incf	??_BMP280_readPressure+7,w
  5423  07A9  07B1               	addwf	??_BMP280_readPressure+3,f
  5424  07AA  0831               	movf	??_BMP280_readPressure+3,w
  5425  07AB  00F7               	movwf	___aldiv@dividend+3
  5426  07AC  0830               	movf	??_BMP280_readPressure+2,w
  5427  07AD  00F6               	movwf	___aldiv@dividend+2
  5428  07AE  082F               	movf	??_BMP280_readPressure+1,w
  5429  07AF  00F5               	movwf	___aldiv@dividend+1
  5430  07B0  082E               	movf	??_BMP280_readPressure,w
  5431  07B1  00F4               	movwf	___aldiv@dividend
  5432  07B2  120A  158A  239B  120A  118A  	fcall	___aldiv
  5433  07B7  0870               	movf	?___aldiv,w
  5434  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  5435  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  5436  07BA  0753               	addwf	BMP280_readPressure@p,w
  5437  07BB  00BA               	movwf	??_BMP280_readPressure+12
  5438  07BC  3000               	movlw	0
  5439  07BD  1803               	skipnc
  5440  07BE  3001               	movlw	1
  5441  07BF  0771               	addwf	?___aldiv+1,w
  5442  07C0  01BC               	clrf	??_BMP280_readPressure+14
  5443  07C1  1803               	skipnc
  5444  07C2  0ABC               	incf	??_BMP280_readPressure+14,f
  5445  07C3  0754               	addwf	BMP280_readPressure@p+1,w
  5446  07C4  00BB               	movwf	??_BMP280_readPressure+13
  5447  07C5  1803               	skipnc
  5448  07C6  0ABC               	incf	??_BMP280_readPressure+14,f
  5449  07C7  0872               	movf	?___aldiv+2,w
  5450  07C8  073C               	addwf	??_BMP280_readPressure+14,w
  5451  07C9  01BD               	clrf	??_BMP280_readPressure+15
  5452  07CA  1803               	skipnc
  5453  07CB  0ABD               	incf	??_BMP280_readPressure+15,f
  5454  07CC  0755               	addwf	BMP280_readPressure@p+2,w
  5455  07CD  00BC               	movwf	??_BMP280_readPressure+14
  5456  07CE  1803               	skipnc
  5457  07CF  0ABD               	incf	??_BMP280_readPressure+15,f
  5458  07D0  0873               	movf	?___aldiv+3,w
  5459  07D1  073D               	addwf	??_BMP280_readPressure+15,w
  5460  07D2  0756               	addwf	BMP280_readPressure@p+3,w
  5461  07D3  00BD               	movwf	??_BMP280_readPressure+15
  5462  07D4  083D               	movf	??_BMP280_readPressure+15,w
  5463  07D5  00D6               	movwf	BMP280_readPressure@p+3
  5464  07D6  083C               	movf	??_BMP280_readPressure+14,w
  5465  07D7  00D5               	movwf	BMP280_readPressure@p+2
  5466  07D8  083B               	movf	??_BMP280_readPressure+13,w
  5467  07D9  00D4               	movwf	BMP280_readPressure@p+1
  5468  07DA  083A               	movf	??_BMP280_readPressure+12,w
  5469  07DB  00D3               	movwf	BMP280_readPressure@p
  5470  07DC                     l1753:
  5471                           
  5472                           ;BMP280.c: 314:   *pres = p;
  5473  07DC  084A               	movf	BMP280_readPressure@pres,w
  5474  07DD  0084               	movwf	4
  5475  07DE  0853               	movf	BMP280_readPressure@p,w
  5476  07DF  1383               	bcf	3,7	;select IRP bank0
  5477  07E0  0080               	movwf	0
  5478  07E1  0A84               	incf	4,f
  5479  07E2  0854               	movf	BMP280_readPressure@p+1,w
  5480  07E3  0080               	movwf	0
  5481  07E4  0A84               	incf	4,f
  5482  07E5  0855               	movf	BMP280_readPressure@p+2,w
  5483  07E6  0080               	movwf	0
  5484  07E7  0A84               	incf	4,f
  5485  07E8  0856               	movf	BMP280_readPressure@p+3,w
  5486  07E9  0080               	movwf	0
  5487  07EA                     l207:
  5488  07EA  0008               	return
  5489  07EB                     __end_of_BMP280_readPressure:
  5490                           
  5491                           	psect	text16
  5492  098D                     __ptext16:	
  5493 ;; *************** function ___lmul *****************
  5494 ;; Defined at:
  5495 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul32.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  multiplier      4    6[BANK0 ] unsigned long 
  5498 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  product         4   10[COMMON] unsigned long 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  4    6[BANK0 ] unsigned long 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5510 ;;      Params:         0       8       0       0       0
  5511 ;;      Locals:         4       0       0       0       0
  5512 ;;      Temps:          1       0       0       0       0
  5513 ;;      Totals:         5       8       0       0       0
  5514 ;;Total ram usage:       13 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_BMP280_readTemperature
  5520 ;;		_BMP280_readPressure
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           
  5525                           ;psect for function ___lmul
  5526  098D                     ___lmul:
  5527  098D                     l1589:	
  5528                           ;incstack = 0
  5529                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5530                           
  5531  098D  3000               	movlw	0
  5532  098E  00FD               	movwf	___lmul@product+3
  5533  098F  3000               	movlw	0
  5534  0990  00FC               	movwf	___lmul@product+2
  5535  0991  3000               	movlw	0
  5536  0992  00FB               	movwf	___lmul@product+1
  5537  0993  3000               	movlw	0
  5538  0994  00FA               	movwf	___lmul@product
  5539  0995                     l1591:
  5540  0995  1283               	bcf	3,5	;RP0=0, select bank0
  5541  0996  1303               	bcf	3,6	;RP1=0, select bank0
  5542  0997  1C26               	btfss	___lmul@multiplier,0
  5543  0998  299A               	goto	u1391
  5544  0999  299B               	goto	u1390
  5545  099A                     u1391:
  5546  099A  29B2               	goto	l1595
  5547  099B                     u1390:
  5548  099B                     l1593:
  5549  099B  082A               	movf	___lmul@multiplicand,w
  5550  099C  07FA               	addwf	___lmul@product,f
  5551  099D  082B               	movf	___lmul@multiplicand+1,w
  5552  099E  1103               	clrz
  5553  099F  1803               	skipnc
  5554  09A0  3E01               	addlw	1
  5555  09A1  1903               	skipnz
  5556  09A2  29A4               	goto	u1401
  5557  09A3  07FB               	addwf	___lmul@product+1,f
  5558  09A4                     u1401:
  5559  09A4  082C               	movf	___lmul@multiplicand+2,w
  5560  09A5  1103               	clrz
  5561  09A6  1803               	skipnc
  5562  09A7  3E01               	addlw	1
  5563  09A8  1903               	skipnz
  5564  09A9  29AB               	goto	u1402
  5565  09AA  07FC               	addwf	___lmul@product+2,f
  5566  09AB                     u1402:
  5567  09AB  082D               	movf	___lmul@multiplicand+3,w
  5568  09AC  1103               	clrz
  5569  09AD  1803               	skipnc
  5570  09AE  3E01               	addlw	1
  5571  09AF  1903               	skipnz
  5572  09B0  29B2               	goto	u1403
  5573  09B1  07FD               	addwf	___lmul@product+3,f
  5574  09B2                     u1403:
  5575  09B2                     l1595:
  5576  09B2  3001               	movlw	1
  5577  09B3  00F9               	movwf	??___lmul
  5578  09B4                     u1415:
  5579  09B4  1003               	clrc
  5580  09B5  0DAA               	rlf	___lmul@multiplicand,f
  5581  09B6  0DAB               	rlf	___lmul@multiplicand+1,f
  5582  09B7  0DAC               	rlf	___lmul@multiplicand+2,f
  5583  09B8  0DAD               	rlf	___lmul@multiplicand+3,f
  5584  09B9  0BF9               	decfsz	??___lmul,f
  5585  09BA  29B4               	goto	u1415
  5586  09BB                     l1597:
  5587  09BB  3001               	movlw	1
  5588  09BC                     u1425:
  5589  09BC  1003               	clrc
  5590  09BD  0CA9               	rrf	___lmul@multiplier+3,f
  5591  09BE  0CA8               	rrf	___lmul@multiplier+2,f
  5592  09BF  0CA7               	rrf	___lmul@multiplier+1,f
  5593  09C0  0CA6               	rrf	___lmul@multiplier,f
  5594  09C1  3EFF               	addlw	-1
  5595  09C2  1D03               	skipz
  5596  09C3  29BC               	goto	u1425
  5597  09C4  0829               	movf	___lmul@multiplier+3,w
  5598  09C5  0428               	iorwf	___lmul@multiplier+2,w
  5599  09C6  0427               	iorwf	___lmul@multiplier+1,w
  5600  09C7  0426               	iorwf	___lmul@multiplier,w
  5601  09C8  1D03               	skipz
  5602  09C9  29CB               	goto	u1431
  5603  09CA  29CC               	goto	u1430
  5604  09CB                     u1431:
  5605  09CB  2995               	goto	l1591
  5606  09CC                     u1430:
  5607  09CC                     l1599:
  5608  09CC  087D               	movf	___lmul@product+3,w
  5609  09CD  00A9               	movwf	?___lmul+3
  5610  09CE  087C               	movf	___lmul@product+2,w
  5611  09CF  00A8               	movwf	?___lmul+2
  5612  09D0  087B               	movf	___lmul@product+1,w
  5613  09D1  00A7               	movwf	?___lmul+1
  5614  09D2  087A               	movf	___lmul@product,w
  5615  09D3  00A6               	movwf	?___lmul
  5616  09D4                     l337:
  5617  09D4  0008               	return
  5618  09D5                     __end_of___lmul:
  5619                           
  5620                           	psect	text17
  5621  0ACE                     __ptext17:	
  5622 ;; *************** function ___lldiv *****************
  5623 ;; Defined at:
  5624 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  divisor         4    0[COMMON] unsigned long 
  5627 ;;  dividend        4    4[COMMON] unsigned long 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  quotient        4    9[COMMON] unsigned long 
  5630 ;;  counter         1   13[COMMON] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  4    0[COMMON] unsigned long 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5640 ;;      Params:         8       0       0       0       0
  5641 ;;      Locals:         5       0       0       0       0
  5642 ;;      Temps:          1       0       0       0       0
  5643 ;;      Totals:        14       0       0       0       0
  5644 ;;Total ram usage:       14 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_main
  5650 ;;		_I2C_Master_Init
  5651 ;;		_BMP280_readPressure
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           
  5656                           ;psect for function ___lldiv
  5657  0ACE                     ___lldiv:
  5658  0ACE                     l1475:	
  5659                           ;incstack = 0
  5660                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5661                           
  5662  0ACE  3000               	movlw	0
  5663  0ACF  00FC               	movwf	___lldiv@quotient+3
  5664  0AD0  3000               	movlw	0
  5665  0AD1  00FB               	movwf	___lldiv@quotient+2
  5666  0AD2  3000               	movlw	0
  5667  0AD3  00FA               	movwf	___lldiv@quotient+1
  5668  0AD4  3000               	movlw	0
  5669  0AD5  00F9               	movwf	___lldiv@quotient
  5670  0AD6  0873               	movf	___lldiv@divisor+3,w
  5671  0AD7  0472               	iorwf	___lldiv@divisor+2,w
  5672  0AD8  0471               	iorwf	___lldiv@divisor+1,w
  5673  0AD9  0470               	iorwf	___lldiv@divisor,w
  5674  0ADA  1903               	skipnz
  5675  0ADB  2ADD               	goto	u1231
  5676  0ADC  2ADE               	goto	u1230
  5677  0ADD                     u1231:
  5678  0ADD  2B2B               	goto	l1495
  5679  0ADE                     u1230:
  5680  0ADE                     l1477:
  5681  0ADE  01FD               	clrf	___lldiv@counter
  5682  0ADF  0AFD               	incf	___lldiv@counter,f
  5683  0AE0  2AEE               	goto	l1481
  5684  0AE1                     l1479:
  5685  0AE1  3001               	movlw	1
  5686  0AE2  00F8               	movwf	??___lldiv
  5687  0AE3                     u1245:
  5688  0AE3  1003               	clrc
  5689  0AE4  0DF0               	rlf	___lldiv@divisor,f
  5690  0AE5  0DF1               	rlf	___lldiv@divisor+1,f
  5691  0AE6  0DF2               	rlf	___lldiv@divisor+2,f
  5692  0AE7  0DF3               	rlf	___lldiv@divisor+3,f
  5693  0AE8  0BF8               	decfsz	??___lldiv,f
  5694  0AE9  2AE3               	goto	u1245
  5695  0AEA  3001               	movlw	1
  5696  0AEB  00F8               	movwf	??___lldiv
  5697  0AEC  0878               	movf	??___lldiv,w
  5698  0AED  07FD               	addwf	___lldiv@counter,f
  5699  0AEE                     l1481:
  5700  0AEE  1FF3               	btfss	___lldiv@divisor+3,7
  5701  0AEF  2AF1               	goto	u1251
  5702  0AF0  2AF2               	goto	u1250
  5703  0AF1                     u1251:
  5704  0AF1  2AE1               	goto	l1479
  5705  0AF2                     u1250:
  5706  0AF2                     l1483:
  5707  0AF2  3001               	movlw	1
  5708  0AF3  00F8               	movwf	??___lldiv
  5709  0AF4                     u1265:
  5710  0AF4  1003               	clrc
  5711  0AF5  0DF9               	rlf	___lldiv@quotient,f
  5712  0AF6  0DFA               	rlf	___lldiv@quotient+1,f
  5713  0AF7  0DFB               	rlf	___lldiv@quotient+2,f
  5714  0AF8  0DFC               	rlf	___lldiv@quotient+3,f
  5715  0AF9  0BF8               	decfsz	??___lldiv,f
  5716  0AFA  2AF4               	goto	u1265
  5717  0AFB                     l1485:
  5718  0AFB  0873               	movf	___lldiv@divisor+3,w
  5719  0AFC  0277               	subwf	___lldiv@dividend+3,w
  5720  0AFD  1D03               	skipz
  5721  0AFE  2B09               	goto	u1275
  5722  0AFF  0872               	movf	___lldiv@divisor+2,w
  5723  0B00  0276               	subwf	___lldiv@dividend+2,w
  5724  0B01  1D03               	skipz
  5725  0B02  2B09               	goto	u1275
  5726  0B03  0871               	movf	___lldiv@divisor+1,w
  5727  0B04  0275               	subwf	___lldiv@dividend+1,w
  5728  0B05  1D03               	skipz
  5729  0B06  2B09               	goto	u1275
  5730  0B07  0870               	movf	___lldiv@divisor,w
  5731  0B08  0274               	subwf	___lldiv@dividend,w
  5732  0B09                     u1275:
  5733  0B09  1C03               	skipc
  5734  0B0A  2B0C               	goto	u1271
  5735  0B0B  2B0D               	goto	u1270
  5736  0B0C                     u1271:
  5737  0B0C  2B1C               	goto	l1491
  5738  0B0D                     u1270:
  5739  0B0D                     l1487:
  5740  0B0D  0870               	movf	___lldiv@divisor,w
  5741  0B0E  02F4               	subwf	___lldiv@dividend,f
  5742  0B0F  0871               	movf	___lldiv@divisor+1,w
  5743  0B10  1C03               	skipc
  5744  0B11  0F71               	incfsz	___lldiv@divisor+1,w
  5745  0B12  02F5               	subwf	___lldiv@dividend+1,f
  5746  0B13  0872               	movf	___lldiv@divisor+2,w
  5747  0B14  1C03               	skipc
  5748  0B15  0F72               	incfsz	___lldiv@divisor+2,w
  5749  0B16  02F6               	subwf	___lldiv@dividend+2,f
  5750  0B17  0873               	movf	___lldiv@divisor+3,w
  5751  0B18  1C03               	skipc
  5752  0B19  0F73               	incfsz	___lldiv@divisor+3,w
  5753  0B1A  02F7               	subwf	___lldiv@dividend+3,f
  5754  0B1B                     l1489:
  5755  0B1B  1479               	bsf	___lldiv@quotient,0
  5756  0B1C                     l1491:
  5757  0B1C  3001               	movlw	1
  5758  0B1D                     u1285:
  5759  0B1D  1003               	clrc
  5760  0B1E  0CF3               	rrf	___lldiv@divisor+3,f
  5761  0B1F  0CF2               	rrf	___lldiv@divisor+2,f
  5762  0B20  0CF1               	rrf	___lldiv@divisor+1,f
  5763  0B21  0CF0               	rrf	___lldiv@divisor,f
  5764  0B22  3EFF               	addlw	-1
  5765  0B23  1D03               	skipz
  5766  0B24  2B1D               	goto	u1285
  5767  0B25                     l1493:
  5768  0B25  3001               	movlw	1
  5769  0B26  02FD               	subwf	___lldiv@counter,f
  5770  0B27  1D03               	btfss	3,2
  5771  0B28  2B2A               	goto	u1291
  5772  0B29  2B2B               	goto	u1290
  5773  0B2A                     u1291:
  5774  0B2A  2AF2               	goto	l1483
  5775  0B2B                     u1290:
  5776  0B2B                     l1495:
  5777  0B2B  087C               	movf	___lldiv@quotient+3,w
  5778  0B2C  00F3               	movwf	?___lldiv+3
  5779  0B2D  087B               	movf	___lldiv@quotient+2,w
  5780  0B2E  00F2               	movwf	?___lldiv+2
  5781  0B2F  087A               	movf	___lldiv@quotient+1,w
  5782  0B30  00F1               	movwf	?___lldiv+1
  5783  0B31  0879               	movf	___lldiv@quotient,w
  5784  0B32  00F0               	movwf	?___lldiv
  5785  0B33                     l359:
  5786  0B33  0008               	return
  5787  0B34                     __end_of___lldiv:
  5788                           
  5789                           	psect	text18
  5790  0B9B                     __ptext18:	
  5791 ;; *************** function ___aldiv *****************
  5792 ;; Defined at:
  5793 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\aldiv.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;  divisor         4    0[COMMON] long 
  5796 ;;  dividend        4    4[COMMON] long 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  quotient        4    2[BANK0 ] long 
  5799 ;;  sign            1    1[BANK0 ] unsigned char 
  5800 ;;  counter         1    0[BANK0 ] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  4    0[COMMON] long 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5810 ;;      Params:         8       0       0       0       0
  5811 ;;      Locals:         0       6       0       0       0
  5812 ;;      Temps:          1       0       0       0       0
  5813 ;;      Totals:         9       6       0       0       0
  5814 ;;Total ram usage:       15 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_main
  5820 ;;		_BMP280_readTemperature
  5821 ;;		_BMP280_readPressure
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function ___aldiv
  5827  0B9B                     ___aldiv:
  5828  0B9B                     l1603:	
  5829                           ;incstack = 0
  5830                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5831                           
  5832  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  5833  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  5834  0B9D  01A1               	clrf	___aldiv@sign
  5835  0B9E                     l1605:
  5836  0B9E  1FF3               	btfss	___aldiv@divisor+3,7
  5837  0B9F  2BA1               	goto	u1441
  5838  0BA0  2BA2               	goto	u1440
  5839  0BA1                     u1441:
  5840  0BA1  2BAF               	goto	l388
  5841  0BA2                     u1440:
  5842  0BA2                     l1607:
  5843  0BA2  09F0               	comf	___aldiv@divisor,f
  5844  0BA3  09F1               	comf	___aldiv@divisor+1,f
  5845  0BA4  09F2               	comf	___aldiv@divisor+2,f
  5846  0BA5  09F3               	comf	___aldiv@divisor+3,f
  5847  0BA6  0AF0               	incf	___aldiv@divisor,f
  5848  0BA7  1903               	skipnz
  5849  0BA8  0AF1               	incf	___aldiv@divisor+1,f
  5850  0BA9  1903               	skipnz
  5851  0BAA  0AF2               	incf	___aldiv@divisor+2,f
  5852  0BAB  1903               	skipnz
  5853  0BAC  0AF3               	incf	___aldiv@divisor+3,f
  5854  0BAD  01A1               	clrf	___aldiv@sign
  5855  0BAE  0AA1               	incf	___aldiv@sign,f
  5856  0BAF                     l388:
  5857  0BAF  1FF7               	btfss	___aldiv@dividend+3,7
  5858  0BB0  2BB2               	goto	u1451
  5859  0BB1  2BB3               	goto	u1450
  5860  0BB2                     u1451:
  5861  0BB2  2BC2               	goto	l1613
  5862  0BB3                     u1450:
  5863  0BB3                     l1609:
  5864  0BB3  09F4               	comf	___aldiv@dividend,f
  5865  0BB4  09F5               	comf	___aldiv@dividend+1,f
  5866  0BB5  09F6               	comf	___aldiv@dividend+2,f
  5867  0BB6  09F7               	comf	___aldiv@dividend+3,f
  5868  0BB7  0AF4               	incf	___aldiv@dividend,f
  5869  0BB8  1903               	skipnz
  5870  0BB9  0AF5               	incf	___aldiv@dividend+1,f
  5871  0BBA  1903               	skipnz
  5872  0BBB  0AF6               	incf	___aldiv@dividend+2,f
  5873  0BBC  1903               	skipnz
  5874  0BBD  0AF7               	incf	___aldiv@dividend+3,f
  5875  0BBE                     l1611:
  5876  0BBE  3001               	movlw	1
  5877  0BBF  00F8               	movwf	??___aldiv
  5878  0BC0  0878               	movf	??___aldiv,w
  5879  0BC1  06A1               	xorwf	___aldiv@sign,f
  5880  0BC2                     l1613:
  5881  0BC2  3000               	movlw	0
  5882  0BC3  00A5               	movwf	___aldiv@quotient+3
  5883  0BC4  3000               	movlw	0
  5884  0BC5  00A4               	movwf	___aldiv@quotient+2
  5885  0BC6  3000               	movlw	0
  5886  0BC7  00A3               	movwf	___aldiv@quotient+1
  5887  0BC8  3000               	movlw	0
  5888  0BC9  00A2               	movwf	___aldiv@quotient
  5889  0BCA                     l1615:
  5890  0BCA  0873               	movf	___aldiv@divisor+3,w
  5891  0BCB  0472               	iorwf	___aldiv@divisor+2,w
  5892  0BCC  0471               	iorwf	___aldiv@divisor+1,w
  5893  0BCD  0470               	iorwf	___aldiv@divisor,w
  5894  0BCE  1903               	skipnz
  5895  0BCF  2BD1               	goto	u1461
  5896  0BD0  2BD2               	goto	u1460
  5897  0BD1                     u1461:
  5898  0BD1  2C1F               	goto	l1635
  5899  0BD2                     u1460:
  5900  0BD2                     l1617:
  5901  0BD2  01A0               	clrf	___aldiv@counter
  5902  0BD3  0AA0               	incf	___aldiv@counter,f
  5903  0BD4  2BE2               	goto	l1621
  5904  0BD5                     l1619:
  5905  0BD5  3001               	movlw	1
  5906  0BD6  00F8               	movwf	??___aldiv
  5907  0BD7                     u1475:
  5908  0BD7  1003               	clrc
  5909  0BD8  0DF0               	rlf	___aldiv@divisor,f
  5910  0BD9  0DF1               	rlf	___aldiv@divisor+1,f
  5911  0BDA  0DF2               	rlf	___aldiv@divisor+2,f
  5912  0BDB  0DF3               	rlf	___aldiv@divisor+3,f
  5913  0BDC  0BF8               	decfsz	??___aldiv,f
  5914  0BDD  2BD7               	goto	u1475
  5915  0BDE  3001               	movlw	1
  5916  0BDF  00F8               	movwf	??___aldiv
  5917  0BE0  0878               	movf	??___aldiv,w
  5918  0BE1  07A0               	addwf	___aldiv@counter,f
  5919  0BE2                     l1621:
  5920  0BE2  1FF3               	btfss	___aldiv@divisor+3,7
  5921  0BE3  2BE5               	goto	u1481
  5922  0BE4  2BE6               	goto	u1480
  5923  0BE5                     u1481:
  5924  0BE5  2BD5               	goto	l1619
  5925  0BE6                     u1480:
  5926  0BE6                     l1623:
  5927  0BE6  3001               	movlw	1
  5928  0BE7  00F8               	movwf	??___aldiv
  5929  0BE8                     u1495:
  5930  0BE8  1003               	clrc
  5931  0BE9  0DA2               	rlf	___aldiv@quotient,f
  5932  0BEA  0DA3               	rlf	___aldiv@quotient+1,f
  5933  0BEB  0DA4               	rlf	___aldiv@quotient+2,f
  5934  0BEC  0DA5               	rlf	___aldiv@quotient+3,f
  5935  0BED  0BF8               	decfsz	??___aldiv,f
  5936  0BEE  2BE8               	goto	u1495
  5937  0BEF                     l1625:
  5938  0BEF  0873               	movf	___aldiv@divisor+3,w
  5939  0BF0  0277               	subwf	___aldiv@dividend+3,w
  5940  0BF1  1D03               	skipz
  5941  0BF2  2BFD               	goto	u1505
  5942  0BF3  0872               	movf	___aldiv@divisor+2,w
  5943  0BF4  0276               	subwf	___aldiv@dividend+2,w
  5944  0BF5  1D03               	skipz
  5945  0BF6  2BFD               	goto	u1505
  5946  0BF7  0871               	movf	___aldiv@divisor+1,w
  5947  0BF8  0275               	subwf	___aldiv@dividend+1,w
  5948  0BF9  1D03               	skipz
  5949  0BFA  2BFD               	goto	u1505
  5950  0BFB  0870               	movf	___aldiv@divisor,w
  5951  0BFC  0274               	subwf	___aldiv@dividend,w
  5952  0BFD                     u1505:
  5953  0BFD  1C03               	skipc
  5954  0BFE  2C00               	goto	u1501
  5955  0BFF  2C01               	goto	u1500
  5956  0C00                     u1501:
  5957  0C00  2C10               	goto	l1631
  5958  0C01                     u1500:
  5959  0C01                     l1627:
  5960  0C01  0870               	movf	___aldiv@divisor,w
  5961  0C02  02F4               	subwf	___aldiv@dividend,f
  5962  0C03  0871               	movf	___aldiv@divisor+1,w
  5963  0C04  1C03               	skipc
  5964  0C05  0F71               	incfsz	___aldiv@divisor+1,w
  5965  0C06  02F5               	subwf	___aldiv@dividend+1,f
  5966  0C07  0872               	movf	___aldiv@divisor+2,w
  5967  0C08  1C03               	skipc
  5968  0C09  0F72               	incfsz	___aldiv@divisor+2,w
  5969  0C0A  02F6               	subwf	___aldiv@dividend+2,f
  5970  0C0B  0873               	movf	___aldiv@divisor+3,w
  5971  0C0C  1C03               	skipc
  5972  0C0D  0F73               	incfsz	___aldiv@divisor+3,w
  5973  0C0E  02F7               	subwf	___aldiv@dividend+3,f
  5974  0C0F                     l1629:
  5975  0C0F  1422               	bsf	___aldiv@quotient,0
  5976  0C10                     l1631:
  5977  0C10  3001               	movlw	1
  5978  0C11                     u1515:
  5979  0C11  1003               	clrc
  5980  0C12  0CF3               	rrf	___aldiv@divisor+3,f
  5981  0C13  0CF2               	rrf	___aldiv@divisor+2,f
  5982  0C14  0CF1               	rrf	___aldiv@divisor+1,f
  5983  0C15  0CF0               	rrf	___aldiv@divisor,f
  5984  0C16  3EFF               	addlw	-1
  5985  0C17  1D03               	skipz
  5986  0C18  2C11               	goto	u1515
  5987  0C19                     l1633:
  5988  0C19  3001               	movlw	1
  5989  0C1A  02A0               	subwf	___aldiv@counter,f
  5990  0C1B  1D03               	btfss	3,2
  5991  0C1C  2C1E               	goto	u1521
  5992  0C1D  2C1F               	goto	u1520
  5993  0C1E                     u1521:
  5994  0C1E  2BE6               	goto	l1623
  5995  0C1F                     u1520:
  5996  0C1F                     l1635:
  5997  0C1F  0821               	movf	___aldiv@sign,w
  5998  0C20  1903               	btfsc	3,2
  5999  0C21  2C23               	goto	u1531
  6000  0C22  2C24               	goto	u1530
  6001  0C23                     u1531:
  6002  0C23  2C2F               	goto	l1639
  6003  0C24                     u1530:
  6004  0C24                     l1637:
  6005  0C24  09A2               	comf	___aldiv@quotient,f
  6006  0C25  09A3               	comf	___aldiv@quotient+1,f
  6007  0C26  09A4               	comf	___aldiv@quotient+2,f
  6008  0C27  09A5               	comf	___aldiv@quotient+3,f
  6009  0C28  0AA2               	incf	___aldiv@quotient,f
  6010  0C29  1903               	skipnz
  6011  0C2A  0AA3               	incf	___aldiv@quotient+1,f
  6012  0C2B  1903               	skipnz
  6013  0C2C  0AA4               	incf	___aldiv@quotient+2,f
  6014  0C2D  1903               	skipnz
  6015  0C2E  0AA5               	incf	___aldiv@quotient+3,f
  6016  0C2F                     l1639:
  6017  0C2F  0825               	movf	___aldiv@quotient+3,w
  6018  0C30  00F3               	movwf	?___aldiv+3
  6019  0C31  0824               	movf	___aldiv@quotient+2,w
  6020  0C32  00F2               	movwf	?___aldiv+2
  6021  0C33  0823               	movf	___aldiv@quotient+1,w
  6022  0C34  00F1               	movwf	?___aldiv+1
  6023  0C35  0822               	movf	___aldiv@quotient,w
  6024  0C36  00F0               	movwf	?___aldiv
  6025  0C37                     l398:
  6026  0C37  0008               	return
  6027  0C38                     __end_of___aldiv:
  6028                           
  6029                           	psect	text19
  6030  0CEF                     __ptext19:	
  6031 ;; *************** function _BMP280_begin *****************
  6032 ;; Defined at:
  6033 ;;		line 171 in file "BMP280.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  mode            1    wreg     unsigned char 
  6036 ;;  T_sampling      1    3[BANK0 ] unsigned char 
  6037 ;;  P_sampling      1    4[BANK0 ] unsigned char 
  6038 ;;  filter          1    5[BANK0 ] unsigned char 
  6039 ;;  standby         1    6[BANK0 ] unsigned char 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  mode            1   13[COMMON] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  2    3[BANK0 ] int 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0, pclath, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6051 ;;      Params:         0       4       0       0       0
  6052 ;;      Locals:         1       0       0       0       0
  6053 ;;      Temps:          0       4       0       0       0
  6054 ;;      Totals:         1       8       0       0       0
  6055 ;;Total ram usage:        9 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    4
  6058 ;; This function calls:
  6059 ;;		_BMP280_Configure
  6060 ;;		_BMP280_Read16
  6061 ;;		_BMP280_Read8
  6062 ;;		_BMP280_Write
  6063 ;; This function is called by:
  6064 ;;		_main
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           
  6069                           ;psect for function _BMP280_begin
  6070  0CEF                     _BMP280_begin:
  6071                           
  6072                           ;incstack = 0
  6073                           ; Regs used in _BMP280_begin: [wreg+status,2+status,0+pclath+cstack]
  6074                           ;BMP280_begin@mode stored from wreg
  6075  0CEF  00FD               	movwf	BMP280_begin@mode
  6076  0CF0                     l1711:
  6077                           
  6078                           ;BMP280.c: 171: int BMP280_begin(char mode,;BMP280.c: 172:                   char T_samp
      +                          ling,;BMP280.c: 173:                   char P_sampling,;BMP280.c: 174:                  
      +                           char filter,;BMP280.c: 175:                   char standby);BMP280.c: 176: {;BMP280.c: 
      +                          177:   if(BMP280_Read8(0xD0) != 0x58)
  6079  0CF0  30D0               	movlw	208
  6080  0CF1  120A  158A  207E  120A  158A  	fcall	_BMP280_Read8
  6081  0CF6  3A58               	xorlw	88
  6082  0CF7  1903               	skipnz
  6083  0CF8  2CFA               	goto	u1691
  6084  0CF9  2CFB               	goto	u1690
  6085  0CFA                     u1691:
  6086  0CFA  2D00               	goto	l1717
  6087  0CFB                     u1690:
  6088  0CFB                     l1713:
  6089                           
  6090                           ;BMP280.c: 178:     return 0;
  6091  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  6092  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  6093  0CFD  01A3               	clrf	?_BMP280_begin
  6094  0CFE  01A4               	clrf	?_BMP280_begin+1
  6095  0CFF  2DD4               	goto	l187
  6096  0D00                     l1717:
  6097                           
  6098                           ;BMP280.c: 181:   BMP280_Write(0xE0, 0xB6);
  6099  0D00  30B6               	movlw	182
  6100  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  6101  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  6102  0D03  00A7               	movwf	??_BMP280_begin
  6103  0D04  0827               	movf	??_BMP280_begin,w
  6104  0D05  00F2               	movwf	BMP280_Write@_data
  6105  0D06  30E0               	movlw	224
  6106  0D07  160A  118A  2733  120A  158A  	fcall	_BMP280_Write
  6107  0D0C                     l1719:
  6108                           
  6109                           ;BMP280.c: 182:   _delay((unsigned long)((100)*(8000000/4000.0)));
  6110  0D0C  3002               	movlw	2
  6111  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  6112  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  6113  0D0F  00A9               	movwf	??_BMP280_begin+2
  6114  0D10  3004               	movlw	4
  6115  0D11  00A8               	movwf	??_BMP280_begin+1
  6116  0D12  30B9               	movlw	185
  6117  0D13  00A7               	movwf	??_BMP280_begin
  6118  0D14                     u2497:
  6119  0D14  0BA7               	decfsz	??_BMP280_begin,f
  6120  0D15  2D14               	goto	u2497
  6121  0D16  0BA8               	decfsz	??_BMP280_begin+1,f
  6122  0D17  2D14               	goto	u2497
  6123  0D18  0BA9               	decfsz	??_BMP280_begin+2,f
  6124  0D19  2D14               	goto	u2497
  6125  0D1A  2D1B               	nop2
  6126  0D1B                     l1723:	
  6127                           ;BMP280.c: 185:   while ( (BMP280_Read8(0xF3) & 0x01) == 0x01 )
  6128                           
  6129                           
  6130                           ;BMP280.c: 185:   while ( (BMP280_Read8(0xF3) & 0x01) == 0x01 )
  6131  0D1B  30F3               	movlw	243
  6132  0D1C  120A  158A  207E  120A  158A  	fcall	_BMP280_Read8
  6133  0D21  3901               	andlw	1
  6134  0D22  1D03               	btfss	3,2
  6135  0D23  2D25               	goto	u1701
  6136  0D24  2D26               	goto	u1700
  6137  0D25                     u1701:
  6138  0D25  2D0C               	goto	l1719
  6139  0D26                     u1700:
  6140  0D26                     l1725:
  6141                           
  6142                           ;BMP280.c: 188:   BMP280_calib.dig_T1 = BMP280_Read16(0x88);
  6143  0D26  3088               	movlw	136
  6144  0D27  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6145  0D2C  0877               	movf	?_BMP280_Read16+1,w
  6146  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
  6147  0D2E  1303               	bcf	3,6	;RP1=0, select bank1
  6148  0D2F  00A9               	movwf	(_BMP280_calib+1)^(0+128)
  6149  0D30  0876               	movf	?_BMP280_Read16,w
  6150  0D31  00A8               	movwf	_BMP280_calib^(0+128)
  6151                           
  6152                           ;BMP280.c: 189:   BMP280_calib.dig_T2 = BMP280_Read16(0x8A);
  6153  0D32  308A               	movlw	138
  6154  0D33  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6155  0D38  0877               	movf	?_BMP280_Read16+1,w
  6156  0D39  1683               	bsf	3,5	;RP0=1, select bank1
  6157  0D3A  1303               	bcf	3,6	;RP1=0, select bank1
  6158  0D3B  00AB               	movwf	((_BMP280_calib+1)^(0+128)+2)
  6159  0D3C  0876               	movf	?_BMP280_Read16,w
  6160  0D3D  00AA               	movwf	(_BMP280_calib^(0+128)+2)
  6161                           
  6162                           ;BMP280.c: 190:   BMP280_calib.dig_T3 = BMP280_Read16(0x8C);
  6163  0D3E  308C               	movlw	140
  6164  0D3F  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6165  0D44  0877               	movf	?_BMP280_Read16+1,w
  6166  0D45  1683               	bsf	3,5	;RP0=1, select bank1
  6167  0D46  1303               	bcf	3,6	;RP1=0, select bank1
  6168  0D47  00AD               	movwf	((_BMP280_calib+1)^(0+128)+4)
  6169  0D48  0876               	movf	?_BMP280_Read16,w
  6170  0D49  00AC               	movwf	(_BMP280_calib^(0+128)+4)
  6171                           
  6172                           ;BMP280.c: 192:   BMP280_calib.dig_P1 = BMP280_Read16(0x8E);
  6173  0D4A  308E               	movlw	142
  6174  0D4B  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6175  0D50  0877               	movf	?_BMP280_Read16+1,w
  6176  0D51  1683               	bsf	3,5	;RP0=1, select bank1
  6177  0D52  1303               	bcf	3,6	;RP1=0, select bank1
  6178  0D53  00AF               	movwf	((_BMP280_calib+1)^(0+128)+6)
  6179  0D54  0876               	movf	?_BMP280_Read16,w
  6180  0D55  00AE               	movwf	(_BMP280_calib^(0+128)+6)
  6181                           
  6182                           ;BMP280.c: 193:   BMP280_calib.dig_P2 = BMP280_Read16(0x90);
  6183  0D56  3090               	movlw	144
  6184  0D57  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6185  0D5C  0877               	movf	?_BMP280_Read16+1,w
  6186  0D5D  1683               	bsf	3,5	;RP0=1, select bank1
  6187  0D5E  1303               	bcf	3,6	;RP1=0, select bank1
  6188  0D5F  00B1               	movwf	((_BMP280_calib+1)^(0+128)+8)
  6189  0D60  0876               	movf	?_BMP280_Read16,w
  6190  0D61  00B0               	movwf	(_BMP280_calib^(0+128)+8)
  6191                           
  6192                           ;BMP280.c: 194:   BMP280_calib.dig_P3 = BMP280_Read16(0x92);
  6193  0D62  3092               	movlw	146
  6194  0D63  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6195  0D68  0877               	movf	?_BMP280_Read16+1,w
  6196  0D69  1683               	bsf	3,5	;RP0=1, select bank1
  6197  0D6A  1303               	bcf	3,6	;RP1=0, select bank1
  6198  0D6B  00B3               	movwf	((_BMP280_calib+1)^(0+128)+10)
  6199  0D6C  0876               	movf	?_BMP280_Read16,w
  6200  0D6D  00B2               	movwf	(_BMP280_calib^(0+128)+10)
  6201                           
  6202                           ;BMP280.c: 195:   BMP280_calib.dig_P4 = BMP280_Read16(0x94);
  6203  0D6E  3094               	movlw	148
  6204  0D6F  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6205  0D74  0877               	movf	?_BMP280_Read16+1,w
  6206  0D75  1683               	bsf	3,5	;RP0=1, select bank1
  6207  0D76  1303               	bcf	3,6	;RP1=0, select bank1
  6208  0D77  00B5               	movwf	((_BMP280_calib+1)^(0+128)+12)
  6209  0D78  0876               	movf	?_BMP280_Read16,w
  6210  0D79  00B4               	movwf	(_BMP280_calib^(0+128)+12)
  6211                           
  6212                           ;BMP280.c: 196:   BMP280_calib.dig_P5 = BMP280_Read16(0x96);
  6213  0D7A  3096               	movlw	150
  6214  0D7B  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6215  0D80  0877               	movf	?_BMP280_Read16+1,w
  6216  0D81  1683               	bsf	3,5	;RP0=1, select bank1
  6217  0D82  1303               	bcf	3,6	;RP1=0, select bank1
  6218  0D83  00B7               	movwf	((_BMP280_calib+1)^(0+128)+14)
  6219  0D84  0876               	movf	?_BMP280_Read16,w
  6220  0D85  00B6               	movwf	(_BMP280_calib^(0+128)+14)
  6221                           
  6222                           ;BMP280.c: 197:   BMP280_calib.dig_P6 = BMP280_Read16(0x98);
  6223  0D86  3098               	movlw	152
  6224  0D87  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6225  0D8C  0877               	movf	?_BMP280_Read16+1,w
  6226  0D8D  1683               	bsf	3,5	;RP0=1, select bank1
  6227  0D8E  1303               	bcf	3,6	;RP1=0, select bank1
  6228  0D8F  00B9               	movwf	((_BMP280_calib+1)^(0+128)+16)
  6229  0D90  0876               	movf	?_BMP280_Read16,w
  6230  0D91  00B8               	movwf	(_BMP280_calib^(0+128)+16)
  6231                           
  6232                           ;BMP280.c: 198:   BMP280_calib.dig_P7 = BMP280_Read16(0x9A);
  6233  0D92  309A               	movlw	154
  6234  0D93  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6235  0D98  0877               	movf	?_BMP280_Read16+1,w
  6236  0D99  1683               	bsf	3,5	;RP0=1, select bank1
  6237  0D9A  1303               	bcf	3,6	;RP1=0, select bank1
  6238  0D9B  00BB               	movwf	((_BMP280_calib+1)^(0+128)+18)
  6239  0D9C  0876               	movf	?_BMP280_Read16,w
  6240  0D9D  00BA               	movwf	(_BMP280_calib^(0+128)+18)
  6241                           
  6242                           ;BMP280.c: 199:   BMP280_calib.dig_P8 = BMP280_Read16(0x9C);
  6243  0D9E  309C               	movlw	156
  6244  0D9F  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6245  0DA4  0877               	movf	?_BMP280_Read16+1,w
  6246  0DA5  1683               	bsf	3,5	;RP0=1, select bank1
  6247  0DA6  1303               	bcf	3,6	;RP1=0, select bank1
  6248  0DA7  00BD               	movwf	((_BMP280_calib+1)^(0+128)+20)
  6249  0DA8  0876               	movf	?_BMP280_Read16,w
  6250  0DA9  00BC               	movwf	(_BMP280_calib^(0+128)+20)
  6251                           
  6252                           ;BMP280.c: 200:   BMP280_calib.dig_P9 = BMP280_Read16(0x9E);
  6253  0DAA  309E               	movlw	158
  6254  0DAB  120A  158A  21D5  120A  158A  	fcall	_BMP280_Read16
  6255  0DB0  0877               	movf	?_BMP280_Read16+1,w
  6256  0DB1  1683               	bsf	3,5	;RP0=1, select bank1
  6257  0DB2  1303               	bcf	3,6	;RP1=0, select bank1
  6258  0DB3  00BF               	movwf	((_BMP280_calib+1)^(0+128)+22)
  6259  0DB4  0876               	movf	?_BMP280_Read16,w
  6260  0DB5  00BE               	movwf	(_BMP280_calib^(0+128)+22)
  6261                           
  6262                           ;BMP280.c: 202:   BMP280_Configure(mode, T_sampling, P_sampling, filter, standby);
  6263  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  6264  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  6265  0DB8  0823               	movf	BMP280_begin@T_sampling,w
  6266  0DB9  00A7               	movwf	??_BMP280_begin
  6267  0DBA  0827               	movf	??_BMP280_begin,w
  6268  0DBB  00F6               	movwf	BMP280_Configure@T_sampling
  6269  0DBC  0824               	movf	BMP280_begin@P_sampling,w
  6270  0DBD  00A8               	movwf	??_BMP280_begin+1
  6271  0DBE  0828               	movf	??_BMP280_begin+1,w
  6272  0DBF  00F7               	movwf	BMP280_Configure@P_sampling
  6273  0DC0  0825               	movf	BMP280_begin@filter,w
  6274  0DC1  00A9               	movwf	??_BMP280_begin+2
  6275  0DC2  0829               	movf	??_BMP280_begin+2,w
  6276  0DC3  00F8               	movwf	BMP280_Configure@filter
  6277  0DC4  0826               	movf	BMP280_begin@standby,w
  6278  0DC5  00AA               	movwf	??_BMP280_begin+3
  6279  0DC6  082A               	movf	??_BMP280_begin+3,w
  6280  0DC7  00F9               	movwf	BMP280_Configure@standby
  6281  0DC8  087D               	movf	BMP280_begin@mode,w
  6282  0DC9  120A  158A  2145  120A  158A  	fcall	_BMP280_Configure
  6283  0DCE                     l1727:
  6284                           
  6285                           ;BMP280.c: 204:   return 1;
  6286  0DCE  3001               	movlw	1
  6287  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
  6288  0DD0  1303               	bcf	3,6	;RP1=0, select bank0
  6289  0DD1  00A3               	movwf	?_BMP280_begin
  6290  0DD2  3000               	movlw	0
  6291  0DD3  00A4               	movwf	?_BMP280_begin+1
  6292  0DD4                     l187:
  6293  0DD4  0008               	return
  6294  0DD5                     __end_of_BMP280_begin:
  6295                           
  6296                           	psect	text20
  6297  087E                     __ptext20:	
  6298 ;; *************** function _BMP280_Read8 *****************
  6299 ;; Defined at:
  6300 ;;		line 121 in file "BMP280.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  reg_addr        1    wreg     unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  reg_addr        1    8[COMMON] unsigned char 
  6305 ;;  ret             1    9[COMMON] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      unsigned char 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6315 ;;      Params:         0       0       0       0       0
  6316 ;;      Locals:         2       0       0       0       0
  6317 ;;      Temps:          2       0       0       0       0
  6318 ;;      Totals:         4       0       0       0       0
  6319 ;;Total ram usage:        4 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    2
  6322 ;; This function calls:
  6323 ;;		_I2C_Master_Read
  6324 ;;		_I2C_Master_Start
  6325 ;;		_I2C_Master_Stop
  6326 ;;		_I2C_Master_Write
  6327 ;; This function is called by:
  6328 ;;		_BMP280_begin
  6329 ;;		_BMP280_ForcedMeasurement
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _BMP280_Read8
  6335  087E                     _BMP280_Read8:
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _BMP280_Read8: [wreg+status,2+status,0+pclath+cstack]
  6339                           ;BMP280_Read8@reg_addr stored from wreg
  6340  087E  00F8               	movwf	BMP280_Read8@reg_addr
  6341  087F                     l1541:
  6342                           
  6343                           ;BMP280.c: 121: uint8_t BMP280_Read8(uint8_t reg_addr);BMP280.c: 122: {;BMP280.c: 123:  
      +                           uint8_t ret;;BMP280.c: 125:   I2C_Master_Start();
  6344  087F  160A  118A  26C4  120A  158A  	fcall	_I2C_Master_Start
  6345                           
  6346                           ;BMP280.c: 126:   I2C_Master_Write(0xEE);
  6347  0884  30EE               	movlw	238
  6348  0885  00F0               	movwf	I2C_Master_Write@d
  6349  0886  3000               	movlw	0
  6350  0887  00F1               	movwf	I2C_Master_Write@d+1
  6351  0888  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  6352                           
  6353                           ;BMP280.c: 127:   I2C_Master_Write(reg_addr);
  6354  088D  0878               	movf	BMP280_Read8@reg_addr,w
  6355  088E  00F6               	movwf	??_BMP280_Read8
  6356  088F  01F7               	clrf	??_BMP280_Read8+1
  6357  0890  0876               	movf	??_BMP280_Read8,w
  6358  0891  00F0               	movwf	I2C_Master_Write@d
  6359  0892  0877               	movf	??_BMP280_Read8+1,w
  6360  0893  00F1               	movwf	I2C_Master_Write@d+1
  6361  0894  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  6362                           
  6363                           ;BMP280.c: 128:   I2C_Master_Start();
  6364  0899  160A  118A  26C4  120A  158A  	fcall	_I2C_Master_Start
  6365                           
  6366                           ;BMP280.c: 129:   I2C_Master_Write(0xEE | 1);
  6367  089E  30EF               	movlw	239
  6368  089F  00F0               	movwf	I2C_Master_Write@d
  6369  08A0  3000               	movlw	0
  6370  08A1  00F1               	movwf	I2C_Master_Write@d+1
  6371  08A2  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  6372                           
  6373                           ;BMP280.c: 130:   ret = I2C_Master_Read(0);
  6374  08A7  3000               	movlw	0
  6375  08A8  00F0               	movwf	I2C_Master_Read@a
  6376  08A9  00F1               	movwf	I2C_Master_Read@a+1
  6377  08AA  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  6378  08AF  0870               	movf	?_I2C_Master_Read,w
  6379  08B0  00F6               	movwf	??_BMP280_Read8
  6380  08B1  0876               	movf	??_BMP280_Read8,w
  6381  08B2  00F9               	movwf	BMP280_Read8@ret
  6382                           
  6383                           ;BMP280.c: 131:   I2C_Master_Stop();
  6384  08B3  120A  118A  2003  120A  158A  	fcall	_I2C_Master_Stop
  6385  08B8                     l1543:
  6386                           
  6387                           ;BMP280.c: 133:   return ret;
  6388  08B8  0879               	movf	BMP280_Read8@ret,w
  6389  08B9                     l177:
  6390  08B9  0008               	return
  6391  08BA                     __end_of_BMP280_Read8:
  6392                           
  6393                           	psect	text21
  6394  09D5                     __ptext21:	
  6395 ;; *************** function _BMP280_Read16 *****************
  6396 ;; Defined at:
  6397 ;;		line 137 in file "BMP280.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  reg_addr        1    wreg     unsigned char 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  reg_addr        1   10[COMMON] unsigned char 
  6402 ;;  ret             2   11[COMMON] struct .
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  2    6[COMMON] unsigned int 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0, pclath, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6412 ;;      Params:         2       0       0       0       0
  6413 ;;      Locals:         3       0       0       0       0
  6414 ;;      Temps:          2       0       0       0       0
  6415 ;;      Totals:         7       0       0       0       0
  6416 ;;Total ram usage:        7 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    2
  6419 ;; This function calls:
  6420 ;;		_I2C_Master_Read
  6421 ;;		_I2C_Master_Start
  6422 ;;		_I2C_Master_Stop
  6423 ;;		_I2C_Master_Write
  6424 ;; This function is called by:
  6425 ;;		_BMP280_begin
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function _BMP280_Read16
  6431  09D5                     _BMP280_Read16:
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in _BMP280_Read16: [wreg+status,2+status,0+pclath+cstack]
  6435                           ;BMP280_Read16@reg_addr stored from wreg
  6436  09D5  00FA               	movwf	BMP280_Read16@reg_addr
  6437  09D6                     l1547:
  6438                           
  6439                           ;BMP280.c: 137: uint16_t BMP280_Read16(uint8_t reg_addr);BMP280.c: 138: {;BMP280.c: 143:
      +                             } ret;;BMP280.c: 145:   I2C_Master_Start();
  6440  09D6  160A  118A  26C4  120A  158A  	fcall	_I2C_Master_Start
  6441                           
  6442                           ;BMP280.c: 146:   I2C_Master_Write(0xEE);
  6443  09DB  30EE               	movlw	238
  6444  09DC  00F0               	movwf	I2C_Master_Write@d
  6445  09DD  3000               	movlw	0
  6446  09DE  00F1               	movwf	I2C_Master_Write@d+1
  6447  09DF  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  6448                           
  6449                           ;BMP280.c: 147:   I2C_Master_Write(reg_addr);
  6450  09E4  087A               	movf	BMP280_Read16@reg_addr,w
  6451  09E5  00F8               	movwf	??_BMP280_Read16
  6452  09E6  01F9               	clrf	??_BMP280_Read16+1
  6453  09E7  0878               	movf	??_BMP280_Read16,w
  6454  09E8  00F0               	movwf	I2C_Master_Write@d
  6455  09E9  0879               	movf	??_BMP280_Read16+1,w
  6456  09EA  00F1               	movwf	I2C_Master_Write@d+1
  6457  09EB  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  6458                           
  6459                           ;BMP280.c: 148:   I2C_Master_Start();
  6460  09F0  160A  118A  26C4  120A  158A  	fcall	_I2C_Master_Start
  6461                           
  6462                           ;BMP280.c: 149:   I2C_Master_Write(0xEE | 1);
  6463  09F5  30EF               	movlw	239
  6464  09F6  00F0               	movwf	I2C_Master_Write@d
  6465  09F7  3000               	movlw	0
  6466  09F8  00F1               	movwf	I2C_Master_Write@d+1
  6467  09F9  160A  118A  26CD  120A  158A  	fcall	_I2C_Master_Write
  6468                           
  6469                           ;BMP280.c: 150:   ret.b[0] = I2C_Master_Read(1);
  6470  09FE  3001               	movlw	1
  6471  09FF  00F0               	movwf	I2C_Master_Read@a
  6472  0A00  3000               	movlw	0
  6473  0A01  00F1               	movwf	I2C_Master_Read@a+1
  6474  0A02  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  6475  0A07  0870               	movf	?_I2C_Master_Read,w
  6476  0A08  00F8               	movwf	??_BMP280_Read16
  6477  0A09  0878               	movf	??_BMP280_Read16,w
  6478  0A0A  00FB               	movwf	BMP280_Read16@ret
  6479                           
  6480                           ;BMP280.c: 151:   ret.b[1] = I2C_Master_Read(0);
  6481  0A0B  3000               	movlw	0
  6482  0A0C  00F0               	movwf	I2C_Master_Read@a
  6483  0A0D  00F1               	movwf	I2C_Master_Read@a+1
  6484  0A0E  160A  118A  2760  120A  158A  	fcall	_I2C_Master_Read
  6485  0A13  0870               	movf	?_I2C_Master_Read,w
  6486  0A14  00F8               	movwf	??_BMP280_Read16
  6487  0A15  0878               	movf	??_BMP280_Read16,w
  6488  0A16  00FC               	movwf	BMP280_Read16@ret+1
  6489                           
  6490                           ;BMP280.c: 152:   I2C_Master_Stop();
  6491  0A17  120A  118A  2003  120A  158A  	fcall	_I2C_Master_Stop
  6492  0A1C                     l1549:
  6493                           
  6494                           ;BMP280.c: 154:   return(ret.w);
  6495  0A1C  087C               	movf	BMP280_Read16@ret+1,w
  6496  0A1D  00F7               	movwf	?_BMP280_Read16+1
  6497  0A1E  087B               	movf	BMP280_Read16@ret,w
  6498  0A1F  00F6               	movwf	?_BMP280_Read16
  6499  0A20                     l180:
  6500  0A20  0008               	return
  6501  0A21                     __end_of_BMP280_Read16:
  6502                           
  6503                           	psect	text22
  6504  1760                     __ptext22:	
  6505 ;; *************** function _I2C_Master_Read *****************
  6506 ;; Defined at:
  6507 ;;		line 74 in file "I2C.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  a               2    0[COMMON] unsigned short 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  temp            2    4[COMMON] unsigned short 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  2    0[COMMON] unsigned short 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6521 ;;      Params:         2       0       0       0       0
  6522 ;;      Locals:         2       0       0       0       0
  6523 ;;      Temps:          2       0       0       0       0
  6524 ;;      Totals:         6       0       0       0       0
  6525 ;;Total ram usage:        6 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    1
  6528 ;; This function calls:
  6529 ;;		_I2C_Master_Wait
  6530 ;; This function is called by:
  6531 ;;		_BMP280_Read8
  6532 ;;		_BMP280_Read16
  6533 ;;		_BMP280_Update
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           
  6538                           ;psect for function _I2C_Master_Read
  6539  1760                     _I2C_Master_Read:
  6540  1760                     l1457:	
  6541                           ;incstack = 0
  6542                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6543                           
  6544                           
  6545                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  6546  1760  160A  118A  26D7  160A  118A  	fcall	_I2C_Master_Wait
  6547  1765                     l1459:
  6548                           
  6549                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  6550  1765  1683               	bsf	3,5	;RP0=1, select bank1
  6551  1766  1303               	bcf	3,6	;RP1=0, select bank1
  6552  1767  1591               	bsf	17,3	;volatile
  6553                           
  6554                           ;I2C.c: 79:     I2C_Master_Wait();
  6555  1768  160A  118A  26D7  160A  118A  	fcall	_I2C_Master_Wait
  6556  176D                     l1461:
  6557                           
  6558                           ;I2C.c: 80:     temp = SSPBUF;
  6559  176D  1283               	bcf	3,5	;RP0=0, select bank0
  6560  176E  1303               	bcf	3,6	;RP1=0, select bank0
  6561  176F  0813               	movf	19,w	;volatile
  6562  1770  00F2               	movwf	??_I2C_Master_Read
  6563  1771  01F3               	clrf	??_I2C_Master_Read+1
  6564  1772  0872               	movf	??_I2C_Master_Read,w
  6565  1773  00F4               	movwf	I2C_Master_Read@temp
  6566  1774  0873               	movf	??_I2C_Master_Read+1,w
  6567  1775  00F5               	movwf	I2C_Master_Read@temp+1
  6568  1776                     l1463:
  6569                           
  6570                           ;I2C.c: 81:     I2C_Master_Wait();
  6571  1776  160A  118A  26D7  160A  118A  	fcall	_I2C_Master_Wait
  6572  177B                     l1465:
  6573                           
  6574                           ;I2C.c: 82:     if(a == 1){
  6575  177B  0370               	decf	I2C_Master_Read@a,w
  6576  177C  0471               	iorwf	I2C_Master_Read@a+1,w
  6577  177D  1D03               	btfss	3,2
  6578  177E  2F80               	goto	u1221
  6579  177F  2F81               	goto	u1220
  6580  1780                     u1221:
  6581  1780  2F85               	goto	l148
  6582  1781                     u1220:
  6583  1781                     l1467:
  6584                           
  6585                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  6586  1781  1683               	bsf	3,5	;RP0=1, select bank1
  6587  1782  1303               	bcf	3,6	;RP1=0, select bank1
  6588  1783  1291               	bcf	17,5	;volatile
  6589                           
  6590                           ;I2C.c: 84:     }else{
  6591  1784  2F88               	goto	l149
  6592  1785                     l148:
  6593                           
  6594                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  6595  1785  1683               	bsf	3,5	;RP0=1, select bank1
  6596  1786  1303               	bcf	3,6	;RP1=0, select bank1
  6597  1787  1691               	bsf	17,5	;volatile
  6598  1788                     l149:	
  6599                           ;I2C.c: 86:     }
  6600                           
  6601                           
  6602                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  6603  1788  1611               	bsf	17,4	;volatile
  6604  1789                     l1469:
  6605                           
  6606                           ;I2C.c: 88:     return temp;
  6607  1789  0875               	movf	I2C_Master_Read@temp+1,w
  6608  178A  00F1               	movwf	?_I2C_Master_Read+1
  6609  178B  0874               	movf	I2C_Master_Read@temp,w
  6610  178C  00F0               	movwf	?_I2C_Master_Read
  6611  178D                     l150:
  6612  178D  0008               	return
  6613  178E                     __end_of_I2C_Master_Read:
  6614                           
  6615                           	psect	text23
  6616  0945                     __ptext23:	
  6617 ;; *************** function _BMP280_Configure *****************
  6618 ;; Defined at:
  6619 ;;		line 158 in file "BMP280.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  mode            1    wreg     unsigned char 
  6622 ;;  T_sampling      1    6[COMMON] unsigned char 
  6623 ;;  P_sampling      1    7[COMMON] unsigned char 
  6624 ;;  filter          1    8[COMMON] unsigned char 
  6625 ;;  standby         1    9[COMMON] unsigned char 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  mode            1    0[BANK0 ] unsigned char 
  6628 ;;  _config         1    2[BANK0 ] unsigned char 
  6629 ;;  _ctrl_meas      1    1[BANK0 ] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6639 ;;      Params:         4       0       0       0       0
  6640 ;;      Locals:         0       3       0       0       0
  6641 ;;      Temps:          3       0       0       0       0
  6642 ;;      Totals:         7       3       0       0       0
  6643 ;;Total ram usage:       10 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    3
  6646 ;; This function calls:
  6647 ;;		_BMP280_Write
  6648 ;; This function is called by:
  6649 ;;		_BMP280_begin
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _BMP280_Configure
  6655  0945                     _BMP280_Configure:
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _BMP280_Configure: [wreg+status,2+status,0+pclath+cstack]
  6659                           ;BMP280_Configure@mode stored from wreg
  6660  0945  1283               	bcf	3,5	;RP0=0, select bank0
  6661  0946  1303               	bcf	3,6	;RP1=0, select bank0
  6662  0947  00A0               	movwf	BMP280_Configure@mode
  6663  0948                     l1553:
  6664                           
  6665                           ;BMP280.c: 158: void BMP280_Configure(char mode, char T_sampling,;BMP280.c: 159:        
      +                                         char P_sampling, char filter, char standby);BMP280.c: 160: {;BMP280.c: 16
      +                          1:   uint8_t _ctrl_meas, _config;;BMP280.c: 163:   _config = ((standby << 5) | (filter <
      +                          < 2)) & 0xFC;
  6666  0948  0878               	movf	BMP280_Configure@filter,w
  6667  0949  00FA               	movwf	??_BMP280_Configure
  6668  094A  3002               	movlw	2
  6669  094B                     u1335:
  6670  094B  1003               	clrc
  6671  094C  0DFA               	rlf	??_BMP280_Configure,f
  6672  094D  3EFF               	addlw	-1
  6673  094E  1D03               	skipz
  6674  094F  294B               	goto	u1335
  6675  0950  0879               	movf	BMP280_Configure@standby,w
  6676  0951  00FB               	movwf	??_BMP280_Configure+1
  6677  0952  3004               	movlw	4
  6678  0953                     u1345:
  6679  0953  1003               	clrc
  6680  0954  0DFB               	rlf	??_BMP280_Configure+1,f
  6681  0955  3EFF               	addlw	-1
  6682  0956  1D03               	skipz
  6683  0957  2953               	goto	u1345
  6684  0958  1003               	clrc
  6685  0959  0D7B               	rlf	??_BMP280_Configure+1,w
  6686  095A  047A               	iorwf	??_BMP280_Configure,w
  6687  095B  39FC               	andlw	252
  6688  095C  00FC               	movwf	??_BMP280_Configure+2
  6689  095D  087C               	movf	??_BMP280_Configure+2,w
  6690  095E  00A2               	movwf	BMP280_Configure@_config
  6691                           
  6692                           ;BMP280.c: 164:   _ctrl_meas = (T_sampling << 5) | (P_sampling << 2) | mode;
  6693  095F  0877               	movf	BMP280_Configure@P_sampling,w
  6694  0960  00FA               	movwf	??_BMP280_Configure
  6695  0961  3002               	movlw	2
  6696  0962                     u1355:
  6697  0962  1003               	clrc
  6698  0963  0DFA               	rlf	??_BMP280_Configure,f
  6699  0964  3EFF               	addlw	-1
  6700  0965  1D03               	skipz
  6701  0966  2962               	goto	u1355
  6702  0967  0876               	movf	BMP280_Configure@T_sampling,w
  6703  0968  00FB               	movwf	??_BMP280_Configure+1
  6704  0969  3004               	movlw	4
  6705  096A                     u1365:
  6706  096A  1003               	clrc
  6707  096B  0DFB               	rlf	??_BMP280_Configure+1,f
  6708  096C  3EFF               	addlw	-1
  6709  096D  1D03               	skipz
  6710  096E  296A               	goto	u1365
  6711  096F  1003               	clrc
  6712  0970  0D7B               	rlf	??_BMP280_Configure+1,w
  6713  0971  047A               	iorwf	??_BMP280_Configure,w
  6714  0972  0420               	iorwf	BMP280_Configure@mode,w
  6715  0973  00FC               	movwf	??_BMP280_Configure+2
  6716  0974  087C               	movf	??_BMP280_Configure+2,w
  6717  0975  00A1               	movwf	BMP280_Configure@_ctrl_meas
  6718  0976                     l1555:
  6719                           
  6720                           ;BMP280.c: 166:   BMP280_Write(0xF5, _config);
  6721  0976  0822               	movf	BMP280_Configure@_config,w
  6722  0977  00FA               	movwf	??_BMP280_Configure
  6723  0978  087A               	movf	??_BMP280_Configure,w
  6724  0979  00F2               	movwf	BMP280_Write@_data
  6725  097A  30F5               	movlw	245
  6726  097B  160A  118A  2733  120A  158A  	fcall	_BMP280_Write
  6727  0980                     l1557:
  6728                           
  6729                           ;BMP280.c: 167:   BMP280_Write(0xF4, _ctrl_meas);
  6730  0980  1283               	bcf	3,5	;RP0=0, select bank0
  6731  0981  1303               	bcf	3,6	;RP1=0, select bank0
  6732  0982  0821               	movf	BMP280_Configure@_ctrl_meas,w
  6733  0983  00FA               	movwf	??_BMP280_Configure
  6734  0984  087A               	movf	??_BMP280_Configure,w
  6735  0985  00F2               	movwf	BMP280_Write@_data
  6736  0986  30F4               	movlw	244
  6737  0987  160A  118A  2733  120A  158A  	fcall	_BMP280_Write
  6738  098C                     l183:
  6739  098C  0008               	return
  6740  098D                     __end_of_BMP280_Configure:
  6741                           
  6742                           	psect	text24
  6743  1733                     __ptext24:	
  6744 ;; *************** function _BMP280_Write *****************
  6745 ;; Defined at:
  6746 ;;		line 111 in file "BMP280.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  reg_addr        1    wreg     unsigned char 
  6749 ;;  _data           1    2[COMMON] unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  reg_addr        1    5[COMMON] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1    wreg      void 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0, pclath, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6761 ;;      Params:         1       0       0       0       0
  6762 ;;      Locals:         1       0       0       0       0
  6763 ;;      Temps:          2       0       0       0       0
  6764 ;;      Totals:         4       0       0       0       0
  6765 ;;Total ram usage:        4 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    2
  6768 ;; This function calls:
  6769 ;;		_I2C_Master_Start
  6770 ;;		_I2C_Master_Stop
  6771 ;;		_I2C_Master_Write
  6772 ;; This function is called by:
  6773 ;;		_BMP280_Configure
  6774 ;;		_BMP280_begin
  6775 ;;		_BMP280_ForcedMeasurement
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _BMP280_Write
  6781  1733                     _BMP280_Write:
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in _BMP280_Write: [wreg+status,2+status,0+pclath+cstack]
  6785                           ;BMP280_Write@reg_addr stored from wreg
  6786  1733  00F5               	movwf	BMP280_Write@reg_addr
  6787  1734                     l1473:
  6788                           
  6789                           ;BMP280.c: 111: void BMP280_Write(uint8_t reg_addr, uint8_t _data);BMP280.c: 112: {;BMP2
      +                          80.c: 113:   I2C_Master_Start();
  6790  1734  160A  118A  26C4  160A  118A  	fcall	_I2C_Master_Start
  6791                           
  6792                           ;BMP280.c: 114:   I2C_Master_Write(0xEE);
  6793  1739  30EE               	movlw	238
  6794  173A  00F0               	movwf	I2C_Master_Write@d
  6795  173B  3000               	movlw	0
  6796  173C  00F1               	movwf	I2C_Master_Write@d+1
  6797  173D  160A  118A  26CD  160A  118A  	fcall	_I2C_Master_Write
  6798                           
  6799                           ;BMP280.c: 115:   I2C_Master_Write(reg_addr);
  6800  1742  0875               	movf	BMP280_Write@reg_addr,w
  6801  1743  00F3               	movwf	??_BMP280_Write
  6802  1744  01F4               	clrf	??_BMP280_Write+1
  6803  1745  0873               	movf	??_BMP280_Write,w
  6804  1746  00F0               	movwf	I2C_Master_Write@d
  6805  1747  0874               	movf	??_BMP280_Write+1,w
  6806  1748  00F1               	movwf	I2C_Master_Write@d+1
  6807  1749  160A  118A  26CD  160A  118A  	fcall	_I2C_Master_Write
  6808                           
  6809                           ;BMP280.c: 116:   I2C_Master_Write(_data);
  6810  174E  0872               	movf	BMP280_Write@_data,w
  6811  174F  00F3               	movwf	??_BMP280_Write
  6812  1750  01F4               	clrf	??_BMP280_Write+1
  6813  1751  0873               	movf	??_BMP280_Write,w
  6814  1752  00F0               	movwf	I2C_Master_Write@d
  6815  1753  0874               	movf	??_BMP280_Write+1,w
  6816  1754  00F1               	movwf	I2C_Master_Write@d+1
  6817  1755  160A  118A  26CD  160A  118A  	fcall	_I2C_Master_Write
  6818                           
  6819                           ;BMP280.c: 117:   I2C_Master_Stop();
  6820  175A  120A  118A  2003  160A  118A  	fcall	_I2C_Master_Stop
  6821  175F                     l174:
  6822  175F  0008               	return
  6823  1760                     __end_of_BMP280_Write:
  6824                           
  6825                           	psect	text25
  6826  16CD                     __ptext25:	
  6827 ;; *************** function _I2C_Master_Write *****************
  6828 ;; Defined at:
  6829 ;;		line 65 in file "I2C.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;  d               2    0[COMMON] unsigned int 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, status,2, status,0, pclath, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6843 ;;      Params:         2       0       0       0       0
  6844 ;;      Locals:         0       0       0       0       0
  6845 ;;      Temps:          0       0       0       0       0
  6846 ;;      Totals:         2       0       0       0       0
  6847 ;;Total ram usage:        2 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    1
  6850 ;; This function calls:
  6851 ;;		_I2C_Master_Wait
  6852 ;; This function is called by:
  6853 ;;		_BMP280_Write
  6854 ;;		_BMP280_Read8
  6855 ;;		_BMP280_Read16
  6856 ;;		_BMP280_Update
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           
  6861                           ;psect for function _I2C_Master_Write
  6862  16CD                     _I2C_Master_Write:
  6863  16CD                     l1453:	
  6864                           ;incstack = 0
  6865                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6866                           
  6867                           
  6868                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  6869  16CD  160A  118A  26D7  160A  118A  	fcall	_I2C_Master_Wait
  6870  16D2                     l1455:
  6871                           
  6872                           ;I2C.c: 68:     SSPBUF = d;
  6873  16D2  0870               	movf	I2C_Master_Write@d,w
  6874  16D3  1283               	bcf	3,5	;RP0=0, select bank0
  6875  16D4  1303               	bcf	3,6	;RP1=0, select bank0
  6876  16D5  0093               	movwf	19	;volatile
  6877  16D6                     l145:
  6878  16D6  0008               	return
  6879  16D7                     __end_of_I2C_Master_Write:
  6880                           
  6881                           	psect	text26
  6882  0003                     __ptext26:	
  6883 ;; *************** function _I2C_Master_Stop *****************
  6884 ;; Defined at:
  6885 ;;		line 55 in file "I2C.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      void 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0, pclath, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6899 ;;      Params:         0       0       0       0       0
  6900 ;;      Locals:         0       0       0       0       0
  6901 ;;      Temps:          0       0       0       0       0
  6902 ;;      Totals:         0       0       0       0       0
  6903 ;;Total ram usage:        0 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    1
  6906 ;; This function calls:
  6907 ;;		_I2C_Master_Wait
  6908 ;; This function is called by:
  6909 ;;		_BMP280_Write
  6910 ;;		_BMP280_Read8
  6911 ;;		_BMP280_Read16
  6912 ;;		_BMP280_Update
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function _I2C_Master_Stop
  6918  0003                     _I2C_Master_Stop:
  6919  0003                     l1449:	
  6920                           ;incstack = 0
  6921                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6922                           
  6923                           
  6924                           ;I2C.c: 57:     I2C_Master_Wait();
  6925  0003  160A  118A  26D7  120A  118A  	fcall	_I2C_Master_Wait
  6926  0008                     l1451:
  6927                           
  6928                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  6929  0008  1683               	bsf	3,5	;RP0=1, select bank1
  6930  0009  1303               	bcf	3,6	;RP1=0, select bank1
  6931  000A  1511               	bsf	17,2	;volatile
  6932  000B                     l142:
  6933  000B  0008               	return
  6934  000C                     __end_of_I2C_Master_Stop:
  6935                           
  6936                           	psect	text27
  6937  16C4                     __ptext27:	
  6938 ;; *************** function _I2C_Master_Start *****************
  6939 ;; Defined at:
  6940 ;;		line 39 in file "I2C.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6954 ;;      Params:         0       0       0       0       0
  6955 ;;      Locals:         0       0       0       0       0
  6956 ;;      Temps:          0       0       0       0       0
  6957 ;;      Totals:         0       0       0       0       0
  6958 ;;Total ram usage:        0 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    1
  6961 ;; This function calls:
  6962 ;;		_I2C_Master_Wait
  6963 ;; This function is called by:
  6964 ;;		_BMP280_Write
  6965 ;;		_BMP280_Read8
  6966 ;;		_BMP280_Read16
  6967 ;;		_BMP280_Update
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           
  6972                           ;psect for function _I2C_Master_Start
  6973  16C4                     _I2C_Master_Start:
  6974  16C4                     l1445:	
  6975                           ;incstack = 0
  6976                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6977                           
  6978                           
  6979                           ;I2C.c: 41:     I2C_Master_Wait();
  6980  16C4  160A  118A  26D7  160A  118A  	fcall	_I2C_Master_Wait
  6981  16C9                     l1447:
  6982                           
  6983                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  6984  16C9  1683               	bsf	3,5	;RP0=1, select bank1
  6985  16CA  1303               	bcf	3,6	;RP1=0, select bank1
  6986  16CB  1411               	bsf	17,0	;volatile
  6987  16CC                     l136:
  6988  16CC  0008               	return
  6989  16CD                     __end_of_I2C_Master_Start:
  6990                           
  6991                           	psect	text28
  6992  16D7                     __ptext28:	
  6993 ;; *************** function _I2C_Master_Wait *****************
  6994 ;; Defined at:
  6995 ;;		line 32 in file "I2C.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7009 ;;      Params:         0       0       0       0       0
  7010 ;;      Locals:         0       0       0       0       0
  7011 ;;      Temps:          0       0       0       0       0
  7012 ;;      Totals:         0       0       0       0       0
  7013 ;;Total ram usage:        0 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; This function calls:
  7016 ;;		Nothing
  7017 ;; This function is called by:
  7018 ;;		_I2C_Master_Start
  7019 ;;		_I2C_Master_Stop
  7020 ;;		_I2C_Master_Write
  7021 ;;		_I2C_Master_Read
  7022 ;;		_I2C_Master_RepeatedStart
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _I2C_Master_Wait
  7028  16D7                     _I2C_Master_Wait:
  7029  16D7                     l1441:	
  7030                           ;incstack = 0
  7031                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  7032                           
  7033  16D7                     l130:	
  7034                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7035                           
  7036  16D7  1683               	bsf	3,5	;RP0=1, select bank1
  7037  16D8  1303               	bcf	3,6	;RP1=0, select bank1
  7038  16D9  1914               	btfsc	20,2	;volatile
  7039  16DA  2EDC               	goto	u1201
  7040  16DB  2EDD               	goto	u1200
  7041  16DC                     u1201:
  7042  16DC  2ED7               	goto	l130
  7043  16DD                     u1200:
  7044  16DD                     l1443:
  7045  16DD  0811               	movf	17,w	;volatile
  7046  16DE  391F               	andlw	31
  7047  16DF  1D03               	btfss	3,2
  7048  16E0  2EE2               	goto	u1211
  7049  16E1  2EE3               	goto	u1210
  7050  16E2                     u1211:
  7051  16E2  2ED7               	goto	l130
  7052  16E3                     u1210:
  7053  16E3                     l133:
  7054  16E3  0008               	return
  7055  16E4                     __end_of_I2C_Master_Wait:
  7056  007E                     btemp	set	126	;btemp
  7057  007E                     wtemp0	set	126
  7058                           
  7059                           	psect	config
  7060                           
  7061                           ;Config register CONFIG1 @ 0x2007
  7062                           ;	Oscillator Selection bits
  7063                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  7064                           ;	Watchdog Timer Enable bit
  7065                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  7066                           ;	Power-up Timer Enable bit
  7067                           ;	PWRTE = ON, PWRT enabled
  7068                           ;	RE3/MCLR pin function select bit
  7069                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  7070                           ;	Code Protection bit
  7071                           ;	CP = OFF, Program memory code protection is disabled
  7072                           ;	Data Code Protection bit
  7073                           ;	CPD = OFF, Data memory code protection is disabled
  7074                           ;	Brown Out Reset Selection bits
  7075                           ;	BOREN = OFF, BOR disabled
  7076                           ;	Internal External Switchover bit
  7077                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  7078                           ;	Fail-Safe Clock Monitor Enabled bit
  7079                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  7080                           ;	Low Voltage Programming Enable bit
  7081                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  7082                           ;	In-Circuit Debugger Mode bit
  7083                           ;	DEBUG = 0x1, unprogrammed default
  7084  2007                     	org	8199
  7085  2007  20C4               	dw	8388
  7086                           
  7087                           ;Config register CONFIG2 @ 0x2008
  7088                           ;	Brown-out Reset Selection bit
  7089                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  7090                           ;	Flash Program Memory Self Write Enable bits
  7091                           ;	WRT = OFF, Write protection off
  7092  2008                     	org	8200
  7093  2008  3FFF               	dw	16383

Data Sizes:
    Strings     76
    Constant    10
    Data        0
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      80
    BANK1            80      0      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[15]), STR_4(CODE[16]), STR_3(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> buffer(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    BMP280_readPressure@pres	PTR unsigned long  size(1) Largest target is 4
		 -> pressure(BANK0[4]), 

    BMP280_readTemperature@temp	PTR long  size(1) Largest target is 4
		 -> temperature(BANK0[4]), 

    UART_write@word	PTR unsigned char  size(2) Largest target is 18
		 -> buffer(BANK0[1]), STR_2(CODE[18]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_BMP280_begin
    _main->___lldiv
    _sprintf->___lldiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _I2C_Master_Init->___lldiv
    ___awmod->_abs
    ___awdiv->_abs
    _BMP280_readTemperature->_BMP280_Update
    _BMP280_readTemperature->___lmul
    _BMP280_Update->_I2C_Master_Read
    _BMP280_readPressure->___lldiv
    _BMP280_readPressure->___lmul
    ___lmul->___aldiv
    _BMP280_begin->_BMP280_Configure
    _BMP280_begin->_BMP280_Read16
    _BMP280_Read8->_I2C_Master_Read
    _BMP280_Read16->_I2C_Master_Read
    _BMP280_Configure->_BMP280_Write
    _BMP280_Write->_I2C_Master_Write

Critical Paths under _main in BANK0

    _main->_BMP280_readPressure
    _sprintf->___aldiv
    _setup->_I2C_Master_Init
    _BMP280_readTemperature->___lmul
    _BMP280_readPressure->___lmul
    ___lmul->___aldiv
    _BMP280_begin->_BMP280_Configure

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   33690
                                             59 BANK0      3     3      0
                       _BMP280_begin
                _BMP280_readPressure
             _BMP280_readTemperature
                         _UART_write
                            ___aldiv
                            ___almod
                            ___awdiv
                            ___awmod
                            ___lldiv
                            ___llmod
                                _abs
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    18      9    1849
                                              6 BANK0     19    10      9
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lldiv (ARG)
                            ___llmod (ARG)
                            ___lwdiv
                            ___lwmod
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1086
                    _I2C_Master_Init
                       _USART_CONFIG
 ---------------------------------------------------------------------------------
 (2) _USART_CONFIG                                         5     3      2     218
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     868
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     218
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___llmod                                             10     2      8     311
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     904
                                              4 COMMON     7     3      4
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     756
                                              4 COMMON     9     5      4
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) ___almod                                             11     3      8     448
                                              0 COMMON    11     3      8
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           2     0      2     425
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _BMP280_readTemperature                              33    33      0    8319
                                             14 BANK0     33    33      0
                      _BMP280_Update
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _BMP280_Update                                        8     8      0    1829
                                              6 COMMON     8     8      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _BMP280_readPressure                                 45    45      0    7778
                                             14 BANK0     45    45      0
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8    2372
                                              9 COMMON     5     5      0
                                              6 BANK0      8     0      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     770
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8    3948
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _BMP280_begin                                         9     5      4    6878
                                             13 COMMON     1     1      0
                                              3 BANK0      8     4      4
                   _BMP280_Configure
                      _BMP280_Read16
                       _BMP280_Read8
                       _BMP280_Write
 ---------------------------------------------------------------------------------
 (2) _BMP280_Read8                                         4     4      0    1708
                                              6 COMMON     4     4      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _BMP280_Read16                                        7     5      2    1732
                                              6 COMMON     7     5      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _BMP280_Configure                                    10     6      4    1742
                                              6 COMMON     7     3      4
                                              0 BANK0      3     3      0
                       _BMP280_Write
 ---------------------------------------------------------------------------------
 (2) _BMP280_Write                                         4     3      1    1282
                                              2 COMMON     4     3      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     934
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BMP280_begin
     _BMP280_Configure
       _BMP280_Write
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _BMP280_Read16
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _BMP280_Read8
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _BMP280_Write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _BMP280_readPressure
     ___aldiv
     ___lldiv
     ___lmul
       ___aldiv (ARG)
   _BMP280_readTemperature
     _BMP280_Update
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___aldiv
     ___lmul
       ___aldiv (ARG)
   _UART_write
   ___aldiv
   ___almod
   ___awdiv
     _abs (ARG)
   ___awmod
     _abs (ARG)
   ___lldiv
   ___llmod
   _abs
   _setup
     _I2C_Master_Init
       ___lldiv
     _USART_CONFIG
   _sprintf
     ___aldiv (ARG)
     ___almod (ARG)
     ___awdiv (ARG)
       _abs (ARG)
     ___awmod (ARG)
       _abs (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     _abs (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      7E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      20       7       40.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      7E      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Aug 28 18:15:11 2021

               _BMP280_Configure 0945                                pc 0002                               l65 0935  
                             l74 1716                               l90 0EEA                               l67 0941  
                             l91 0EEA                               l84 170A                               l69 0944  
                             l78 1732                     ___awdiv@sign 007A                               fsr 0004  
                            l200 0CEE                              l130 16D7                              l203 02C2  
                            l133 16E3                              l142 000B                              l150 178D  
                            l207 07EA                              l127 17C5                              l136 16CC  
                            l145 16D6                              l209 067C                              l401 001E  
                            l411 0090                              l148 1785                              l180 0A20  
                            l149 1788                              l174 175F                              l183 098C  
                            l319 0EBC                              l177 08B9                              l337 09D4  
                            l187 0DD4                              l605 17FF                              l359 0B33  
                            l545 0A74                              l388 0BAF                              l476 0B9A  
                            l398 0C37                              l489 0ACD                              l595 08FD  
                            l774 087D                              l775 087D                              _GIE 005F  
        BMP280_Configure@_config 0022                              _abs 086D                              _dec 0063  
                            _cen 0064                              fsr0 0004                              _uni 0062  
                            indf 0000                     ___awmod@sign 007A     __size_of_BMP280_readPressure 0528  
         BMP280_begin@P_sampling 0024                             ?_abs 0070                             l2101 0ECB  
                           l2111 0F49                             l2103 0EE1                             l2041 0DEA  
                           l2113 0FED                             l2105 0EEB                             l2051 0E15  
                           l2043 0DEF                             l2035 0DD8                             l2107 0EF7  
                           l1501 090A                             l2053 0E19                             l2037 0DDD  
                           l2109 0EFD                             l1511 0918                             l1503 090E  
                           l2071 0E4E                             l2055 0E1D                             l2047 0DF0  
                           l2039 0DE3                             l1441 16D7                             l1521 0938  
                           l1505 090F                             l2081 0E92                             l2073 0E54  
                           l2065 0E28                             l2057 0E21                             l2049 0E0D  
                           l1443 16DD                             l1451 0008                             l1611 0BBE  
                           l1603 0B9B                             l1531 1792                             l1523 093D  
                           l1507 0913                             l1515 091C                             l2083 0E99  
                           l2075 0E5B                             l2059 0E26                             l2155 0E02  
                           l1445 16C4                             l1453 16CD                             l1461 176D  
                           l1541 087F                             l1621 0BE2                             l1613 0BC2  
                           l1605 0B9E                             l1533 1795                             l2157 0924  
                           l1509 0917                             l1517 092C                             l1701 16EE  
                           l2085 0E9D                             l2077 0E5F                             l2069 0E44  
                           l1447 16C9                             l1455 16D2                             l1463 1776  
                           l1543 08B8                             l1711 0CF0                             l1631 0C10  
                           l1623 0BE6                             l1615 0BCA                             l1607 0BA2  
                           l1535 17C2                             l1519 0931                             l1703 16F0  
                           l2079 0E64                             l2087 0EA6                             l1449 0003  
                           l1473 1734                             l1553 0948                             l1465 177B  
                           l1457 1760                             l1713 0CFB                             l1633 0C19  
                           l1625 0BEF                             l1617 0BD2                             l1609 0BB3  
                           l1481 0AEE                             l1561 0C39                             l1537 17C3  
                           l1529 178E                             l1705 16F1                             l2089 0EB8  
                           l2097 0EBD                             l1555 0976                             l1467 1781  
                           l1459 1765                             l1547 09D6                             l1723 0D1B  
                           l1627 0C01                             l1619 0BD5                             l1635 0C1F  
                           l1491 0B1C                             l1483 0AF2                             l1475 0ACE  
                           l1571 0C5E                             l1563 0C3E                             l1731 0094  
                           l1539 17C4                             l1707 16F2                             l1651 08CC  
                           l1643 08BA                             l2099 0EC2                             l1557 0980  
                           l1469 1789                             l1549 0A1C                             l1725 0D26  
                           l1717 0D00                             l1637 0C24                             l1629 0C0F  
                           l1493 0B25                             l1485 0AFB                             l1477 0ADE  
                           l1741 0599                             l1581 0CB1                             l1573 0C6B  
                           l1565 0C47                             l1733 0229                             l1901 0A75  
                           l1709 16FB                             l1661 08EC                             l1653 08D0  
                           l1645 08BC                             l1727 0DCE                             l1719 0D0C  
                           l1639 0C2F                             l1487 0B0D                             l1479 0AE1  
                           l1495 0B2B                             l1591 0995                             l1751 065A  
                           l1583 0CBE                             l1575 0C78                             l1567 0C50  
                           l1559 0C38                             l1735 025A                             l1831 0022  
                           l1911 0A85                             l1903 0A76                             l1663 08F3  
                           l1655 08D4                             l1647 08C2                             l1671 17CC  
                           l1489 0B1B                             l1593 099B                             l1753 07DC  
                           l1745 05A2                             l1585 0CCA                             l1577 0C85  
                           l1569 0C55                             l1841 0049                             l1833 002D  
                           l1825 000C                             l1921 0A9E                             l1913 0A8A  
                           l1905 0A7A                             l1657 08E5                             l1649 08C5  
                           l1665 08F9                             l1681 17E8                             l1673 17CF  
                           l1595 09B2                             l1747 0623                             l1739 02C6  
                           l1587 0CCF                             l1579 0CA4                             l1691 170B  
                           l1851 007D                             l1843 005B                             l1835 0035  
                           l1827 000D                             l1923 0AA2                             l1915 0A90  
                           l1931 0ABF                             l1907 0A7F                             l1499 08FF  
                           l1659 08EB                             l1683 17EE                             l1675 17D6  
                           l1597 09BB                             l1589 098D                             l1749 0637  
                           l1693 170C                             l1853 0088                             l1845 0069  
                           l1837 0038                             l1829 0011                             l1861 0B39  
                           l1933 0AC4                             l1925 0AAC                             l1917 0A93  
                           l1909 0A81                             l1941 0A29                             l1757 086D  
                           l1685 17F5                             l1677 17DA                             l1669 17C6  
                           l1599 09CC                             l1695 171C                             l1847 0072  
                           l1839 0045                             l1871 0B4D                             l1863 0B3E  
                           l1935 0AC9                             l1927 0AB2                             l1919 0A9A  
                           l1951 0A5D                             l1943 0A2C                             l1759 0871  
                           l1679 17DE                             l1687 17FB                             l1697 1722  
                           l1849 0078                             l1881 0B63                             l1873 0B4F  
                           l1865 0B40                             l1857 0B34                             l1929 0AB9  
                           l1953 0A66                             l1945 0A39                             l1891 0B86  
                           l1883 0B67                             l1875 0B55                             l1867 0B44  
                           l1859 0B35                             l1947 0A3D                             l1955 0A6C  
                           l1939 0A21                             l1699 16E4                             l1885 0B78  
                           l1877 0B58                             l1893 0B8C                             l1869 0B49  
                           l1949 0A4F                             l1895 0B91                             l1887 0B7E  
                           l1879 0B5F                             l1897 0B96                             l1889 0B7F  
                           STR_1 085B                             STR_2 081A                             STR_3 083C  
                           STR_4 082C                             STR_5 084C                             u1200 16DD  
                           u1201 16DC                             u1210 16E3                             u2010 0011  
                           u1211 16E2                             u2011 0010                             u1220 1781  
                           u2020 0022                             u2100 0B39                             u1300 0931  
                           u1221 1780                             u2021 0021                             u2101 0B38  
                           u1301 0930                             u1230 0ADE                             u2030 0035  
                           u2110 0B44                             u1310 093D                             u1231 0ADD  
                           u2031 0034                             u2111 0B43                             u1311 093C  
                           u2120 0B55                             u2200 0A7A                             u1320 17A5  
                           u1401 09A4                             u2121 0B54                             u2201 0A79  
                           u1250 0AF2                             u1402 09AB                             u2050 0049  
                           u2210 0A85                             u1251 0AF1                             u1403 09B2  
                           u2051 0048                             u2211 0A84                             u1500 0C01  
                           u2060 005B                             u2140 0B67                             u2220 0A90  
                           u1501 0C00                             u1245 0AE3                             u2061 005A  
                           u2045 003A                             u2141 0B66                             u2221 0A8F  
                           u1325 17A0                             u1270 0B0D                             u1430 09CC  
                           u2310 0A3D                             u1335 094B                             u1271 0B0C  
                           u1431 09CB                             u1415 09B4                             u2135 0B59  
                           u2311 0A3C                             u1520 0C1F                             u1440 0BA2  
                           u2080 0078                             u2160 0B78                             u2240 0AA2  
                           u2320 0A4F                             u1600 08F9                             u2400 0E1D  
                           u1345 0953                             u1521 0C1E                             u1505 0BFD  
                           u1441 0BA1                             u1265 0AF4                             u1425 09BC  
                           u2081 0077                             u2065 0057                             u2161 0B77  
                           u2241 0AA1                             u2321 0A4E                             u2305 0A2E  
                           u1601 08F8                             u2401 0E1C                             u1530 0C24  
                           u1450 0BB3                             u1290 0B2B                             u1370 0C93  
                           u2090 007D                             u2250 0AAC                             u1610 17CC  
                           u2410 0E43                             u1355 0962                             u1531 0C23  
                           u1515 0C11                             u1451 0BB2                             u1291 0B2A  
                           u1275 0B09                             u2091 007C                             u2075 006A  
                           u2155 0B68                             u2251 0AAB                             u2235 0A94  
                           u1611 17CB                             u2411 0E42                             u1700 0D26  
                           u1460 0BD2                             u1380 0CDD                             u2180 0B8C  
                           u2340 0A6C                             u1540 08C2                             u2420 0E4E  
                           u1365 096A                             u1701 0D25                             u1461 0BD1  
                           u1285 0B1D                             u2181 0B8B                             u2165 0B74  
                           u2341 0A6B                             u2325 0A4B                             u1541 08C1  
                           u2421 0E4D                             u1390 099B                             u1710 00AD  
                           u2190 0B91                             u2270 0ABF                             u1630 17DE  
                           u2430 0E54                             u1391 099A                             u1375 0C8E  
                           u2191 0B90                             u2175 0B80                             u2271 0ABE  
                           u2255 0AA8                             u2335 0A5E                             u1631 17DD  
                           u2431 0E53                             u2415 0E3F                             u1480 0BE6  
                           u1800 0415                             u2280 0AC4                             u1560 08D4  
                           u1640 17E8                             u2440 0EA6                             u1481 0BE5  
                           u1801 0416                             u1385 0CD8                             u1721 00D6  
                           u2281 0AC3                             u2265 0AB3                             u1561 08D3  
                           u1641 17E7                             u1625 17D0                             u2441 0EA5  
                           u1810 0511                             u1802 041B                             u1722 00D7  
                           u2290 0A29                             u2450 0EB8                             u1475 0BD7  
                           u1811 0512                             u1803 041C                             u1731 015E  
                           u1723 00DC                             u1715 00A8                             u2291 0A28  
                           u1555 08C6                             u2451 0EB7                             u1900 0723  
                           u1820 055A                             u1812 0517                             u1732 015F  
                           u1724 00DD                             u1580 08E5                             u1660 17FB  
                           u2460 0EE1                             u1821 055B                             u1813 0518  
                           u1741 01A7                             u1733 0164                             u1725 00E2  
                           u1581 08E4                             u1661 17FA                             u1645 17E4  
                           u2461 0EE0                             u1910 078D                             u1830 05A1  
                           u1822 0560                             u1750 029A                             u1742 01A8  
                           u1734 0165                             u1726 00E3                             u1670 171C  
                           u2390 0DE3                             u2470 0EFD                             u1495 0BE8  
                           u1911 078E                             u1831 05A0                             u1823 0561  
                           u1751 029B                             u1743 01AD                             u1735 016A  
                           u1671 171B                             u1575 08D5                             u1655 17EF  
                           u2391 0DE2                             u2471 0EFC                             u1920 079F  
                           u1912 0793                             u1760 02EE                             u1752 02A0  
                           u1744 01AE                             u1736 016B                             u1680 1732  
                           u1921 07A0                             u1913 0794                             u1905 071E  
                           u1841 05E5                             u1761 02EF                             u1753 02A1  
                           u1745 01B3                             u1681 1731                             u1585 08E1  
                           u1690 0CFB                             u1922 07A5                             u1850 05F9  
                           u1842 05E6                             u1770 03C3                             u1762 02F4  
                           u1746 01B4                             u1930 0871                             u1691 0CFA  
                           u1923 07A6                             u1851 05FA                             u1843 05EB  
                           u1763 02F5                             u1931 0870                             u1595 08ED  
                           u1860 0637                             u1852 05FF                             u1844 05EC  
                           u1780 03CD                             u1861 0636                             u1853 0600  
                           u1845 05F1                             u1781 03CE                             u1870 068A  
                           u1846 05F2                             u1790 03F4                             u1782 03D3  
                           u1863 0633                             u1783 03D4                             u1775 03BE  
                           u2487 0FF5                             u1880 06A3                             u2497 0D14  
                           u1890 06C3                             u1875 0685                             u1795 03EF  
                           _PEIE 005E                             u1885 069E                             u1895 06BE  
                           _TXEN 04C5          BMP280_Configure@standby 0079                             abs@a 0070  
                           _main 0EBD                             _pre1 0066                             _pre2 0065  
                           btemp 007E                             start 0000  __size_of_BMP280_readTemperature 0232  
         BMP280_begin@T_sampling 0023                            ??_abs 0072            __size_of_BMP280_Read8 003C  
               ?_I2C_Master_Init 0020                 ?_I2C_Master_Read 0070                 ?_I2C_Master_Wait 0070  
          __size_of_BMP280_Write 002D                 ?_I2C_Master_Stop 0070            __size_of_BMP280_begin 00E6  
                __end_of___aldiv 0C38                  __end_of___almod 0091                            ?_main 0070  
                __end_of___awdiv 0B9B                  __end_of___awmod 0ACE                            _ANSEL 0188  
                __end_of___lldiv 0B34                  ___awdiv@divisor 0074                  __end_of___llmod 0A75  
                __end_of___lwdiv 08FE                  __end_of___lwmod 1800                  ___awdiv@counter 0079  
                BMP280_Read8@ret 0079      _BMP280_readTemperature$1100 004B      _BMP280_readTemperature$1101 0046  
                          _SPBRG 0099                            _TRISA 0085                            _TRISB 0086  
                          _TRISC 0087                            _TRISD 0088                            _SSPIE 0463  
                          _SSPIF 0063                            _TXREG 0019              ___lmul@multiplicand 002A  
               USART_CONFIG@frec 0074                            _adc_P 00A4                            _adc_T 005E  
                __end_of_dpowers 081A                      ?_UART_write 0070                            _setup 16E4  
                          pclath 000A                            status 0003                            wtemp0 007E  
                __end_of_sprintf 0EBD                     _BMP280_Read8 087E                     _BMP280_Write 1733  
                   _BMP280_calib 00A8                     _BMP280_begin 0CEF                  __initialization 07EB  
                   __end_of_main 1000           __size_of_BMP280_Read16 004C                           ??_main 005B  
         __size_of_BMP280_Update 00B7           _BMP280_readTemperature 0091                ?_I2C_Master_Start 0070  
              ?_I2C_Master_Write 0070                 BMP280_Read16@ret 007B               ??_I2C_Master_Start 0070  
             ??_I2C_Master_Write 0072                 ___llmod@dividend 0074                 ___awdiv@dividend 0076  
                         ?_setup 0070                           _ANSELH 0189                           _SSPADD 0093  
                         _TRISC3 043B                           _TRISC4 043C                           _SSPCON 0014  
                         _SSPBUF 0013                           ___lmul 098D                        ??___aldiv 0078  
                      ??___almod 0078                        ??___awdiv 0078                        ??___awmod 0078  
                      ??___lldiv 0078                        ??___llmod 0078                        ??___lwdiv 0074  
                      ??___lwmod 007C                           _buffer 006F              __size_of_UART_write 0028  
                         _t_fine 00A0                 ___awdiv@quotient 007B                  ___awmod@divisor 0074  
                ___awmod@counter 0079       BMP280_Configure@P_sampling 0077         __end_of_BMP280_Configure 098D  
                      ??_sprintf 002F                    _BMP280_Read16 09D5          __end_of__initialization 07FC  
     BMP280_Configure@T_sampling 0076                    _BMP280_Update 0C38                   __pcstackCOMMON 0070  
            _BMP280_readPressure 02C3                   USART_CONFIG@rc 0071                   USART_CONFIG@tr 0070  
                  __end_of_setup 170B                 BMP280_Update@ret 007A             ?_BMP280_readPressure 0070  
                        ??_setup 007E                       __pbssBANK0 005E                       __pbssBANK1 00A0  
                 ?_BMP280_Read16 0076                   ?_BMP280_Update 0070          BMP280_readPressure@var1 0057  
        BMP280_readPressure@var2 004F          BMP280_readPressure@pres 004A                       __pmaintext 0EBD  
                        ?___lmul 0026                   ___lmul@product 007A                 BMP280_begin@mode 007D  
          ??_BMP280_readPressure 002E                          _SSPCON2 0091                     ??_UART_write 0072  
                        _SSPSTAT 0094                       __stringtab 0800       BMP280_Configure@_ctrl_meas 0021  
           BMP280_Write@reg_addr 0075                          ___aldiv 0B9B                          ___almod 000C  
                        ___awdiv 0B34                  __size_of___lmul 0048                          ___awmod 0A75  
                        ___lldiv 0ACE                          ___llmod 0A21                          ___lwdiv 08BA  
                        ___lwmod 17C6               __end_of_UART_write 1733          ?_BMP280_readTemperature 0070  
                        __ptext1 0DD5                          __ptext2 17C6                          __ptext3 08BA  
                        __ptext4 16E4                          __ptext5 08FE                          __ptext6 178E  
                        __ptext7 086D                          __ptext8 0A21                          __ptext9 0A75  
                        _dpowers 0810                     __size_of_abs 0011                 ___awmod@dividend 0076  
               ___aldiv@dividend 0074         __size_of_I2C_Master_Init 0038         __size_of_I2C_Master_Read 002E  
       __size_of_I2C_Master_Wait 000D         __size_of_I2C_Master_Stop 0009                  ??_BMP280_Read16 0078  
                        _sprintf 0DD5                          clrloop0 16BD             end_of_initialization 07FC  
                ??_BMP280_Update 0076            BMP280_Read16@reg_addr 007A               BMP280_begin@filter 0025  
      __size_of_I2C_Master_Start 0009        __size_of_I2C_Master_Write 000A                  ___lldiv@divisor 0070  
                ___lldiv@counter 007D                        _RCSTAbits 0018                 ___aldiv@quotient 0022  
               I2C_Master_Init@c 0020                 I2C_Master_Read@a 0070   __end_of_BMP280_readTemperature 02C3  
                  ?_USART_CONFIG 0070                        _TRISCbits 0087                ?_BMP280_Configure 0076  
             ??_BMP280_Configure 007A           BMP280_Configure@filter 0078                        _TXSTAbits 0098  
                 __end_of___lmul 09D5                      _BAUDCTLbits 0187                   ??_USART_CONFIG 0072  
            start_initialization 07EB                      __end_of_abs 087E                ??_I2C_Master_Init 0024  
              ??_I2C_Master_Read 0072                ??_I2C_Master_Wait 0070                ??_I2C_Master_Stop 0070  
                ___llmod@divisor 0070                  ___llmod@counter 0079                         ??___lmul 0079  
           BMP280_Configure@mode 0020                        ___latbits 0002                    __pcstackBANK0 0020  
                    sprintf@flag 0033                      sprintf@prec 0034                    ?_BMP280_Read8 0070  
               _I2C_Master_Start 16C4                 _I2C_Master_Write 16CD                    ?_BMP280_Write 0072  
                  ?_BMP280_begin 0023                 ___lwdiv@dividend 0072             BMP280_readPressure@p 0053  
              BMP280_Write@_data 0072                         ?___aldiv 0070                         ?___almod 0070  
                       ?___awdiv 0074                         ?___awmod 0074                         ?___lldiv 0070  
                       ?___llmod 0070                         ?___lwdiv 0070                         ?___lwmod 0078  
               ___almod@dividend 0074                        __pstrings 0800      __end_of_BMP280_readPressure 07EB  
               ___lwdiv@quotient 0075                         ?_sprintf 0026                   __size_of_setup 0027  
                ___aldiv@divisor 0070                  ___aldiv@counter 0020                   ??_BMP280_Read8 0076  
                      clear_ram0 16BC                   ??_BMP280_Write 0073                   ??_BMP280_begin 0027  
           __end_of_USART_CONFIG 0945         _BMP280_readPressure$1102 004B         _BMP280_readPressure$1103 003E  
       _BMP280_readPressure$1104 0042         _BMP280_readPressure$1105 0046                      __stringbase 080F  
                 UART_write@word 0070              I2C_Master_Read@temp 0074                ___lmul@multiplier 0026  
          __end_of_BMP280_Read16 0A21            __end_of_BMP280_Update 0CEF        __size_of_BMP280_Configure 0048  
               __size_of___aldiv 009D                 __size_of___almod 0085                 __size_of___awdiv 0067  
               __size_of___awmod 0059                 __size_of___lldiv 0066                 __size_of___llmod 0054  
               __size_of___lwdiv 0044                 __size_of___lwmod 003A               __end_of__stringtab 0810  
                     sprintf@val 0035                  _I2C_Master_Init 178E                  _I2C_Master_Read 1760  
                _I2C_Master_Wait 16D7                  _I2C_Master_Stop 0003                  ___lwdiv@divisor 0070  
                ___lwdiv@counter 0077                         __ptext10 0B34                         __ptext11 000C  
                       __ptext20 087E                         __ptext12 170B                         __ptext21 09D5  
                       __ptext13 0091                         __ptext22 1760                         __ptext14 0C38  
                       __ptext23 0945                         __ptext15 02C3                         __ptext24 1733  
                       __ptext16 098D                         __ptext25 16CD                         __ptext17 0ACE  
                       __ptext26 0003                         __ptext18 0B9B                         __ptext27 16C4  
                       __ptext19 0CEF                         __ptext28 16D7                  ___almod@divisor 0070  
               __size_of_sprintf 00E8                  ___almod@counter 0079       BMP280_readTemperature@var1 003E  
     BMP280_readTemperature@var2 0042       BMP280_readTemperature@temp 004A                    __size_of_main 0143  
                       _pressure 0067             __end_of_BMP280_Read8 08BA         __end_of_I2C_Master_Start 16CD  
       __end_of_I2C_Master_Write 16D7             __end_of_BMP280_Write 1760             __end_of_BMP280_begin 0DD5  
                      sprintf@ap 0032                        sprintf@sp 0037             BMP280_Read8@reg_addr 0078  
          __size_of_USART_CONFIG 0047                 ___lwmod@dividend 007A                 ___lldiv@dividend 0074  
            BMP280_begin@standby 0026         ??_BMP280_readTemperature 002E                        stringcode 080A  
                     _OSCCONbits 008F          __end_of_I2C_Master_Init 17C6          __end_of_I2C_Master_Read 178E  
        __end_of_I2C_Master_Wait 16E4          __end_of_I2C_Master_Stop 000C                      _temperature 006B  
                       sprintf@c 0038                         sprintf@f 0026                 ___lldiv@quotient 0079  
              I2C_Master_Write@d 0070                  ___lwmod@divisor 0078                  ___lwmod@counter 007D  
                       stringdir 080A                         stringtab 0800                     ___aldiv@sign 0021  
                   _USART_CONFIG 08FE                      _SSPCON2bits 0091                       _UART_write 170B  
                   ___almod@sign 007A  
